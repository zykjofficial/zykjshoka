{
    "version": "https://jsonfeed.org/version/1",
    "title": "卓越科技-",
    "subtitle": "卓越人生、只为科技。",
    "icon": "https://shoka.zykjofficial.top/images/favicon.ico",
    "description": "Remarkable life,for science and technology.",
    "home_page_url": "https://shoka.zykjofficial.top",
    "items": [
        {
            "id": "https://shoka.zykjofficial.top/posts/4a17b156/",
            "url": "https://shoka.zykjofficial.top/posts/4a17b156/",
            "title": "卓越科技- 的Hexo博客搭建",
            "date_published": "2020-09-25T16:00:00.000Z",
            "content_html": "<h2 id=\"卓越科技-的个人博客搭建\"><a class=\"卓越科技-\" href=\"#卓越科技-的个人博客搭建\">#</a> 卓越科技 - 的个人博客搭建</h2>\n<div class=\"note info\">\n<p>这个博客是基于 Hexo 搭建的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmdlZWttdWJhaS5jb20vaGV4b2Jsb2cv\">教程链接</span><br>搭建博客也花了一定的时间、然后把搭建的步骤以及一些方法写出来、算是作为自己的第一篇博客吧！</p>\n</div>\n<h3 id=\"什么是-hexo\"><a class=\"卓越科技-\" href=\"#什么是-hexo\">#</a> 什么是 Hexo</h3>\n<p>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">Hexo</span> 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"基本环境的搭建\"><a class=\"卓越科技-\" href=\"#基本环境的搭建\">#</a> 基本环境的搭建</h3>\n<p>这里以 Windows 系统作为演示、其他系统类似。</p>\n<div class=\"note info\">\n<p>首先、需要安装 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi9kb3dubG9hZC8=\">Node.js</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZHM=\">Git</span><br>尽量下载.exe 扩展名的可执行文件，这样的好处是一键安装、省去了一些配置。安装版本也可以安装最新的版本。<br>如果有问题卸载安装旧版。</p>\n</div>\n<h4 id=\"nodejs\"><a class=\"卓越科技-\" href=\"#nodejs\">#</a> Node.js</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315181124.png\" alt=\"\" /></p>\n<p>验证 Node.js 的方法 (终端中输入)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr></table></figure><p>输入后能够显示版本说明安装成功、如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315182940.png\" alt=\"\" /></p>\n<h3 id=\"git\"><a class=\"卓越科技-\" href=\"#git\">#</a> Git</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315181949.png\" alt=\"\" /></p>\n<p>下载速度可能很慢。Windows 用户可以前往 淘宝 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy9taXJyb3JzL2dpdC1mb3Itd2luZG93cy8=\">Git for Windows</span> 镜像 下载 git 安装包。</p>\n<p>验证 Git 的方法 (终端中输入)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> --verion</pre></td></tr></table></figure><p>同样输入后能够显示版本说明安装成功。</p>\n<h3 id=\"博客搭建\"><a class=\"卓越科技-\" href=\"#博客搭建\">#</a> 博客搭建</h3>\n<h4 id=\"安装hexo\"><a class=\"卓越科技-\" href=\"#安装hexo\">#</a> 安装 Hexo</h4>\n<p>通过 npm 命令安装 Hexo</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></table></figure><div class=\"note info\">\n<p>接下来是一些常用的 <code>Hexo</code> 命令、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=\">官方文档</span></p>\n</div>\n<h5 id=\"init\"><a class=\"卓越科技-\" href=\"#init\">#</a> init</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init <span class=\"token punctuation\">[</span>folder<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>创建 Hexo 网站、 <code>folder</code>  为文件名、如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315210412.png\" alt=\"\" /></p>\n<p>这样就代表创建成功。但是发现 npm 报警告 ( <code>注意</code> ：在 windows 环境，所以可以忽略这个警告、如果是其他系统、可以通过查阅资料解决。)</p>\n<p><code>Hexo的目录结构</code> :</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">|</span>-- _config.yml</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span>-- package.json</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span>-- scaffolds</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span>-- <span class=\"token builtin class-name\">source</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">|</span>-- _posts</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>-- public</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span>-- themes</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>-- .gitignore</pre></td></tr></table></figure><p><code>_config.yml</code> ：网站的全局配置文件，设置包括 <code>网站标题</code> 、 <code>副标题</code> 、 <code>作者</code> 、 <code>关键字</code> 和 <code>描述信息</code> 等。<br />\n <code>package.json</code> ：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 --save 保存进去。<br />\n <code>scaffolds</code> ：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new [layout (布局)] [title] 的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。<br />\n <code>source</code> ：正如其名，source 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下（_posts）。_posts 目录下的 md 文件，会被编译成 html 文件，放到 public 文件夹下。<br />\n <code>public</code> ：参考 source 文件夹，在初始化后是没有 public 文件夹的，除非 hexo g 编译生成静态文件后，public 文件夹会自动生成。使用 hexo clean 清除 db.json 和 public 文件夹下的所有文件。<br />\n <code>themes</code> ：主题文件夹，存储主题。主题可以在 Github 上  <code>clone</code>  。<br />\n <code>.gitignore</code> ：.gitignore 文件作用是声明不被 git 记录的文件，hexo init <folder> 也会产生一个 .gitignore 文件，可以先删除或者直接编辑，对 hexo 不会有影响。</p>\n<p>打开 <code>_config.yml</code>  文件、需要自己配置的几个地方：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 网站标题 \t\t//网站标题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> 副标题\t\t//副标题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> 描述信息\t//描述信息</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> 关键字\t\t//关键字</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 作者\t\t//作者</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN\t\t//语言 可以在 /themes/landscape/languages 找到支持的语言</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> Asia/Shanghai\t//时区 Asia/Shanghai</pre></td></tr></table></figure><div class=\"note warning\">\n<p>之后的命令一定要 <code>cd</code> 到文件夹 (博客根目录) 中进行操作！！！</p>\n</div>\n<h5 id=\"clean\"><a class=\"卓越科技-\" href=\"#clean\">#</a> clean</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h5 id=\"server\"><a class=\"卓越科技-\" href=\"#server\">#</a> server</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或<span class=\"token punctuation\">(</span>简写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>启动服务器。默认访问的网址： <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span> , 还可以带参数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-p</code> ,  <code>--port</code></td>\n<td style=\"text-align:left\">重设端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-s</code> ,  <code>--static</code></td>\n<td style=\"text-align:left\">只使用静态文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-l</code> ,  <code>--log</code></td>\n<td style=\"text-align:left\">启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody>\n</table>\n<p>启动成功如图：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200315214815.png\" alt=\"\" /></p>\n<h5 id=\"generate\"><a class=\"卓越科技-\" href=\"#generate\">#</a> generate</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo generate</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或<span class=\"token punctuation\">(</span>简写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo g</pre></td></tr></table></figure><p>生成静态文件。</p>\n<h5 id=\"deploy\"><a class=\"卓越科技-\" href=\"#deploy\">#</a> deploy</h5>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo deploy</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或<span class=\"token punctuation\">(</span>简写<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-g</code> ,  <code>--generate</code></td>\n<td style=\"text-align:left\">部署之前预先生成静态文件</td>\n</tr>\n</tbody>\n</table>\n<p>这里与后面部署到 Github 上结合使用。</p>\n<h5 id=\"new\"><a class=\"卓越科技-\" href=\"#new\">#</a> new</h5>\n<pre><code>hexo new [title]\n</code></pre>\n<p>新建一篇文章。title 为文章名。</p>\n<pre><code>hexo new &quot;blog&quot;\n</code></pre>\n<p>文件在  <code>/source/_posts/blog.md</code>  中</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>-p</code> ,  <code>--path</code></td>\n<td style=\"text-align:left\">自定义新文章的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-r</code> ,  <code>--replace</code></td>\n<td style=\"text-align:left\">如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-s</code> ,  <code>--slug</code></td>\n<td style=\"text-align:left\">文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note success\">\n<p>一个基本的步骤：<br>hexo s (用于本地调试)<br>hexo new \"blog\"<br>hexo clean<br>hexo g<br>hexo d</p>\n</div>\n<blockquote>\n<p>到这里、你应该了解如何搭建 Hexo 博客了。</p>\n</blockquote>\n<h3 id=\"主题美化\"><a class=\"卓越科技-\" href=\"#主题美化\">#</a> 主题美化</h3>\n<p>使用主题可以让我们的博客更加的好看。所以我们选择下载自己喜欢的主题。</p>\n<div class=\"note info\">\n<p>Hexo 默认使用的是 landscape 官方主题、我们可以通过下载其他主题进行更换。<br>1、通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">官方主题网站</span>可以找到主题。<br>2、直接在 Github 中搜索 <code>hexo-theme</code> 相关的内容。</p>\n</div>\n<h4 id=\"下载主题\"><a class=\"卓越科技-\" href=\"#下载主题\">#</a> 下载主题</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token variable\"><span class=\"token variable\">`</span>Github主题地址<span class=\"token variable\">`</span></span> themes/文件名</pre></td></tr></table></figure><p>例如我想下载 Butterfly 主题、只需要 <code>git clone https://github.com/jerryc127/hexo-theme-butterfly themes/Butterfly</code>  就可以了。</p>\n<p>下载完成之后配置 <code>_config.yml</code> 、改成上面的那个文件名。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Plugins: https://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Themes: https://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> Butterfly</pre></td></tr></table></figure><p>这里介绍我喜欢的几个主题:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plcnJ5YzEyNy9oZXhvLXRoZW1lLWJ1dHRlcmZseQ==\">Butterfly</span>: 现在正在使用的主题、页面、个性化都很好、集成了很多插件。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JsaW5rZm94L2hleG8tdGhlbWUtbWF0ZXJ5\">matery</span>: 一个基于材料设计和响应式设计而成的全面、美观的 Hexo 主题。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLXZvbGFudGlzL2hleG8tdGhlbWUtdm9sYW50aXM=\">Volantis</span>: 一个高度模块化和可定制化、功能相对完善的 Hexo 博客主题，既可以用作个人博客，也适合用来搭建文档。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">Shoka</span>: 本主题</p>\n<p>更多关于主题的可以点击上述链接进入官网进行详细的了解。</p>\n<h3 id=\"博客部署\"><a class=\"卓越科技-\" href=\"#博客部署\">#</a> 博客部署</h3>\n<div class=\"note success\">\n<p>博客已经搭建好了、如何部署到 Web 上呢？</p>\n</div>\n<blockquote>\n<p>Github 提供了 Github Pages，Github Pages 是 Github 免费给开发者提供的一款托管个人网站的产品，目前只能托管静态内容，我们使用 Hexo 搭建的就是静态博客， 所以非常适合用来搭博客。<br />\n简单介绍一些步骤及命令。</p>\n</blockquote>\n<p>步骤也很简单，创建仓库、如图：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316100055.png\" alt=\"\" /></p>\n<h4 id=\"配置ssh-key\"><a class=\"卓越科技-\" href=\"#配置ssh-key\">#</a> 配置 SSH-Key</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"example\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config --global user.email example@example.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssh-keygen -t rsa -C <span class=\"token string\">\"example@example.com\"</span></pre></td></tr></table></figure><p>然后找到生成的秘钥：位置在  <code>C:/Users/你电脑的用户名/.ssh</code> <br />\n 用记事本打开 <code>id_rsa.pub</code>  复制里面的内容</p>\n<p>进入 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL2tleXM=\">https://github.com/settings/keys</span> 点击 <code>New SSH Key</code>  把之前复制的内容粘贴到这里就可以了。</p>\n<h4 id=\"安装部署插件\"><a class=\"卓越科技-\" href=\"#安装部署插件\">#</a> 安装部署插件</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</pre></td></tr></table></figure><p>安装完成之后在 <code>_config.yml</code>  中配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> 你创建仓库的位置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> master</pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316101714.png\" alt=\"\" /></p>\n<p>配置完成之后通过 <code>hexo d</code>  就可以部署到 Github 上了。</p>\n<h3 id=\"其他\"><a class=\"卓越科技-\" href=\"#其他\">#</a> 其他</h3>\n<div class=\"note success\">\n<p>Hexo 博客搭建完成了、主题也美化了、接下来就介绍几个常用的 Hexo 插件！</p>\n</div>\n<h4 id=\"valine-评论功能\"><a class=\"卓越科技-\" href=\"#valine-评论功能\">#</a> Valine 评论功能</h4>\n<p>无后端的评论功能。</p>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">快速开始</span></p>\n<p>效果如图：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316104850.png\" alt=\"\" /></p>\n<h4 id=\"aplayer-音乐插件\"><a class=\"卓越科技-\" href=\"#aplayer-音乐插件\">#</a> aplayer 音乐插件</h4>\n<p>在线音乐播放器、支持一些平台的歌单播放。</p>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01vZVBsYXllci9oZXhvLXRhZy1hcGxheWVy\">aplayer</span></p>\n<p>效果如图：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316105349.png\" alt=\"\" /></p>\n<h4 id=\"bilibili-bangumi-番剧插件\"><a class=\"卓越科技-\" href=\"#bilibili-bangumi-番剧插件\">#</a> bilibili-bangumi 番剧插件</h4>\n<p>显示番剧：想看、在看、已看功能。</p>\n<div class=\"note info\">\n<p>豆瓣 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL215dGhzbWFuL2hleG8tZG91YmFu\">hexo-douban</span> 一样。</p>\n</div>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hDTG9uZWx5L2hleG8tYmlsaWJpbGktYmFuZ3VtaQ==\">hexo-bilibili-bangumi</span></p>\n<p>效果如图：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200316110015.png\" alt=\"\" /></p>\n<h4 id=\"看板娘\"><a class=\"卓越科技-\" href=\"#看板娘\">#</a> 看板娘</h4>\n<p>很可爱的 Live2D！</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=\">Live2D Widget</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZnaHJzaC9saXZlMmRfZGVtbw==\">Live2D demo</span></li>\n</ul>\n<p>效果在左下角</p>\n<blockquote>\n<p>到这里、Hexo 搭建博客到这里就结束了、更多功能可以查阅官方文档。</p>\n</blockquote>\n",
            "tags": [
                "Hexo教程",
                "Hexo",
                "博客"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/5650a45b/",
            "url": "https://shoka.zykjofficial.top/posts/5650a45b/",
            "title": "Axios学习",
            "date_published": "2020-07-12T02:03:48.000Z",
            "content_html": "<h2 id=\"axios学习\"><a class=\"卓越科技-\" href=\"#axios学习\">#</a> Axios 学习</h2>\n<div class=\"note info\">\n<p>视频教程: https://www.bilibili.com/video/BV15741177Eh?p=141</p>\n</div>\n<h3 id=\"选择什么网络模块\"><a class=\"卓越科技-\" href=\"#选择什么网络模块\">#</a> 选择什么网络模块？</h3>\n<h4 id=\"ajax\"><a class=\"卓越科技-\" href=\"#ajax\">#</a> Ajax</h4>\n<p>选择一:  <code>传统的Ajax是基于XMLHttpRequest(XHR)</code></p>\n<p>为什么不用它呢？</p>\n<ul>\n<li>非常好解释，配置和调用方式等非常混乱.</li>\n<li>编码起来看起来就非常蛋疼.</li>\n<li>所以真实开发中很少直接使用，而是使用 jQuery-Ajax</li>\n</ul>\n<h4 id=\"jquery-ajax\"><a class=\"卓越科技-\" href=\"#jquery-ajax\">#</a> jQuery-Ajax</h4>\n<p>选择二:  <code>在前面的学习中, 我们经常会使用jQuery-Ajax</code></p>\n<ul>\n<li>相对于传统的 Ajax 非常好用.</li>\n</ul>\n<p>为什么不选择它呢？</p>\n<ul>\n<li>首先，我们先明确一点：在 Vue 的整个开发中都是不需要使用 jQuery 了.</li>\n<li>那么，就意味着为了方便我们进行一个网络请求，特意引用一个 jQuery, 你觉得合理吗？</li>\n<li>jQuery 的代码 1w + 行.</li>\n<li>Vue 的代码才 1w + 行.</li>\n<li>完全没有必要为了用网络请求就引用这个重量级的框架.</li>\n</ul>\n<h4 id=\"vue-resource\"><a class=\"卓越科技-\" href=\"#vue-resource\">#</a> Vue-resource</h4>\n<p>选择三:  <code>官方在Vue1.x的时候, 推出了Vue-resource.</code></p>\n<ul>\n<li>Vue-resource 的体积相对于 jQuery 小很多.</li>\n<li>另外 Vue-resource 是官方推出的.</li>\n</ul>\n<p>为什么不选择它呢？</p>\n<ul>\n<li>在 Vue2.0 退出后，Vue 作者就在 GitHub 的 Issues 中说明了去掉 vue-resource, 并且以后也不会再更新.</li>\n<li>那么意味着以后 vue-reource 不再支持新的版本时，也不会再继续更新和维护.</li>\n<li>对以后的项目开发和维护都存在很大的隐患.</li>\n</ul>\n<h4 id=\"axios\"><a class=\"卓越科技-\" href=\"#axios\">#</a> Axios</h4>\n<p>Vue 作者推荐，axios 有非常多的优点，并且用起来也非常方便.</p>\n<p><code>特性</code></p>\n<ul>\n<li>从浏览器中创建 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0\">XMLHttpRequests</span></li>\n<li>从 node.js 创建 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbA==\">http</span> 请求</li>\n<li>支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==\">Promise</span> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 <span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeQ==\">XSRF</span></li>\n</ul>\n<h3 id=\"axiox请求方式\"><a class=\"卓越科技-\" href=\"#axiox请求方式\">#</a> axiox 请求方式</h3>\n<ul>\n<li><code>axios(config)</code></li>\n<li><code>axios.request(config)</code></li>\n<li><code>axios.get(url[, config])</code></li>\n<li><code>axios.delete(url[, config])</code></li>\n<li><code>axios.head(url[, config])</code></li>\n<li><code>axios.post(url[, data[, config]])</code></li>\n<li><code>axios.put(url[, data[, config]])</code></li>\n<li><code>axios.patch(url[, data[, config]])</code></li>\n</ul>\n<h3 id=\"axios的基本使用\"><a class=\"卓越科技-\" href=\"#axios的基本使用\">#</a> axios 的基本使用</h3>\n<ul>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios --save</pre></td></tr></table></figure></li>\n<li>\n<p>使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//url 是用于请求的服务器 URL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//method 是创建请求时使用的方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 不写 type 默认为 get 请求</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711175552.png\" alt=\"20200711175552.png\" /></p>\n</li>\n<li>\n<p>get 请求参数拼接  <code>params</code>  是即将与请求一起发送的 URL 参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 不使用 params 可以直接拼接 http://123.207.32.32:8000/home/data?type=pop&amp;page=3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    params<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        page <span class=\"token operator\">:</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"常见请求的参数\"><a class=\"卓越科技-\" href=\"#常见请求的参数\">#</a> 常见请求的参数</h3>\n<ul>\n<li>\n<p>Get 请求</p>\n<p><code>axios.get(url, params).then(res =&gt; &#123; do something &#125;)</code></p>\n<p>例子:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  params <span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      id<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> consloe<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>Post 请求</p>\n<p><code>axios.post(url, data).then(res =&gt; &#123; do something &#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> consloe<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"axios的并发请求\"><a class=\"卓越科技-\" href=\"#axios的并发请求\">#</a> axios 的并发请求</h3>\n<p>当想同时请求多个地址时、就需要使用 <code>axios.all(iterable)</code>  类似:  <code>axios.all([axios(&#123;&#125;),axios(&#123;&#125;),...]).then()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        page<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 打印的是一个数组对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711203105.png\" alt=\"20200711203105.png\" /></p>\n<p>使用  <code>axios.spread</code>  可将数组 [res1,res2] 展开为 res1, res2</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000/home/data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        page<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data1<span class=\"token punctuation\">,</span> data2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711203625.png\" alt=\"20200711203625.png\" /></p>\n<h3 id=\"axios的全局配置\"><a class=\"卓越科技-\" href=\"#axios的全局配置\">#</a> axios 的全局配置</h3>\n<p>事实上，在开发中可能很多参数都是固定的、这个时候我们可以进行一些抽取，也可以利用 axios 的全局配置</p>\n<p><code>axios.defaults.baseURL = '123.207.32.32:8000'</code> <br />\n <code>axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 全局配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"http://123.207.32.32:8000\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">5000</span> <span class=\"token comment\">// 单位：毫秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/data\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        type<span class=\"token operator\">:</span> <span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        page<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data1<span class=\"token punctuation\">,</span> data2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过配置全局的 baseURL 可以省略掉这前面固定的部分，发送请求只需要填写后面的部分即可组合起来请求地址，发送请求。</p>\n<h4 id=\"请求配置\"><a class=\"卓越科技-\" href=\"#请求配置\">#</a> 请求配置</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//url 是用于请求的服务器 URL</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  url<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//method 是创建请求时使用的方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//baseURL 将自动加在 url 前面，除非 url 是一个绝对 URL。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 它可以通过设置一个 baseURL 便于为 axios 实例的方法传递相对 URL</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//transformRequest 允许在向服务器发送前，修改请求数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  transformRequest<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 对 data 进行任意转换处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//transformResponse 在传递给 then/catch 前，允许修改响应数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  transformResponse<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 对 data 进行任意转换处理</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">//headers 是即将被发送的自定义请求头</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'X-Requested-With'</span><span class=\"token operator\">:</span> <span class=\"token string\">'XMLHttpRequest'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">//params 是即将与请求一起发送的 URL 参数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 必须是一个无格式对象 (plain object) 或 URLSearchParams 对象</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">12345</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">//paramsSerializer 是一个负责 params 序列化的函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token comment\">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function-variable function\">paramsSerializer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>arrayFormat<span class=\"token operator\">:</span> <span class=\"token string\">'brackets'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token comment\">//data 是作为请求主体被发送的数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token comment\">// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">// 在没有设置 transformRequest 时，必须是以下类型之一：</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">//- 浏览器专属：FormData, File, Blob</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">//- Node 专属： Stream</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\">//timeout 指定请求超时的毫秒数 (0 表示无超时时间)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token comment\">//withCredentials 表示跨域请求时是否需要使用凭证</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">//adapter 允许自定义处理请求，以使测试更轻松</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token function-variable function\">adapter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre> <span class=\"token comment\">//auth 表示应该使用 HTTP 基础验证，并提供凭据</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization` 头</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    username<span class=\"token operator\">:</span> <span class=\"token string\">'janedoe'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    password<span class=\"token operator\">:</span> <span class=\"token string\">'s00pers3cret'</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   <span class=\"token comment\">//responseType 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  responseType<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token comment\">// responseEncoding indicates encoding to use for decoding responses</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token comment\">// Note: Ignored for `responseType` of 'stream' or client-side requests</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  responseEncoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   <span class=\"token comment\">//xsrfCookieName 是用作 xsrf token 的值的 cookie 的名称</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  xsrfCookieName<span class=\"token operator\">:</span> <span class=\"token string\">'XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">// xsrfHeaderName is the name of the http header that carries the xsrf token value</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  xsrfHeaderName<span class=\"token operator\">:</span> <span class=\"token string\">'X-XSRF-TOKEN'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   <span class=\"token comment\">//onUploadProgress 允许为上传处理进度事件</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token function-variable function\">onUploadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// Do whatever you want with the native progress event</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token comment\">//onDownloadProgress 允许为下载处理进度事件</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token function-variable function\">onDownloadProgress</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">progressEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">// 对原生进度事件的处理</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   <span class=\"token comment\">//maxContentLength 定义允许的响应内容的最大尺寸</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  maxContentLength<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token comment\">//validateStatus 定义对于给定的 HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token function-variable function\">validateStatus</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token comment\">//maxRedirects 定义在 node.js 中 follow 的最大重定向数目</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  <span class=\"token comment\">// 如果设置为 0，将不会 follow 任何重定向</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  maxRedirects<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token comment\">// socketPath defines a UNIX Socket to be used in node.js.</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token comment\">// e.g. '/var/run/docker.sock' to send requests to the docker daemon.</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token comment\">// Only either `socketPath` or `proxy` can be specified.</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token comment\">// If both are specified, `socketPath` is used.</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  socketPath<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">//httpAgent 和 httpsAgent 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token comment\">//keepAlive 默认没有启用</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  httpAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">http<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  httpsAgent<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">https<span class=\"token punctuation\">.</span>Agent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">// 'proxy' 定义代理服务器的主机名称和端口</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">//auth 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">9000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    auth<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      username<span class=\"token operator\">:</span> <span class=\"token string\">'mikeymike'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">'rapunz3l'</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">//cancelToken 指定用于取消请求的 cancel token</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token comment\">// （查看后面的 Cancellation 这节了解更多）</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  cancelToken<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"axios的实例\"><a class=\"卓越科技-\" href=\"#axios的实例\">#</a> axios 的实例</h3>\n<p>为什么要创建 axios 的实例呢？ <code>可以设置默认配置、规定配置</code></p>\n<p>可以使用自定义配置新建一个 axios 实例  <code>axios.create([config])</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200711221107.png\" alt=\"20200711221107.png\" /></p>\n<h3 id=\"axios的封装\"><a class=\"卓越科技-\" href=\"#axios的封装\">#</a> axios 的封装</h3>\n<p>为了保证代码的后期维护、我们需要对 axios 进行封装</p>\n<p>在 src 下创建 <code>network/request.js</code></p>\n<blockquote>\n<p>操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>request<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./network/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>Promise 形式</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1. 创建 axios 的实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://123.207.32.32:8000/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      timeout<span class=\"token operator\">:</span> <span class=\"token number\">50000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 发送网络请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>request<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./network/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url<span class=\"token operator\">:</span> <span class=\"token string\">'home/multidata'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"axios的拦截器\"><a class=\"卓越科技-\" href=\"#axios的拦截器\">#</a> axios 的拦截器</h3>\n<p>在请求或响应被  <code>then</code>  或  <code>catch</code>  处理前拦截它们。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>request.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        baseURL<span class=\"token operator\">:</span> <span class=\"token string\">\"http://123.207.32.32:8000\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拦截的请求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 拦截了请求要返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"拦截的响应\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span>  response<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>main.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>request<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./network/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/multidata\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求成功返回的结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200712100002.png\" alt=\"20200712100002.png\" /></p>\n",
            "tags": [
                "Web教程",
                "前端",
                "Axios"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/d8fc8ff1/",
            "url": "https://shoka.zykjofficial.top/posts/d8fc8ff1/",
            "title": "Nodejs学习",
            "date_published": "2020-07-06T02:53:26.000Z",
            "content_html": "<h2 id=\"nodejs学习\"><a class=\"卓越科技-\" href=\"#nodejs学习\">#</a> Nodejs 学习</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。</p>\n</div>\n<h3 id=\"nodejs\"><a class=\"卓越科技-\" href=\"#nodejs\">#</a> Nodejs</h3>\n<h4 id=\"什么是nodejs\"><a class=\"卓越科技-\" href=\"#什么是nodejs\">#</a> 什么是 Node.js</h4>\n<ol>\n<li>基于谷歌 ChromeV8 引擎的 JS 运行环境 ( <code>不是框架不是库，而是一个可以不通过浏览器而解析JS语言的运行环境</code> )，Node 中只有一些服务器操作级别 API (如文件读写、网络服务构建、网络通信、http 服务器等)，没有 BOM/DOM</li>\n<li>Node 是通过事件驱动、无阻塞输入输出模型而实现轻量和高效的</li>\n<li>Node 生态包 npm 是世界上最大的开源库生态系统</li>\n</ol>\n<h4 id=\"nodejs可以做什么\"><a class=\"卓越科技-\" href=\"#nodejs可以做什么\">#</a> Node.js 可以做什么</h4>\n<ol>\n<li>Web 服务器后台</li>\n<li>命令行工具 (npm、git、hexo)</li>\n<li>游戏服务器</li>\n</ol>\n<h4 id=\"npm\"><a class=\"卓越科技-\" href=\"#npm\">#</a> npm</h4>\n<blockquote>\n<p>(node package manager: node 包管理器)</p>\n</blockquote>\n<div class=\"note info\">\n<p>package.json (包描述文件)</p>\n</div>\n<p>一个项目最好有一个 package.json 文件，可以保存你在开发过程中安装的包的信息</p>\n<p>在安装包的时候 使用  <code>npm install --save 包名</code>  安装 即会自动将包名添加到 <code>package.json</code>  中，也可以通过 <code>npm init</code>  初始化创建</p>\n<p>如果移植项目，且有 <code>package.json</code>  文件，则可以直接执行 <code>npm install</code>  安装这些包</p>\n<div class=\"note info\">\n<p>常用命令：</p>\n</div>\n<ul>\n<li>\n<p><code>npm --version</code>  查看版本</p>\n</li>\n<li>\n<p><code>npm install --global npm</code>   升级 npm</p>\n</li>\n<li>\n<p><code>npm init</code>  生成 package.json 包</p>\n</li>\n<li>\n<p><code>npm init -y</code>   省略向导生成 package.json 包</p>\n</li>\n<li>\n<p><code>npm install 包名 (缩写: npm i 包名)</code>    安装包名 (只下载)</p>\n</li>\n<li>\n<p><code>npm install 包名 --save (缩写: npm i-S 包名)</code>   下载并且保存为 package.json 文件中的依赖项</p>\n</li>\n<li>\n<p><code>npm i --save-dev</code>  中的 dev 代表这个包只是暂时使用，上线后即销毁不再使用用，在 packjson 文件里会保存在 <code>devDependencies</code>  项里，当我们转移项目使用 <code>npm install --production</code>  命令安装依赖包时会忽略 <code>devDependencies</code>  里的包</p>\n</li>\n<li>\n<p><code>npm uninstall 包名 (缩写: npm un 包名)</code>  卸载包 (只删除，依旧保留依赖项)</p>\n</li>\n<li>\n<p><code>npm uninstall --save 包名 (缩写: npm un -S 包名)</code>   卸载包，同时删除依赖项</p>\n</li>\n<li>\n<p><code>npm help</code>  查看使用帮助</p>\n</li>\n<li>\n<p><code>npm 命令 --help</code>  查看该命令的使用帮助</p>\n</li>\n</ul>\n<h4 id=\"如何利用nodejs解析js文件\"><a class=\"卓越科技-\" href=\"#如何利用nodejs解析js文件\">#</a> 如何利用 Node.js 解析 js 文件</h4>\n<ol>\n<li>\n<p>创建编写 js 文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>输入 node + 文件名 解析执行</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200705170044.png\" alt=\"20200705170044.png\" /></p>\n</li>\n</ol>\n<h3 id=\"原生nodejs\"><a class=\"卓越科技-\" href=\"#原生nodejs\">#</a> 原生 Node.js</h3>\n<h4 id=\"nodejs中的javascript\"><a class=\"卓越科技-\" href=\"#nodejs中的javascript\">#</a> Node.js 中的 JavaScript</h4>\n<p>包含四大部分:</p>\n<ol>\n<li>即原本的 ECMAScript</li>\n<li>node 定义的核心模块，包含了很多服务器级别的 API (如 fs、url、http、os 等)</li>\n<li>第三方模块 (通过 npm 下载的模块，如 art-template)</li>\n<li>用户自定义模块 (自己创建的 js 文件)</li>\n</ol>\n<h5 id=\"模块的加载\"><a class=\"卓越科技-\" href=\"#模块的加载\">#</a> 模块的加载</h5>\n<ul>\n<li>\n<p>语法:  <code>require(模块名)</code></p>\n</li>\n<li>\n<p>require 的作用:</p>\n<ol>\n<li>\n<p>执行外部模块中的语句</p>\n</li>\n<li>\n<p>拿到被加载文件导出的接口对象 <code>export(即核心模块的原理)</code></p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取操作系统信息 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> os <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 操作路径 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>require亦可引入自定义模块</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./test.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>相对路径必须加 <code>./</code></p>\n</li>\n<li>\n<p>可以忽略 <code>后缀名</code></p>\n</li>\n<li>\n<p>node 没有全局作用域，没有文档一说，只有模块作用域，一个 js 文件中的变量函数无法直接被外部引用，想引用只能通过 export 对象</p>\n</li>\n</ol>\n<h5 id=\"利用require引用其他js文件中的变量函数\"><a class=\"卓越科技-\" href=\"#利用require引用其他js文件中的变量函数\">#</a> 利用 require 引用其他 js 文件中的变量函数</h5>\n<blockquote>\n<p>利用接口对象 <code>exports</code>  或者 <code>module.exports</code></p>\n</blockquote>\n<ul>\n<li>\n<p>导出多个变量</p>\n<p><code>exports.变量名 = xxx;</code></p>\n<p><code>module.exports.变量名 = xxx;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//b.js 中的代码 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>exports<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>exports<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//a.js 中的代码 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 b.js 中的 export 对象给 bbianliang </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">+</span><span class=\"token string\">' world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 hello world!</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 helloworld</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果想直接导出一个变量，则必须用以下形式:</p>\n<p><code>module.exports = 变量</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样引入这个模块时就 <code>直接得到一个数组而不用对象的属性获取</code></p>\n</li>\n<li>\n<p>原理：每个模块都有一个 <code>module对象</code> ，里面 <code>存着exports对象</code> ，每个模块最后都默认 <code>返回module.exports</code> ，而直接使用的 exports 是对这个属性的引用，存储的是 module.exports 对象的地址，所以如果直接对 exports 直接赋值是无法改变 module.exports 的值的，只能在根本上改变，即直接改变 module.exports 的值</p>\n</li>\n</ul>\n<h5 id=\"模块的加载顺序\"><a class=\"卓越科技-\" href=\"#模块的加载顺序\">#</a> 模块的加载顺序</h5>\n<p>模块会优先从缓存中加载，例如下面:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//main.js </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//a.js </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.js has been loaded!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//b.js </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b.js has been loaded!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果:</p>\n<pre><code>a.js has been loaded!\nb.js has been loaded!\n[Function]\n[Function]\n</code></pre>\n<p>解析：结果不会出现两次 <code>b.js has been loaded!</code> ，因为 a 中已经加载过 b 了，所以不会再次执行，但是还是会取得其中接口对象，这样的优点是避免重复加载，提高效率。</p>\n<h5 id=\"三种模块的加载原理\"><a class=\"卓越科技-\" href=\"#三种模块的加载原理\">#</a> 三种模块的加载原理</h5>\n<blockquote>\n<p>用户自定义模块：如果发现为路径形式的模块，则直接按照路径加载</p>\n</blockquote>\n<p><code>./</code>  : 当前目录 (文件操作可以忽略，自定义模块标识符必须有)</p>\n<p><code>../</code>  : 上一级目录</p>\n<p><code>/</code>  : 当前文件所属磁盘根路径 ( <code>C:/</code>   <code>D:/</code> ) 几乎不用</p>\n<br/>\n<blockquote>\n<p>核心模块：核心模块的本质也是文件，已经被编译到二进制文件中 按照名字加载即可</p>\n</blockquote>\n<br/>\n<blockquote>\n<p>第三方模块：凡是第三方模块都必须通过 npm 来下载，使用的时候通过 <code>require('包名')</code>  的形式加载才可以使用</p>\n</blockquote>\n<p>步骤:</p>\n<ol>\n<li>\n<p>如果判断不是为核心模块也不是路径形式，则会找当前文件所处目录下的 <code>node_module</code>  目录下的同名目录中 <code>package.json</code>  中的 main 属性 main 属性包含了入口模块 然后加载指向的文件</p>\n</li>\n<li>\n<p>如果 <code>package.json</code>  文件不存在或者 main 指定的入口模块也没有 就会自动找目录下的 index.js index.js 为默认备选项</p>\n</li>\n<li>\n<p>如果以上所有都不成立则会进入上一级目录中的 node_module 目录查找</p>\n</li>\n<li>\n<p>如果上一级还没有，则继续往上一级查找 直至报错</p>\n</li>\n</ol>\n<p>注意：一个项目有且只能有一个 <code>node_module</code>  文件夹</p>\n<h4 id=\"fs文件操作模块\"><a class=\"卓越科技-\" href=\"#fs文件操作模块\">#</a> fs 文件操作模块</h4>\n<blockquote>\n<p>Nodejs 有文件操作能力，通过引入文件系统模块，其中包含了各种文件操作 API</p>\n</blockquote>\n<h5 id=\"读取文件\"><a class=\"卓越科技-\" href=\"#读取文件\">#</a> 读取文件</h5>\n<p>步骤:</p>\n<ol>\n<li>\n<p>首先用 <code>require</code>  引入模块，需要什么功能，就引入什么模块，引入模块其实就相当于引入一些相关语法。操控文件则要引入 <code>file-system</code>  模块，用字符串 fs 表示</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 fs 模块的 readFile 方法读取文件</p>\n<p><code>fs模块变量.readFile(文件地址，可选参数[编码格式],回调函数(error，data)&#123;&#125;)</code></p>\n<p>回调函数有两个参数， <code>第一个是读取发生错误时返回的错误对象</code> ， <code>第二个是读取的数据,读取后的数据是二进制代码</code> ，可以在回调函数中将其转为字符串，JS 中的转换成字符串的方法都能实现 <code>toString</code>   <code>String + &quot;&quot;</code> 、也可以传入 <code>第二个可选参数进行配置</code> ，读取后的文件会自动按照其值解码。如传入 <code>'utf8'</code> , 则会按照 <code>utf8解码</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write.txt'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">+</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取文件失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"写入文件\"><a class=\"卓越科技-\" href=\"#写入文件\">#</a> 写入文件</h5>\n<p>步骤:</p>\n<ol>\n<li>\n<p>首先用 require 引入模块，需要什么功能，就引入什么模块，操控文件则要引入 file-system 模块，用字符串 fs 表示</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 fs 模块的 writeFile 方法</p>\n<p><code>fs模块变量.writeFile(文件地址，写入内容，回调函数(error)&#123;&#125;)</code></p>\n<p>回调函数有一个形参 error，用于写入错误时返回错误信息</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./write.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello world！！！！！'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console.log(error);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入成功!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"追加文件\"><a class=\"卓越科技-\" href=\"#追加文件\">#</a> 追加文件</h5>\n<p><code>fs.appendFile(文件地址，追加内容，回调函数(error)&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'t1.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'这是写入的内容'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'追加成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"删除文件\"><a class=\"卓越科技-\" href=\"#删除文件\">#</a> 删除文件</h5>\n<p><code>s.unlink(文件地址，回调函数(error)&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//  删除文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.txt'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'删除文件成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"读取文件列表\"><a class=\"卓越科技-\" href=\"#读取文件列表\">#</a> 读取文件列表</h5>\n<p>利用 <code>fs模块</code> 变量的 <code>readdir</code>  方法</p>\n<p><code>fs.readdir(路径名，function(error,files) &#123;&#125;)</code></p>\n<p>回调函数的两个参数分别是 <code>错误对象</code> 以及 <code>读取到的文件名列表(数组形式)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./read.txt'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'404 can not found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>                 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"http模块\"><a class=\"卓越科技-\" href=\"#http模块\">#</a> Http 模块</h4>\n<blockquote>\n<p>Node.js 中有 http 模块 (字符串 http 表示) 可以快速构建 Web 服务器</p>\n</blockquote>\n<h5 id=\"步骤\"><a class=\"卓越科技-\" href=\"#步骤\">#</a> 步骤</h5>\n<ol>\n<li>\n<p>加载 http 模块</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 <code>http.createServe</code>  创建服务器实例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置 request 事件，当客户端发送请求时则触发该事件并调用其回调函数</p>\n<p><code>服务器实例.on(&quot;request&quot;,回调函数(request,response)&#123;&#125;)</code></p>\n<p>回调函数中有两个参数 <code>request</code>  和 <code>response</code></p>\n<p><code>request</code></p>\n<ul>\n<li>\n<p><code>req</code>  : 它表示一个正在进行的请求，可以获取一些请求信息，比如请求路径</p>\n</li>\n<li>\n<p><code>req.url</code> : 返回请求路径</p>\n</li>\n<li>\n<p><code>req.headers</code> :  打印全部请求头信息 -- 对象形式</p>\n</li>\n<li>\n<p><code>req.method</code> :  请求的方式</p>\n</li>\n</ul>\n<p><code>response</code></p>\n<ul>\n<li>\n<p><code>res</code> : 可以给客户端发送响应信息</p>\n</li>\n<li>\n<p><code>res.setHeader()</code> : 设置响应头，告诉客户端解码方式，如果响应的是 html 页面且 html 页面中元数据 meta 已经声明解码方式则可忽视</p>\n</li>\n<li>\n<p><code>res.statusCode</code> : 设置状态码数字</p>\n</li>\n<li>\n<p><code>res.status.message</code> : 设置状态码文字</p>\n</li>\n<li>\n<p><code>res.write(相应内容)</code> : 向客户端发送响应信息 write 之后必须调用 end 方法用以告诉客户端已经输出完毕、可以有多句 res.write</p>\n</li>\n<li>\n<p><code>res.end(数据)</code> : 完成发送请求 必须跟在 response.write 之后 每个 request 事件只能有一句 <code>res.end</code></p>\n<p>也可以直接通过 <code>response.end</code>  传送数据  <code>response.end(数据)</code>  支持字符串和二进制数据，会直接将二进制转为字符串</p>\n</li>\n</ul>\n<p>可以与 request 的 url 属性搭配使用实现不同请求传递不同信息</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span>response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i got you'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url <span class=\"token operator\">==</span> <span class=\"token string\">'/haha'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果请求的是 haha 地址，则页面显示 haha    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结束响应</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'please go to /haha'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果请求的不是 haha 地址，则会显示左边内容   </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p>也可以传送文件数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">==</span> <span class=\"token string\">'/html'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/html;charset=utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/index.html'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取失败!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">//res.end 支持字符串也支持二进制 所以不用转换 \t</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">==</span> <span class=\"token string\">'/plain'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain;charset=utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/index.txt'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取失败!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">==</span> <span class=\"token string\">'/img'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 图片的 MIME 类型为 image/jpg 一般可以不用设定 </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'image/jpg;charset=utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./resource/82710.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取失败！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意:  <code>response.end</code>  方法支持传送二进制数据，所以不用转化获取的文件数据就可以直接发送</p>\n<ol start=\"4\">\n<li>\n<p>使用 <code>listen方法</code> 绑定端口号，并启动服务器对其监听，启动后调用其回调函数</p>\n<p><code>服务器实例.listen(端口号,回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动成功 可以通过 http://127.0.0.1:3000 访问'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 启动成功后，node 环境中则会输出上面语句</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 node 环境中打开该 js 文件，启动服务器 (node 环境中 <code>ctrl+c</code>  可以关闭服务器</p>\n</li>\n</ol>\n<h5 id=\"http的重定向\"><a class=\"卓越科技-\" href=\"#http的重定向\">#</a> http 的重定向</h5>\n<p><code>res.statusCode = 302;</code></p>\n<p><code>res.statusCode</code> : 此属性控制在刷新标头时将发送到客户端的状态代码</p>\n<p><code>res.setHeader('Location',路径)</code></p>\n<p><code>res.end()</code></p>\n<h4 id=\"url模块\"><a class=\"卓越科技-\" href=\"#url模块\">#</a> URL 模块</h4>\n<blockquote>\n<p>url 模块可以对 url 地址进行一些操作</p>\n</blockquote>\n<h5 id=\"加载模块\"><a class=\"卓越科技-\" href=\"#加载模块\">#</a> 加载模块</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"解析地址方法\"><a class=\"卓越科技-\" href=\"#解析地址方法\">#</a> 解析地址方法</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">,</span>布尔值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>返回地址的详细信息</p>\n<p><code>其中第二个参数如果为true，则会将地址中的query参数转为对象，默认为false</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200705181137.png\" alt=\"20200705181137.png\" /></p>\n<p><code>pathname</code> : 返回路径</p>\n<p><code>query</code> : 返回参数</p>\n<h4 id=\"path模块\"><a class=\"卓越科技-\" href=\"#path模块\">#</a> Path 模块</h4>\n<blockquote>\n<p>可以对路径进行操作，注意不是操作 URL</p>\n</blockquote>\n<h5 id=\"加载方式\"><a class=\"卓越科技-\" href=\"#加载方式\">#</a> 加载方式</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"模块方法\"><a class=\"卓越科技-\" href=\"#模块方法\">#</a> 模块方法</h5>\n<ul>\n<li>\n<p><code>path.basename(路径)</code> : 获取路径中最后的文件名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c://a/b/c/index.js'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 'index'</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>parse.dirname</code> : 获取路径中的目录部分</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c://a/b/c/index.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 'c://a/b/c'</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>parse.extname</code> : 获取路径中文件的扩展名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c://a/b/c/index.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回.js</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>path.join(路径1，路径2)</code> : 将路径拼接起来</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c://a/b/c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'index.js'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 'c://a/b/c/index.js'</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>path.parse(路径)</code> : 将路径里的元素分别提取出来</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c://a/b/c/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"node中的dirname和__filename\"><a class=\"卓越科技-\" href=\"#node中的dirname和__filename\">#</a> Node 中的 <code>dirname</code>  和 <code>__filename</code></h4>\n<p>node 中除了 require、exports 等相关模块之外，还有两个特殊的成员</p>\n<ul>\n<li>\n<p><code>__dirname</code> : 可以获取当前文件所属目录的绝对路径</p>\n</li>\n<li>\n<p><code>__filename</code> : 可以获取当前文件的绝对路径</p>\n</li>\n</ul>\n<p>注意:</p>\n<ol>\n<li>\n<p>文件操作中的 <code>./</code>  是相对于执行终端的路径的目录而不是当前文件的目录，如果在别的路径下打开终端执行该文件则会找不到要读取的文件，所以在写文件路径时一般使用 <code>path模块</code> 的 <code>path.join</code>  将 <code>__dirname</code>  和文件拼接起来</p>\n</li>\n<li>\n<p>在大部分文件操作路径中一般都是用绝对路径，而为了防止项目移植时绝对路径失效，所以应该使用动态的绝对路径，也就是 <code>dirname</code>  和 <code>filename</code></p>\n</li>\n<li>\n<p>模块加载中的 <code>./</code>  则不受影响，是相对于当前文件的目录，不需要使用 <code>dirname</code>  和 <code>filename</code></p>\n</li>\n</ol>\n<h4 id=\"art-template模板引擎模块\"><a class=\"卓越科技-\" href=\"#art-template模板引擎模块\">#</a> art-template 模板引擎模块</h4>\n<p>步骤:</p>\n<ol>\n<li>\n<p>加载模板引擎模块并赋予某个变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> template <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'art-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>下载的模板叫什么名字就加载时就填什么名字</code></p>\n</li>\n<li>\n<p>使用模板引擎的 <code>render</code>  方法</p>\n<p><code>template.render(字符串，填充对象)</code>  : 返回的是填充后的字符串</p>\n<p>可以只写第一个参数快速返回一个页面，但是如果页面里有待填充的 script 标签则不能以这种方式发送，因为会被填充掉</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello '</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果要填充的是外部的文件，则读取文件后要记得将其转为字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span>province<span class=\"token operator\">:</span><span class=\"token string\">'guangdong'</span><span class=\"token punctuation\">,</span>hobbies<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'dance'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'sing'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rap'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'basketball'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.html'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'404 not found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>配合 <code>http模块</code> 使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url <span class=\"token operator\">===</span> <span class=\"token string\">'/template'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'template.html'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'404 not found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> \t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">var</span> ret <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3000'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'running...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"formidable模块实现文件上传\"><a class=\"卓越科技-\" href=\"#formidable模块实现文件上传\">#</a> formidable 模块实现文件上传</h4>\n<blockquote>\n<p>利用 formidable 第三方模块可以实现文件的上传</p>\n</blockquote>\n<p>使用步骤:</p>\n<ol>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i --S formidable</pre></td></tr></table></figure></li>\n<li>\n<p>加载</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> formidable <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'formidable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>路由监听配置</p>\n<ol>\n<li>\n<p>先创建一个 form 对象用以接收文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> form  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">formidable<span class=\"token punctuation\">.</span>IncomingForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>进行配置 (可选)</p>\n<p><code>form.encoding = &quot;utf-8&quot;</code> : 设置文件解码方式</p>\n<p><code>form.uploadDir = __dirname + '/img'</code> : 设置上传文件存放位置</p>\n<p><code>form.keepExtensions = true;</code> : 设置文件是否保留后缀名</p>\n<p><code>form.multiples = true;</code> : 设置是否为多个文件，如果为 true，则 files 参数会以数组显示</p>\n</li>\n<li>\n<p>对文件解析并用回调函数进行操作</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>form<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>fields<span class=\"token punctuation\">,</span>files</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>文件解析后，文件信息解析完成后会挂载到 req 上，文本的信息将挂载到 fileds 上，文件的信息将挂载到 files 上面 (包括存放的绝对地址、文件大小、文件名字、文件 mime 类型)。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/files'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> form <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">formidable<span class=\"token punctuation\">.</span>IncomingForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    form<span class=\"token punctuation\">.</span>keepExtensions <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    form<span class=\"token punctuation\">.</span>multiples <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    form<span class=\"token punctuation\">.</span>uploadDir <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">\"/img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    form<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'text/plain;charset=utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>fields<span class=\"token punctuation\">,</span>files<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"客户端渲染数据和服务端渲染数据的区别\"><a class=\"卓越科技-\" href=\"#客户端渲染数据和服务端渲染数据的区别\">#</a> 客户端渲染数据和服务端渲染数据的区别</h4>\n<ul>\n<li>\n<p>客户端渲染 (SPA:single page application): 用户通过地址栏或者链接标签进入一个新的链接后，向服务器 <code>发出请求</code> ， <code>服务器直接根据链接返回一个html页面(没有数据)</code> ，页面中的 <code>数据渲染则是由页面中的ajax完成</code> ， <code>ajax再次向服务器发出请求数据的请求</code> ，然后 <code>对页面进行渲染</code></p>\n<p>简单理解即浏览器发送页面请求，服务器返回的是一个模板页面，浏览器从上至下解析过程中需要发送 ajax 请求获取数据，最后再调用模板引擎 (art-template 等) 渲染 HTML 结构，并把渲染后的结果添加到页面指定容器中。</p>\n</li>\n<li>\n<p>服务端渲染 (SSR:server side rendering): 用户通过地址栏或者链接进入一个服务器所监听的服务器的路径，服务器则根据 <code>该路径返回一个页面(有数据)</code> ，页面的数据渲染在服务器内由服务器完成， <code>客户端只需要发送一次请求</code> ， <code>不用ajax</code></p>\n<p>以 Node 为例，就是服务器根据请求 <code>req.url</code>  读取对应 html 页面，将其转为字符串，再利用模板引擎将从数据库读取到数据渲染到页面中的某个结构中，再将这个字符串用 <code>res.end()</code>  发送出去</p>\n</li>\n<li>\n<p>如何区分两者？</p>\n</li>\n</ul>\n<p>服务端渲染的页面数据可以通过浏览器审查元素看到。而客户端无法看到。</p>\n<br/>\n<ul>\n<li>两者本质的区别？</li>\n</ul>\n<p>客户端渲染和服务器端渲染的最重要的区别就是究竟是谁来完成 html 文件的完整拼接，如果是在服务器端完成的，然后返回给客户端，就是服务器端渲染，而如果是前端做了更多的工作完成了 html 的拼接，则就是客户端渲染。</p>\n<br/>\n<ul>\n<li>服务器端渲染的优缺点是？</li>\n</ul>\n<p>优点:</p>\n<ol>\n<li>前端耗时少。因为后端拼接完了 html，浏览器只需要直接渲染出来。</li>\n<li>有利于 SEO。因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息，更有利于 SEO。</li>\n<li>无需占用客户端资源。即解析模板的工作完全交由后端来做，客户端只要解析标准的 html 页面即可，这样对于客户端的资源占用更少，尤其是移动端，也可以更省电。</li>\n<li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，则对于前端复杂度高的项目，不利于项目高效开发。另外，如果是服务器端渲染，则前端一般就是写一个静态 html 文件，然后后端再修改为模板，这样是非常低效的，并且还常常需要前后端共同完成修改的动作； 或者是前端直接完成 html 模板，然后交由后端。另外，如果后端改了模板，前端还需要根据改动的模板再调节 css，这样使得前后端联调的时间增加。</li>\n<li>占用服务器端资源。即服务器端完成 html 模板的解析，如果请求较多，会对服务器造成一定的访问压力。而如果使用前端渲染，就是把这些解析的压力分摊了前端，而这里确实完全交给了一个服务器。</li>\n</ol>\n<br/>\n<ul>\n<li>客户端渲染的优缺点是？</li>\n</ul>\n<p>优点:</p>\n<ol>\n<li>前后端分离。前端专注于前端 UI，后端专注于 api 开发，且前端有更多的选择性，而不需要遵循后端特定的模板。</li>\n<li>体验更好。比如，我们将网站做成 SPA 或者部分内容做成 SPA，这样，尤其是移动端，可以使体验更接近于原生 app。</li>\n</ol>\n<p>缺点:</p>\n<ol>\n<li>前端响应较慢。如果是客户端渲染，前端还要进行拼接字符串的过程，需要耗费额外的时间，不如服务器端渲染速度快。</li>\n<li>不利于 SEO。目前比如百度、谷歌的爬虫对于 SPA 都是不认的，只是记录了一个页面，所以 SEO 很差。因为服务器端可能没有保存完整的 html，而是前端通过 js 进行 dom 的拼接，那么爬虫无法爬取信息。 除非搜索引擎的 seo 可以增加对于 JavaScript 的爬取能力，这才能保证 seo。</li>\n</ol>\n<h3 id=\"replread-eval-print-loop\"><a class=\"卓越科技-\" href=\"#replread-eval-print-loop\">#</a> REPL(read eval print loop)</h3>\n<blockquote>\n<p>代表一个快速的检测 API 的方法</p>\n</blockquote>\n<p>在命令行中输入 node，回车就可以直接执行 js 代码进行一些 node 的 api 的测试</p>\n<h3 id=\"express框架的使用\"><a class=\"卓越科技-\" href=\"#express框架的使用\">#</a> Express 框架的使用</h3>\n<blockquote>\n<p>Express 是一个简洁而灵活的 node.js Web 应用框架，提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br />\n使用 Express 可以快速地搭建一个完整功能的网站。</p>\n</blockquote>\n<ol>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save express</pre></td></tr></table></figure></li>\n<li>\n<p>加载包</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建服务器</p>\n<p><code>var 变量 = express() </code></p>\n<p>相当于 <code>var server = http.createServer()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>两种路由</p>\n<ul>\n<li>\n<p>接收 get 方式</p>\n<p><code>app.get(path,function(req,res)&#123;&#125;)</code></p>\n<p>当服务器收到 get 请求路径 <code>path(第一个参数)</code>  的时候，触发事件 相当于 <code>server.on('request',function(req,res))</code>  以及其中地址判断的封装</p>\n<p>第一个参数可以是具体的路径、路径模式、正则表达式的路径模式、以及这三者集合起来的数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello express!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：使用 <code>res.send</code>  发送会自动解码不需要设置响应头，可以通过 <code>req.query</code>  属性快速获取 get 方式提交的参数</p>\n</li>\n<li>\n<p>接收 post 方式</p>\n<p><code>app.post(path,function(req,res)&#123;&#125;)</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>监听</p>\n<p><code>app.listen(端口号，function()&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app is running at port 3000.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"express的中间件概念\"><a class=\"卓越科技-\" href=\"#express的中间件概念\">#</a> express 的中间件概念</h4>\n<p>中间件就是 http 请求和服务器响应之间对请求的处理函数，通过中间件，可以对数据进行操作使得我们能方便地操作请求数据编写服务器响应。如 <code>body-parse中间件</code> 对 post 请求的参数进行处理让我们可以通过 <code>res.body</code>  快速获取请求参数， <code>express-session</code>  中间件可以让我们对数据进行保存， <code>express.static是express内置中间件</code> ，可以让我们快速处理静态资源， <code>express.Router路由中间件</code> 等等</p>\n<p>Express 中，对中间进行了几种分类:</p>\n<ol>\n<li>不关心请求路径和请求方法的中间件，通过 <code>app.use</code>  函数实现</li>\n</ol>\n<p><code>app.use(function(req,res,next)&#123;&#125;)</code></p>\n<p>客户端发起的任意请求都会经过这个中间件函数进行处理</p>\n<p>next 指下一个满足路径条件的中间件，如果有执行 next，那么这个 <code>中间件执行完后就会执行下一个满足条件的中间件</code> ， <code>如果没有next，就会忽略后面所有中间件</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 满足所有、执行下一个满足条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/b'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 输入 /b 路径 结果为 1  bb</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>关心请求路径的中间件，通过 app.use 函数实现</p>\n<p><code>app.use(路径，function(req,res,next)&#123;&#125;)</code></p>\n<p>客户端发起的以第一个参数开头的路径才会进入该中间件</p>\n</li>\n<li>\n<p>严格匹配路径的中间件，通过 <code>app.get/app.post</code>  等实现</p>\n</li>\n</ol>\n<p><code>中间件的执行机制</code></p>\n<ol>\n<li>\n<p>中间件的第一次执行是同步的，当一个请求发出到达服务器后，则按照顺序匹配所有中间件，当找到一个匹配时，则进入该中间件</p>\n</li>\n<li>\n<p>如果该中间件最后没有执行 next 函数，则该请求在此中间件终止，如果有，则会直接进入后面匹配的中间件中 (不是按顺序！)</p>\n</li>\n<li>\n<p>重复 1-2 步</p>\n</li>\n</ol>\n<p>所以，对于一些封装请求数据方便我们操作以及处理静态资源的中间件我们应该放在路由之前编写，否则在编写路由时就无法使用封装好的数据。而对于 404 页面应该放在所有中间件后面，这样无法找到的页面则会返回 404 页面</p>\n<p><code>中间件日志</code></p>\n<p>通过无路径中间件来写入每一次 http 请求到日志中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请求方法:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>method<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,请求URL:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,请求路径:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>path<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,请求时间:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./log.txt'</span><span class=\"token punctuation\">,</span>log<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'日志写入失败'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>错误日志中间件</code></p>\n<ol>\n<li>\n<p>利用 <code>try...catch...</code>  捕获路由解析中发生的错误，将其写入错误日志</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>访问日志和错误日志都可以写成单独一个中间件保存到数据库中</p>\n</li>\n<li>\n<p>错误收集统一处理中间件</p>\n<p>中间件回调函数参数如果是四个，第一个就是前面中间件中 next 返回的错误对象</p>\n<p>注意：一定要四个参数 才能正确接收错误对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> error_log <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t错误名:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t错误信息:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t错误堆栈:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t错误时间:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./err_log.txt'</span><span class=\"token punctuation\">,</span>error_log<span class=\"token punctuation\">,</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'500 服务器正忙，请稍后重试'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"express快速处理静态资源使用expressstatic中间件\"><a class=\"卓越科技-\" href=\"#express快速处理静态资源使用expressstatic中间件\">#</a> express 快速处理静态资源 (使用 express.static 中间件)</h4>\n<p><code>express.static(root，[选项])</code> : 该 root 参数指定要从其提供静态资产的根目录。该功能通过 <code>req.url</code>  与提供的 root 目录结合来确定要提供的文件。当找不到文件时，它不会发送 404 响应，而是调用 <code>next()</code>  继续前进到下一个中间件，从而允许堆栈和回退。</p>\n<p><code>express.use(以什么路径开头，express.static(公开的资源的目录))</code></p>\n<p>当以 <code>/public开头</code> 时，去路径 <code>./public/</code>  目录中找对应的资源</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/public'</span><span class=\"token punctuation\">,</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>必须是 <code>/a/public</code>  目录中的资源路径 即以 <code>a代替了public</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/'</span><span class=\"token punctuation\">,</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果没有第一个参数，则可以通过省略 <code>/public</code>  的方式来访问其中资源 即直接输入其中文件路径名就可以访问 不能添加 public</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"express中模板引擎的使用\"><a class=\"卓越科技-\" href=\"#express中模板引擎的使用\">#</a> express 中模板引擎的使用</h4>\n<ol>\n<li>\n<p>安装模块</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save art-template </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save express-art-template</pre></td></tr></table></figure></li>\n<li>\n<p>配置 (配置该选项之后 <code>res.render</code>  方法就可以用了)</p>\n<p><code>server.engine(ext，回调)</code> : 将给定的模板引擎注册 callback 为 ext。</p>\n<p><code>server.engine(模板文件后缀名，加载express-art--template包)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-art-template'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>渲染</p>\n<p><code>res.render('模板名',数据对象)</code> : 渲染模板并发送</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>comments<span class=\"token operator\">:</span>comments<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：第一个参数不能写路径 应该直接写文件名 默认会去项目中的 views 目录中查找 文件名必须以配置时第一个参数为后缀</p>\n</li>\n</ol>\n<h4 id=\"express中的重定向\"><a class=\"卓越科技-\" href=\"#express中的重定向\">#</a> express 中的重定向</h4>\n<p><code>res.redirect(路径)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pinglun'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>dateTime <span class=\"token operator\">=</span> <span class=\"token string\">'2019-10-29'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    comments<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"express中的发送文件\"><a class=\"卓越科技-\" href=\"#express中的发送文件\">#</a> express 中的发送文件</h4>\n<p><code>res.sendFile(absolutePath)</code> : 路径必须为绝对路径</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendfile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public/index1.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 等同于效果</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index1.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 第三种写法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tres<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index1.html'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> root<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../public'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"express中读取post主体reqquery只能获取get方式的数据\"><a class=\"卓越科技-\" href=\"#express中读取post主体reqquery只能获取get方式的数据\">#</a> express 中读取 post 主体 (req.query 只能获取 get 方式的数据)</h4>\n<ol>\n<li>\n<p>安装</p>\n<p>下载 <code>body-parser</code>  中间件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> body-parser</pre></td></tr></table></figure></li>\n<li>\n<p>加载</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> bodyparser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置</p>\n<p>接收两种格式的数据</p>\n<p><code>app.use(bodyparser.urlencoded())</code></p>\n<p><code>app.use(bodyparser.json())</code></p>\n</li>\n<li>\n<p>使用</p>\n<p>在路由中用 res 的属性 body 获取即可 (返回对象)</p>\n<p><code>res.body</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pinglun'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"express中的router中间件\"><a class=\"卓越科技-\" href=\"#express中的router中间件\">#</a> express 中的 router 中间件</h4>\n<p>在 express 中可以通过 express 最高级对象的 <code>Router方法</code> 生成一个 router 对象，router 对象是一个隔离的中间价，不属于任何 http 对象，可以对其进行路由配置 (get/post 等)。可以通过 <code>app.use(router对象)</code>  将其作为一个应用赋予 http 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/students/new'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该特性可以让我们进行模块化开发，将入口文件和路由文件分开，路由文件将创建好的 router 对象通过 exports.module 导出，入口文件加载路有文件获取并使用 use 函数即可</p>\n<h4 id=\"express中的session中间件\"><a class=\"卓越科技-\" href=\"#express中的session中间件\">#</a> express 中的 session 中间件</h4>\n<p>session 就是会话 **，<strong>会话是一个比连接粒度更大的概念</strong>，** 一次会话可能包含多次连接，每次连接都被认为是会话的一次操作。</p>\n<p>session 的技术实现上：会对每一次对话产生一个唯一的标识 id 进行标识。将数据存在该 id 下就可以实现状态的保存</p>\n<p>session 生命周期：当用户在 Web 页面之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去，如果会话关掉 (客户端关掉)，那么就消失</p>\n<p>当用户请求来自应用程序的 Web 页面时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。在 Exrpess 中，默认不支持 Session 和 Cookie，可以使用第三方中间件: express-session 来解决</p>\n<p>步骤:</p>\n<ol>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> express-session</pre></td></tr></table></figure></li>\n<li>\n<p>配置 一定要在 app.use (router) 之前</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    secret<span class=\"token operator\">:</span><span class=\"token string\">'keyboard cat'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置加密字符串，会在原有加密基础上和这个字符串拼接起来加密，增加安全性 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    resave<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    saveUninitialized<span class=\"token operator\">:</span><span class=\"token boolean\">true</span> <span class=\"token comment\">// 无论是否使用 session 都默认给客户端一把钥匙</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用</p>\n<p>可以通过 <code>req.session</code>  来访问和设置 Session 数据</p>\n<p>添加 Session 数据: <code>req.session.foo = 'bar'</code></p>\n<p>访问 Session 数据: <code>req.session.foo</code></p>\n</li>\n</ol>\n<h3 id=\"插件说明\"><a class=\"卓越科技-\" href=\"#插件说明\">#</a> 插件说明</h3>\n<blockquote>\n<p>Nodemon 插件：可以自动重启服务器，不用每次修改 js 后手动重启</p>\n</blockquote>\n<p>安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev nodemon</pre></td></tr></table></figure><p>使用:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nodemon 文件.js</pre></td></tr></table></figure><h3 id=\"node中使用mongodb数据库\"><a class=\"卓越科技-\" href=\"#node中使用mongodb数据库\">#</a> Node 中使用 MongoDB 数据库</h3>\n<blockquote>\n<p>可以使用官方的 mongdb 包来操作，也可以使用第三方 mongoose 包</p>\n</blockquote>\n<h4 id=\"mongodb的数据结构\"><a class=\"卓越科技-\" href=\"#mongodb的数据结构\">#</a> MongoDB 的数据结构</h4>\n<p>可以如下面理解:</p>\n<pre><code>一个数据库test:&#123;\n\n\ttest里的一个集合:cat&#123;\n\n\t\tcat集合里的一条文档:&#123;name: 'Zildjian'&#125;;\n\n\t&#125;\n\n&#125;\n</code></pre>\n<p>下面以 mongoose 为例</p>\n<h4 id=\"创建集合\"><a class=\"卓越科技-\" href=\"#创建集合\">#</a> 创建集合</h4>\n<ol>\n<li>\n<p>加载包</p>\n<p><code>变量名 = require('mongoose');</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>连接到一个数据库</p>\n<p><code>mongoose.connect(mongodb://域名/数据库名)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://localhost/zykj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设计集合结构</p>\n<ul>\n<li>\n<p>获取一个 Schema 构造函数用以创建结构对象</p>\n<p><code>变量名 = mongoose.Schema</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>构造结构</p>\n<p><code>var 结构名 = new Schema(文档结构)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> blogSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> author<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span>String <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>即创建了一个名为 blogSchema 的文档结构</p>\n</li>\n</ul>\n</li>\n<li>\n<p>发布模型 (创建一个集合对象)</p>\n<p><code>mongoose.model</code> : 将一个架构发布为 model 也就是创建了一个集合， <code>第一个参数为集合的名字</code> ， <code>第二个参数为这个新建集合存储的文档的格式(大写会转为小写，在后面会加s) 返回一个构造函数</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> User <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span>blogSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>返回一个构造函数用以创建新文档，此时数据库中已有名为 users 的集合，该集合的文档结构就是 blogSchema 的对象的结构，但还没有数据</p>\n</li>\n</ol>\n<h4 id=\"数据操作\"><a class=\"卓越科技-\" href=\"#数据操作\">#</a> 数据操作</h4>\n<ol>\n<li>\n<p>新增数据</p>\n<p>new 创建一个模型的实例对象即可，数据结构按照设置好的 Schema 模板来</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> art1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span><span class=\"token string\">'how to kill you'</span><span class=\"token punctuation\">,</span> author<span class=\"token operator\">:</span><span class=\"token string\">'bruce chen'</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span><span class=\"token string\">'just use fucking pencil!'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>持久化存储：将创建好的 User 对象调用 <code>save</code>  方法即可 可传入回调函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>art1<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'保存成功!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询数据</p>\n<ul>\n<li>\n<p>查询全部</p>\n<p>调用模型对象的 <code>find</code>  方法：参数为回调函数，函数的参数 <code>第一个是错误对象</code> ， <code>第二个查询结果</code>  结果都包裹在数组中</p>\n<p><code>User.find(function(err,data)&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>按条件查询</p>\n<p>依旧是 find 方法: <code>第一个参数是数组形式的查询条件</code> ， <code>第二个为查询完成后的回调函数,返回数组形式</code> ，返回多个符合条件的文档</p>\n<p><code>User.find(&#123;条件&#125;,function(err,data)&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>author<span class=\"token operator\">:</span><span class=\"token string\">'bruce huang'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>查找符合条件的第一个</p>\n<p><code>findOne方法</code> ：按照条件查找第一个符合条件的文档  返回对象形式</p>\n<p><code>User.findOne(&#123;条件&#125;,function(err,data)&#123;&#125;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>author<span class=\"token operator\">:</span><span class=\"token string\">'bruce huang'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：用 find 方法查找数据时，即使数据为空，也会返回一个空数组，所以判定应当判定长度而不是变量</p>\n</li>\n</ul>\n</li>\n<li>\n<p>删除数据</p>\n<p>利用模型的 remove 方法</p>\n<p><code>User.remove(条件,回调函数(错误对象，返回结果))</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>author<span class=\"token operator\">:</span><span class=\"token string\">'bruce huang'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>更改数据</p>\n<p>利用模型对象的</p>\n<p><code>User.findByIdAndUpdate(id值，修改的值(对象形式),回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">findByIdAndUpdate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5dc5583de916d516a8577746'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'body'</span><span class=\"token operator\">:</span><span class=\"token string\">'not pencil'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：当用数据库读取到的_id 数据渲染页面时，页面中应该写成 id，不要写_id</p>\n</li>\n<li>\n<p>分段读取数据</p>\n<p><code>mongoose.find().skip(n).limit(n).exec((err,data) =&gt; &#123;&#125;)</code></p>\n<ul>\n<li>\n<p><code>skip(n)</code> : 代表跳过 n 条数据</p>\n</li>\n<li>\n<p><code>limit(n)</code> : 代表只读取 n 条数据</p>\n</li>\n<li>\n<p>exec 回调函数的第二个参数 data 代表读取到的内容</p>\n</li>\n</ul>\n<p>一般用于页面分页的处理，可以配合 <code>twb-pagination</code>  使用</p>\n</li>\n</ol>\n<h4 id=\"关于异步编程回调地狱-promise\"><a class=\"卓越科技-\" href=\"#关于异步编程回调地狱-promise\">#</a> 关于异步编程 (回调地狱、promise)</h4>\n<blockquote>\n<p>什么是回调地狱？</p>\n<p>当有多个异步事件时，其输出结果顺序是不定的，一般取决于文件大小。如下面代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// return </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/b.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// return </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所以为了让事件按照我们想要的顺序生成结果，我们可以将后执行的事件嵌入先执行的事件的回调函数里，如下面代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/c.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// return </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/b.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// return </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>但是如果事件太多，那么代码就会太冗长，难以维护，形成了回调地狱</p>\n<p>解决这个问题，我们可以使用 ES6 新增语法 <code>Promise</code></p>\n<h3 id=\"表单的同步提交默认和异步提交ajax\"><a class=\"卓越科技-\" href=\"#表单的同步提交默认和异步提交ajax\">#</a> 表单的同步提交 (默认) 和异步提交 (ajax)</h3>\n<p>表单具有默认的提交行为，默认是同步的，同步表单提交，浏览器会锁死 (转圈儿) 等待服务端的响应结果。表单的同步提交之后，无论服务端响应的是什么，都会直接把响应的结果覆盖掉当前页面。</p>\n<p>后来有人想到了一种办法，来解决这个问题。即提交表达后在服务器重定位到相同的页面，通过模板引擎将要提示的信息渲染到页面上 (现在仍有网站使用这种方式)</p>\n<p>再后来出现了 ajax，实现不用刷新页面也能获取服务器发送的数据的效果</p>\n<h3 id=\"node中babel转码器的部署\"><a class=\"卓越科技-\" href=\"#node中babel转码器的部署\">#</a> Node 中 Babel 转码器的部署</h3>\n<p>虽然现在浏览器对 ES6 的支持性普遍很好，但是考虑到一些旧版浏览器用户以及我们可能会想通过 es6 模块语法实现模块化开发，所以我们需要 babel 转码器将我们写的 es6 代码转为浏览器普遍支持的代码以便于开发和上线</p>\n<h4 id=\"部署babel的第一步\"><a class=\"卓越科技-\" href=\"#部署babel的第一步\">#</a> 部署 Babel 的第一步</h4>\n<p>Babel 的配置文件是 <code>.babelrc</code> ，存放在项目的根目录下。使用 Babel 的第一步，就是配置这个文件。</p>\n<p>该文件用来设置转码规则和插件，基本格式如下:</p>\n<pre><code>&#123;    \n    &quot;present&quot;:[    \n        &quot;@babel/env&quot;,     \n        &quot;@babel/preset-react&quot;  \n    ],   \n    &quot;plugins&quot;:[]\n&#125;\n</code></pre>\n<p>其中 <code>present字段</code> 设定转码规则，可以通过以下代码下载转码规则:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 最新转码规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/preset-env </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## react 转码规则 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/preset-react</pre></td></tr></table></figure><p><code>dev的含义</code> ：代表这个包是开发临时使用，保存到  <code>package.json</code>  文件中的  <code>devDependencies</code>  选项中。</p>\n<p>注意:  <code>.babelrc</code>  文件的配置必不可少</p>\n<h4 id=\"babelregitser模块\"><a class=\"卓越科技-\" href=\"#babelregitser模块\">#</a> @babel/regitser 模块</h4>\n<p>开发的过程中，需要不断的调试，为了方便，我们需要能实时转码的工具，即每次调用都不需要一个文件一个文件的转码，可以用 <code>@babel/regitser</code>  模块</p>\n<p>使用方法:</p>\n<ol>\n<li>\n<p>先安装该模块</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/register</pre></td></tr></table></figure></li>\n<li>\n<p>设立一个入口文件，该文件用于载入 <code>babel/register</code>  模块并将其中 require 的 js 文件进行实时转码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// index.js </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/register'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./es6.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：必须 <code>先引入模块</code> 再 <code>引入要实时转码的文件</code></p>\n</li>\n<li>\n<p>每当调试时，运行该入口文件即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node index.js</pre></td></tr></table></figure><p>注意：该模块只用适合在开发环境使用，用于开发调试时将源代码转换。因为是实时的，如果用于上线后，会影响网站性能</p>\n</li>\n</ol>\n<h4 id=\"babelcli\"><a class=\"卓越科技-\" href=\"#babelcli\">#</a> @babel/cli</h4>\n<p>当完成开发后，我们需要将写好的代码完全转码成新的文件用于线上环境， <code>babel/cli</code>  工具可以帮助完成。</p>\n<p>这个模块用于命令行中转码使用，可以 <code>将js文件代码转码输出到命令行中</code> 也可以 <code>转码输出到新的文件里</code> ，还可以 <code>转码整个目录的文件到另一个目录</code></p>\n<p>使用方法:</p>\n<ol>\n<li>\n<p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/cli</pre></td></tr></table></figure></li>\n<li>\n<p>使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 转码结果输出到标准输出 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npx babel example.js </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## 转码结果写入一个文件 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## --out-file 或 -o 参数指定输出文件 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>npx babel example.js --out-file compiled.js </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">## 或者 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>npx babel example.js -o compiled.js </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">## 整个目录转码 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">## --out-dir 或 -d 参数指定输出目录 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>npx babel src --out-dir lib </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">## 或者 </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>npx babel src -d lib</pre></td></tr></table></figure><p>所以可以使用 <code>babel src -d lib</code>  将 src 目录下的代码转码生成同名文件并放到 lib 文件夹中。</p>\n<p>注意: src 是我们开发时写的代码，有 es6 语法。lib 是上线时使用的代码，无 es6 语法</p>\n</li>\n</ol>\n<h4 id=\"packagejson文件中script字段用法\"><a class=\"卓越科技-\" href=\"#packagejson文件中script字段用法\">#</a> packagejson 文件中 script 字段用法</h4>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-demo\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel demo1.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node main.js\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">\"prestart\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build\"</span><span class=\"token punctuation\">,</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node dist/app.js\"</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token property\">\"babel-cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.22.2\"</span><span class=\"token punctuation\">,</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token property\">\"babel-preset-es2015\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.22.0\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">\"babel-preset-react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.22.0\"</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>script字段</code> 用于设置快捷命令执行，即可以通过指定的新命令来执行某些命令</p>\n<pre><code>script:&#123;   \n\t命令名: &quot;被代替的命令&quot;\n&#125;\n</code></pre>\n<p>命令名可以随意起 ( <code>除了start和prestart</code> )，执行方式为 <code>npm run 命令名</code></p>\n<p>比如可以将调试时执行入口函数的命令其名为 'dev'</p>\n<pre><code>&quot;build&quot;: &quot;babel demo1.js&quot;，\n</code></pre>\n<p><code>start命令</code> 用于执行上线时所使用的入口函数， <code>prestart的命令</code> 会在执行 start 前自动执行，所以可以用来执行 <code>babel/cli</code>  工具先将源代码转为上线时所用代码</p>\n<pre><code>&quot;prestart&quot;: &quot;babel src -d dist&quot;,   \n&quot;start&quot;: &quot;node dist/app.js&quot;\n</code></pre>\n<p>所以只要将 <code>babel/cli</code>  安装在项目中并且 <code>babel src -d lib</code>  写入 <code>script的prestart字段</code> 就可以保证每次执行 <code>npm run start</code>  前都会被转码</p>\n<h3 id=\"项目的模块化\"><a class=\"卓越科技-\" href=\"#项目的模块化\">#</a> 项目的模块化</h3>\n<ol>\n<li>\n<p><code>dist文件</code> ：用于存放转码后的源代码，用于上线</p>\n</li>\n<li>\n<p><code>src文件</code> ：用于存放开发过程中的源代码，一般还可以根据不同业务分为不同的文件夹，如路由文件夹、中间件文件夹、数据处理函数文件夹、数据库模型文件夹</p>\n</li>\n<li>\n<p><code>views文件夹</code> ：用于存放页面文件，根据页面不同分成多个子文件夹</p>\n</li>\n<li>\n<p><code>public文件夹</code> ：存放公共文件的文件夹，比如图片、css 文件、js 文件等</p>\n</li>\n</ol>\n<h3 id=\"nvm\"><a class=\"卓越科技-\" href=\"#nvm\">#</a> NVM</h3>\n<blockquote>\n<p>(Node Version Management) node 版本管理工具</p>\n</blockquote>\n<ul>\n<li>\n<p><code>nvm list</code> : 查看所有已安装的 node 版本</p>\n</li>\n<li>\n<p><code>nvm install 版本号</code> ：安装指定版本的 node</p>\n</li>\n<li>\n<p><code>nvm use 版本号</code> ：切换到指定版本号</p>\n</li>\n<li>\n<p><code>nvm proxy 代理地址</code> ：配置代理进行下载</p>\n</li>\n</ul>\n",
            "tags": [
                "Web教程",
                "前端",
                "Nodejs"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/c747b178/",
            "url": "https://shoka.zykjofficial.top/posts/c747b178/",
            "title": "AJAX学习",
            "date_published": "2020-07-04T13:16:11.000Z",
            "content_html": "<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。</p>\n</div>\n<h2 id=\"ajax学习\"><a class=\"卓越科技-\" href=\"#ajax学习\">#</a> AJAX 学习</h2>\n<h3 id=\"ajaxasynchronous-javascript-and-xml\"><a class=\"卓越科技-\" href=\"#ajaxasynchronous-javascript-and-xml\">#</a> Ajax(asynchronous javascript and xml)</h3>\n<div class=\"note danger\">\n<p>Ajax描述了一种主要使用脚本操纵HTTP的Web应用架构，主要特点是使用脚本操纵HTTP和Web服务器进行数据交换，不会导致页面重载</p>\n</div>\n<h4 id=\"http协议\"><a class=\"卓越科技-\" href=\"#http协议\">#</a> HTTP 协议</h4>\n<p>HTTP 协议 (HyperText Transfer Protocal): 规定 Web 浏览器如何从 Web 服务器获取文档和向 Web 服务器提交表单内容，以及 Web 服务器如何响应这些请求和提交</p>\n<p>分为 <code>请求报文</code> 和 <code>响应报文</code></p>\n<p>请求报文包括:</p>\n<ol>\n<li>\n<p>请求行</p>\n<ul>\n<li>HTTP 请求的方法 (GET 或 POST)</li>\n<li>正在请求的 URL</li>\n</ul>\n</li>\n<li>\n<p>请求头 (可选，包含身份验证信息等)</p>\n</li>\n<li>\n<p>请求主体 (可选，GET 方式没有请求主体)</p>\n</li>\n</ol>\n<p>响应报文包括:</p>\n<ol>\n<li>\n<p>状态行 (由文字和数字组成的状态码，用来显示请求的成功和失败。常见的有 200 OK、404 NOT FOUND、304 MODIFIED)</p>\n</li>\n<li>\n<p>响应头集合</p>\n</li>\n<li>\n<p>响应主体</p>\n</li>\n</ol>\n<h4 id=\"xmlhttprequest的使用\"><a class=\"卓越科技-\" href=\"#xmlhttprequest的使用\">#</a> XMLHttpRequest 的使用</h4>\n<blockquote>\n<p>浏览器在 XMLHttpRequest 类上定义了他们的 HTTP API。这个类的每个实例都表示一个独立的请求 / 响应对，并且这个对象的属性和方法允许指定请求细节和提取响应数据</p>\n</blockquote>\n<h5 id=\"使用基本步骤\"><a class=\"卓越科技-\" href=\"#使用基本步骤\">#</a> 使用基本步骤</h5>\n<p><code>GET方式</code>  (适用于 URL 完全指定请求资源且请求对服务器没有任何服务器作用以及服务器的响应是可缓存时):</p>\n<ol>\n<li>\n<p>实例化 XMLHttpRequest 对象</p>\n<p><code>var 变量名 = new XMLHttpRequest()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置请求行 (设置请求方式和请求 url，如果有数据则以  <code>?key=value</code>  形式添加在 URL 后面)</p>\n<p><code>XHR对象.open('GET'，请求URL)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xxx.html?name=bruce'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置请求头 (GET 方式一般不用写)</p>\n<p><code>XHR对象.setRequestHeader(键名，键值)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heima'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>向服务器发送 (GET 方式没有请求主题)</p>\n<p><code>XHR对象.send(null或者省略)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>POST方式</code>  (在请求主体中常包含额外数据且这些数据常存储到服务器上的数据库中):</p>\n<ol>\n<li>\n<p>实例化 XMLHttpRequest 对象</p>\n<p><code>var 变量名 = new XMLHttpRequest()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置请求行 (设置请求方式和请求 url)</p>\n<p><code>XHR对象.open(提交方式，请求URL)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xxx.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置请求头 (POST 一定要写下面的请求头)</p>\n<p><code>XHR对象.setRequestHeader(键名，键值)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该请求头的作用是让数据仿效表单提交</p>\n</li>\n<li>\n<p>向服务器发送 (post 一般有发送主体，数据作为 send 函数参数发送)</p>\n<p><code>XHR对象.send('key1=value&amp;key2=value')</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name=jl&amp;friend=avgs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>注意:</p>\n<ol>\n<li>\n<p>open 中的 url 参数必须是相对于当前文档的 url，否则跨域会报错，除非服务器明确允许跨域请求</p>\n</li>\n<li>\n<p>HTTP 请求各部分有指定顺序：请求方法和 url 首先到达，然后是请求头，然后是请求主体，调用 XMLHttpRequest 的方法必须匹配 HTTP 请求的架构，比如 setRequestHeader 必须在 open 后 send 前</p>\n</li>\n<li>\n<p>open 可以设置第三个参数为 false (默认为 true) 实现同步处理 HTTP 响应</p>\n</li>\n</ol>\n<h5 id=\"服务器接收响应\"><a class=\"卓越科技-\" href=\"#服务器接收响应\">#</a> 服务器接收响应</h5>\n<p><code>不同服务器的代码不同、自行百度</code></p>\n<p>注意:</p>\n<ol>\n<li>\n<p>使用该对象必须在服务器中测试，即对 url 的访问必须经过服务器。XMLHttpRequest 用于同 http 和 https 协议一起工作，</p>\n</li>\n<li>\n<p>发送请求等待服务器响应时是不阻塞的</p>\n</li>\n<li>\n<p>服务器的正确解码是假设服务器为这个响应发送了 &quot;Content-Type&quot; 头和正确的 MIME 类型用以告诉浏览器数据应解析为的类型。如下表</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>响应数据格式</th>\n<th>应声明的头部</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>text</code></td>\n<td><code>header(Content-type: text/plain；charset=utf-8)</code>  可不写</td>\n</tr>\n<tr>\n<td><code>XML</code></td>\n<td><code>header(Content-type: text/xml；charset=utf-8)</code>  必写</td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td><code>header(Content-type: appliation/json；charset=utf-8)</code>  可不写</td>\n</tr>\n<tr>\n<td><code>html</code></td>\n<td><code>header(Content-type:text/html;charset=utf-8)</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"客户端获取响应数据一般用在xhr对象异步处理程序内\"><a class=\"卓越科技-\" href=\"#客户端获取响应数据一般用在xhr对象异步处理程序内\">#</a> 客户端获取响应数据 (一般用在 XHR 对象异步处理程序内)</h5>\n<ul>\n<li>\n<p>字符串形式数据</p>\n<p><code>responseText可以得到响应主体的文本形式</code></p>\n</li>\n<li>\n<p>XML 形式数据 (少用，了解即可)</p>\n<p><code>responseXML获得Document形式，可以利用选择器获取其中元素的内容</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> xhr<span class=\"token punctuation\">.</span>responseXML<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>JSON 形式数据 (就是将对象等复杂数组用字符串作为载体传递 其中的所有要解析的键名键值都要用引号包裹 **，除非键值是数字，最常用的数据格式)</p>\n</li>\n</ul>\n<p><code>JSON的特点:</code></p>\n<ol>\n<li>\n<p>JSON 是一种数据的格式</p>\n</li>\n<li>\n<p>JSON 和编程语言没有关系，其载体是字符串，基本上所有的语言都支持字符串</p>\n</li>\n<li>\n<p>语法简洁 所有的编程语言都提供了对应的方法解析 JSON</p>\n</li>\n</ol>\n<p><code>JSON语法</code></p>\n<ul>\n<li>\n<p>JSON 数据格式</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"bruce\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"28\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"skill\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"detective\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：键名键值都要用双引号包裹，整个值用单引号包裹</p>\n</li>\n<li>\n<p>JSON 的转换</p>\n<p><code>JSON.parse(字符串)</code> : 将 json 数据转为对应对象或数组形式</p>\n<p><code>JSON.stringify(数组或对象)</code> : 将对象或数组数据转为 json 格式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> JSONArr <span class=\"token operator\">=</span> <span class=\"token string\">'[\"绿菜花\",\"圣女果\",\"大葱\",\"番茄\"]'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>JSONArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 圣女果 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> JSONArr <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\":\"bruce\",\"skill\":\"kill\",\"friend\":[\"alfred\",\"clark\",\"diana\"]&#125;'</span><span class=\"token punctuation\">;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>JSONArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出字符串 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>JSONArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//clark</span></pre></td></tr></table></figure></li>\n<li>\n<p>JSON 用法</p>\n<ol>\n<li>\n<p>浏览器发出 ajax 请求</p>\n</li>\n<li>\n<p>服务器端获取 ajax 数据 (可以读取 json 文件也可以直接写)</p>\n<p><code>不同服务器的代码不同、自行百度</code></p>\n<p>注意：发送 json 数据的 header 可写可不写，一般还是写</p>\n</li>\n<li>\n<p>浏览器接收数据，转化，渲染</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转化为对应的数据格式 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'姓名:'</span><span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'技能:'</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"skill\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h5 id=\"客户端异步处理http响应\"><a class=\"卓越科技-\" href=\"#客户端异步处理http响应\">#</a> 客户端异步处理 HTTP 响应</h5>\n<ol>\n<li>\n<p>用 onload 函数，当服务器成功接收到文件时，触发 load 事件，调用其中回调函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//responseText 获取响应报文 \t\t\t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 onreadystatechange 函数，当 XHR 对象的 readyState 属性发生变化时就会触发并调用其中回调函数</p>\n<p>readyState 属性返回一个 XHR 对象当前所处的状态，其值主要有:</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td><code>UNSENT</code></td>\n<td>代理被创建，但尚未调用 open () 方法</td>\n</tr>\n<tr>\n<td>1</td>\n<td><code>OPENED</code></td>\n<td><code>open()</code>  方法已经被调用</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>HEADER_RECEIVED</code></td>\n<td><code>send()</code>  方法已经被调用，并且头部和状态已经可获得</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>LOADING</code></td>\n<td>下载中； <code>responseText</code>  属性已经包含部分数据</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code>DONE</code></td>\n<td>下载操作已完成</td>\n</tr>\n</tbody>\n</table>\n<p>一般可以和 status 属性配合使用检测 XHR 对象是否接受到数据。</p>\n<p>statue 属性返回 XHR 对象的响应状态吗。成功一般为 200，找不到上传 url 会返回 404</p>\n<p><code>可以利用以下代码完成更健壮的响应检测</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我触发一次'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"判断响应数据类型\"><a class=\"卓越科技-\" href=\"#判断响应数据类型\">#</a> 判断响应数据类型</h5>\n<p>可以利用 xhr 对象的 <code>getResponseHeader(获取内容)</code>  方法来获取响应头的内容</p>\n<p>检验是否是 json</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\">/json/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>检验是否是 xml</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\">/xml/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jquery中的ajax\"><a class=\"卓越科技-\" href=\"#jquery中的ajax\">#</a> jQuery 中的 Ajax</h3>\n<h4 id=\"jquery的get快捷函数\"><a class=\"卓越科技-\" href=\"#jquery的get快捷函数\">#</a> jquery 的 get 快捷函数</h4>\n<p><code>jQuery.get( url [, data ] [, success ] [, dataType ] )</code></p>\n<p>参数亦可以写成对象形式 <code>jQuery.get(&#123;url:&quot;xxx.html&quot;,data:&quot;key=value&quot;,success:function(x)&#123;alert(x)&#125;&#125;)</code></p>\n<p>参数信息:</p>\n<ul>\n<li>\n<p><code> url</code> : 提交地址</p>\n</li>\n<li>\n<p><code>data:</code>  提交数据，格式可以为键值对字符串也可以是对象形式</p>\n</li>\n<li>\n<p><code>success</code> : 接收到数据后的回调函数，其中的第一个参数就是接收到的数据</p>\n</li>\n<li>\n<p><code>dataType</code> : 从服务器返回的预期的数据类型</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.html\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">\"bruce\"</span><span class=\"token punctuation\">,</span>husband<span class=\"token operator\">:</span><span class=\"token string\">\"diana\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name=rose&amp;husband=jack\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"jquery的post快捷函数\"><a class=\"卓越科技-\" href=\"#jquery的post快捷函数\">#</a> jquery 的 post 快捷函数</h4>\n<p><code>jQuery.post( url [, data ] [, success ] [, dataType ] )</code>  同样的，参数也可以写成对象形式</p>\n<p>参数信息:</p>\n<ul>\n<li>\n<p><code>url</code> : 提交地址</p>\n</li>\n<li>\n<p><code>data</code> : 提交数据，格式可以为键值对字符串也可以是对象形式</p>\n</li>\n<li>\n<p><code>success</code> : 接收到数据后的回调函数，其中的第一个参数就是接收到的数据</p>\n</li>\n<li>\n<p><code>dataType</code> : 从服务器返回的预期的数据类型</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"name=bruce\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"jquery的ajax函数可以自己选择post还是get\"><a class=\"卓越科技-\" href=\"#jquery的ajax函数可以自己选择post还是get\">#</a> jQuery 的 ajax 函数 (可以自己选择 post 还是 get)</h4>\n<p>参数必须以对象形式写</p>\n<p><code>jQuery.ajax(&#123;url:&quot;xxx.html&quot;,type:&quot;get&quot;,data:&quot;name=bruce&quot;,success:function(x)&#123;console.log(x)&#125;&#125;)</code></p>\n<p>参数信息:</p>\n<ul>\n<li>\n<p><code>url</code> : 提交地址</p>\n</li>\n<li>\n<p><code>type</code> : 提交方式</p>\n</li>\n<li>\n<p><code>data</code> : 提交数据，格式可以为键值对字符串也可以是对象形式</p>\n</li>\n<li>\n<p><code>beforesend</code> :ajax 请求发出前执行的函数</p>\n</li>\n<li>\n<p><code>success</code> : 接收到数据后的回调函数，其中的第一个参数就是接收到的数据，，第二个参数是 jQuery 状态码，第三个是 XHR 对象</p>\n</li>\n<li>\n<p><code>error</code> : 当响应发生错误时触发，可以接受三个参数，依次代表发起请求的 xhr 对象，jQuery 状态码，发生错误的位置</p>\n</li>\n<li>\n<p><code>complete</code> : 请求完全完成时触发</p>\n</li>\n<li>\n<p><code>dataType</code> : 可以自己声明接收的数据类型而不需要后台声明，包括 json、xml 等</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    url<span class=\"token operator\">:</span><span class=\"token string\">'json.php'</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token string\">\"bruce\"</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        skill<span class=\"token operator\">:</span><span class=\"token string\">\"kill\"</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//error 属性在请求失败时会触发 \t\t</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">XMLHttpRequest<span class=\"token punctuation\">,</span>textStatus<span class=\"token punctuation\">,</span>errorThrown</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//xhr 对象信息 \t\t</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>XMLHttpRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 错误类型 \t\t\t</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 错误位置 \t\t</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>errorThrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 请求完成时触发 (readyStatus == 4 时触发) \t\t</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function-variable function\">complete</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"jquery的其他ajax相关函数\"><a class=\"卓越科技-\" href=\"#jquery的其他ajax相关函数\">#</a> jQuery 的其他 ajax 相关函数</h4>\n<p><code>$(document).ajaxStart(function()&#123;&#125;)</code></p>\n<p>document 中的任意 ajax 事件触发时便会触发这个事件中，调用其中回调函数， <code>必须绑定在document上</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ajaxStart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cover\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(document).ajaxComplete(function()&#123;&#125;) </code></p>\n<p>document 中的任意 ajax 事件刚完成时便会触发这个事件，调用其中回调函数， <code>必须绑定在document上</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ajaxComplete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".cover\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>附: jQuery 的 Ajax 状态码</p>\n<table>\n<thead>\n<tr>\n<th>success</th>\n<th>请求成功完成</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>notmodified</code></td>\n<td>请求以正常完成，但是 url 内容与上次相同</td>\n</tr>\n<tr>\n<td><code>error</code></td>\n<td>请求没有完成，发生某些 http 错误</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>没有在规定时间内完成</td>\n</tr>\n<tr>\n<td><code>parsererror</code></td>\n<td>请求完成，但无法正常解析数据，比如服务器中的数据格式错误</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"模板和模板引擎的使用\"><a class=\"卓越科技-\" href=\"#模板和模板引擎的使用\">#</a> 模板和模板引擎的使用</h3>\n<p>百度吧</p>\n<h3 id=\"跨域解决方案\"><a class=\"卓越科技-\" href=\"#跨域解决方案\">#</a> 跨域解决方案</h3>\n<ul>\n<li>\n<p><code>同源</code> ：协议、主机、端口都一样就是同源</p>\n</li>\n<li>\n<p><code>不同源</code> ：协议主机端口有一个不一样就是不同源</p>\n</li>\n<li>\n<p><code>跨域</code> ：不同源的网站之间发送请求就是跨域</p>\n</li>\n</ul>\n<h4 id=\"两种跨域解决方案\"><a class=\"卓越科技-\" href=\"#两种跨域解决方案\">#</a> 两种跨域解决方案</h4>\n<ol>\n<li>\n<p>利用 CORS (Cross-Origin Resource Share):</p>\n<p>在后台数据文件中添加头 <code>header(&quot;Acess-Control-Allow-origin:\\*&quot;);</code></p>\n<p>实现条件:</p>\n<ul>\n<li>浏览器支持 CORS</li>\n<li>请求的网站开启 CROS</li>\n</ul>\n<p>缺点: HTML5 才支持</p>\n</li>\n<li>\n<p>利用 JSONP (JSON with Padding)</p>\n<p>只需设置 script 标签的 src 属性</p>\n<p>原理：利用标签 src 属性可以获取跨域资源的原理，在 src 中将函数方法等数据传给服务器，服务器中再采用 JSON 的格式输出，浏览器获得该数据后会自动按照 JS 语法解析，实现对数据的处理</p>\n<p>优点:</p>\n<ul>\n<li>不受同源策略限制</li>\n<li>会自动解码执行包含 JSON 编码数据的响应体</li>\n</ul>\n<p>注意:</p>\n<ol>\n<li>\n<p>src 属性充当了 Ajax，JSONP 与 Ajax 无关，JSONP 只需要一个 src 属性指向请求地址的 script 标签</p>\n</li>\n<li>\n<p>回调函数一般统一叫 callback</p>\n</li>\n<li>\n<p>JSONP 只能发送 get 请求，不能发送 post 请求</p>\n</li>\n<li>\n<p>jQuery 中的 JSONP 的原理是动态创建了 script 标签，其中 src 等于请求地址 +&quot;？&quot;+success 方法</p>\n</li>\n<li>\n<p>img 不用于 JSONP 的原因是 img 的 src 属性能发送数据，但是服务器的响应一直是一张图片导致客户端无法轻易从中提取信息</p>\n</li>\n<li>\n<p>iframe 不用于 JSONP 的原因是其受限于同源策略</p>\n</li>\n<li>\n<p>对于不可信任的服务器，不该使用这项技术</p>\n</li>\n<li>\n<p>响应内容必须用 JS 函数名和圆括号包裹起来</p>\n</li>\n</ol>\n</li>\n<li>\n<p>利用跨域消息传递 (window 对象的 postMessage 方法，HTML5 新增)</p>\n<p>window 对象的 postMessage 方法允许来自非同源的脚本调用，允许有限的通信，通过异步传递的方法。这项技术称为 &quot;跨文档消息传递&quot;</p>\n<p>步骤 (以 open 打开新窗口为例):</p>\n<ol>\n<li>\n<p>弹出一个用于发送信息的窗口</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> w <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://192.168.43.112/anotherWayCrossOrigin/receiver.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在弹出的窗口中，打开这个页面的页面向自己传递数据，达到跨域的效果</p>\n<p><code>Window.postMessage(data,url)</code></p>\n<p><code>data</code> : 任意基本类型或者可以复制的对象，如果想要传递数组或对象可以用 JSON 数据</p>\n<p><code>url</code> : 指定目标窗口的源 (注意是源而不是某个文件，包括协议主机名和端口，除了这些以外的其他参数会被忽略)，会传给指定 url 下的任何页</p>\n<p>如果设置为 <code>*</code> ，则可以传递给任何窗口。如果设定为 /，则只能传给与当前页面同源的文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ha'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hey'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'he'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> window<span class=\"token punctuation\">.</span>opener<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://127.0.0.1//anotherWayCrossOrigin/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在最初页面中，Window 对象调用 message 事件异步处理接收到的信息</p>\n<p>可以利用该事件的事件对象的属性获取数据，其中包括:</p>\n<ul>\n<li><code>e.data</code>  接收到的数据</li>\n<li><code>e.source</code>  数据源自的 Window 对象</li>\n<li><code>e.origin</code>  一个字符串，指定消息来源 (URL 格式)</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [\"ha\", \"hey\", \"he\"] </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Window 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//http://192.168.43.112</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<p><code>原理总结: 让接收信息的页面跑到发送信息的页面向自己发送信息 发送信息的页面必须是接收信息的页面打开的</code></p>\n<p>跨域消息传递可用于解决以下方面的问题:</p>\n<ul>\n<li>iframe 嵌套页面跨域通信</li>\n<li>页面和其打开的新窗口的通信</li>\n<li>多窗口之间消息传递</li>\n</ul>\n<h3 id=\"xmlhttprequest20\"><a class=\"卓越科技-\" href=\"#xmlhttprequest20\">#</a> XMLHttpRequest2.0</h3>\n<h4 id=\"1快速格式化表单数据\"><a class=\"卓越科技-\" href=\"#1快速格式化表单数据\">#</a> 1. 快速格式化表单数据</h4>\n<p>利用 FormData 对象快速格式化 form 表单元素，然后作为发送主体传送</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> sendData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"form\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>sendData<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><h4 id=\"2ajax上传文件\"><a class=\"卓越科技-\" href=\"#2ajax上传文件\">#</a> 2.ajax 上传文件</h4>\n<p>在上面方法基础上在 form 中添加 file 表单即可</p>\n<h4 id=\"3上传进度监控兼容性一般\"><a class=\"卓越科技-\" href=\"#3上传进度监控兼容性一般\">#</a> 3. 上传进度监控 (兼容性一般)</h4>\n<p>利用 xhr 对象 upload 属性的 progress 事件的事件对象监听上传进度</p>\n<p><code>upload</code> : 代表上传过程</p>\n<p><code>e.loaded</code> : 已经上传的数据大小</p>\n<p><code>e.total</code> : 传输完成的数据大小</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>upload<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onprogress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// console.log(e); \t\t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>loaded <span class=\"token operator\">/</span> e<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".step\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>loaded <span class=\"token operator\">/</span> e<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Web教程",
                "前端",
                "AJAX"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/7a95906a/",
            "url": "https://shoka.zykjofficial.top/posts/7a95906a/",
            "title": "jQuery学习",
            "date_published": "2020-05-25T02:30:50.000Z",
            "content_html": "<h2 id=\"jquery学习\"><a class=\"卓越科技-\" href=\"#jquery学习\">#</a> jQuery 学习</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVd6NDExQjdONQ==\">黑马程序员</span></p>\n</div>\n<h3 id=\"jquery\"><a class=\"卓越科技-\" href=\"#jquery\">#</a> jQuery</h3>\n<blockquote>\n<p>即一个快速简洁的 js 库。j 就是 javascript,Q 为 query 查询，把 js 中的 DOM 操作做了封装，可以快速的查询使用里面的功能。(write less,Do More)</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanF1ZXJ5LmNvbQ==\">jQuery 官网</span></p>\n<h4 id=\"javascript库\"><a class=\"卓越科技-\" href=\"#javascript库\">#</a> JavaScript 库</h4>\n<blockquote>\n<p>即 library, 是一个封装好的特定的集合 (方法和函数), 即封装了很多预定义好的函数在里面，比如动画 animate、hide、show、获取元素等</p>\n</blockquote>\n<h3 id=\"记得引入jquery文件\"><a class=\"卓越科技-\" href=\"#记得引入jquery文件\">#</a> 记得引入 jquery 文件！！！</h3>\n<h3 id=\"入口函数\"><a class=\"卓越科技-\" href=\"#入口函数\">#</a> 入口函数</h3>\n<blockquote>\n<p>相当于原生 js 中的 DOMContentLoaded, 不必等外部资源加载完毕才执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//... 页面加载完的入口 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//... 页面加载完的入口 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>注: 一般使用第二种</code></p>\n<h3 id=\"jquery的顶级对象\"><a class=\"卓越科技-\" href=\"#jquery的顶级对象\">#</a> jQuery 的顶级对象 $</h3>\n<blockquote>\n<p>即为 jQuery 的别称，可以互相替代使用，都是 jQuery 中的顶级对象，都可以把获得的元素转为 jQuery 对象，从而使该元素能够使用 jQuery 中的属性方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// $ 就是 jQuery 的别称 可以互相替代 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>注意: 以上二者是等效的,一般用 $</code></p>\n<h3 id=\"jquery对象和dom对象\"><a class=\"卓越科技-\" href=\"#jquery对象和dom对象\">#</a> jQuery 对象和 DOM 对象</h3>\n<blockquote>\n<p>DOM 对象：用原生 js 获取的对象就是 DOM 对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jquery对象\"><a class=\"卓越科技-\" href=\"#jquery对象\">#</a> jQuery 对象</h3>\n<blockquote>\n<p>用 <code>$</code>  或者 jQuery 方法获取的对象就是 jQuery 对象，本质即为获取 DOM 元素再用 <code>$</code>  对其包装为 jQuery 对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> jqdiv <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>jqdiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jquery对象和dom对象的区别\"><a class=\"卓越科技-\" href=\"#jquery对象和dom对象的区别\">#</a> jQuery 对象和 DOM 对象的区别</h3>\n<blockquote>\n<p>DOM 对象只能使用原生 js 中的属性方法，jquery 对象只能使用 jquery 中的方法，二者不能混淆使用</p>\n</blockquote>\n<p>如:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 报错 jQuery 无法使用原生 js 中的 style 属性 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 div 无法使用 jQuery 中的 hide 方法</span></pre></td></tr></table></figure><h4 id=\"jquery对象家和dom对象的转换\"><a class=\"卓越科技-\" href=\"#jquery对象家和dom对象的转换\">#</a> jQuery 对象家和 DOM 对象的转换</h4>\n<ul>\n<li>\n<p>DOM 对象转为 jQuery 对象</p>\n<ol>\n<li>\n<p>直接用 jQuery 获取对象，获得的就是 jquery 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果已经先获取了 DOM 对象，那么</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> mydiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>mydiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>注意：不要加引号，因为 mydiv 已经是 DOM 对象了</p>\n</li>\n<li>\n<p>jQuery 转为 DOM 对象</p>\n<p>因为 jQuery 获取的 DOM 元素都以伪数组形式保存在 jQuery 对象中，所以直接用索引号获取即可</p>\n<p><code>$(元素选择器)[index]</code></p>\n<p><code>$(元素选择器).get(index)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"jquery选择器\"><a class=\"卓越科技-\" href=\"#jquery选择器\">#</a> jQuery 选择器</h3>\n<p><code>$('选择器’)  //其中选择器直接写CSS选择器即可,但是记得加引号!!!</code></p>\n<h4 id=\"常用选择器\"><a class=\"卓越科技-\" href=\"#常用选择器\">#</a> 常用选择器</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ID选择器</code></td>\n<td><code>$(&quot;#id&quot;)</code></td>\n<td>获取指定 ID 的元素</td>\n</tr>\n<tr>\n<td><code>全选选择器</code></td>\n<td><code>$(&quot;*&quot;)</code></td>\n<td>匹配所有元素</td>\n</tr>\n<tr>\n<td><code>类选择器</code></td>\n<td><code>$(&quot;.class&quot;)</code></td>\n<td>获取同一类 class 的元素</td>\n</tr>\n<tr>\n<td><code>标签选择器</code></td>\n<td><code>$(&quot;div&quot;)</code></td>\n<td>获取同一类标签的所有元素</td>\n</tr>\n<tr>\n<td><code>并集选择器</code></td>\n<td><code>$(&quot;div,p,li&quot;)</code></td>\n<td>选取多个元素</td>\n</tr>\n<tr>\n<td><code>交集选择器</code></td>\n<td><code>$(&quot;li.current&quot;)</code></td>\n<td>获取同一类标签的所有元素</td>\n</tr>\n</tbody>\n</table>\n<p><code>以及结构伪类选择器都可以使用 如 $('li:first-child')</code></p>\n<h4 id=\"jquery的层级选择器\"><a class=\"卓越科技-\" href=\"#jquery的层级选择器\">#</a> jQuery 的层级选择器</h4>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>子代选择器</code></td>\n<td><code>$(&quot;ul&gt;li&quot;);</code></td>\n<td>使用 &gt; 号，获取亲儿子层级的元素；注意，并不会获取孙子层级的元素</td>\n</tr>\n<tr>\n<td><code>后代选择器</code></td>\n<td><code>$(&quot;ul li);</code></td>\n<td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"jquery的隐式迭代\"><a class=\"卓越科技-\" href=\"#jquery的隐式迭代\">#</a> jQuery 的隐式迭代</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码的结果是全部 div 都变为粉色</p>\n<div class=\"note info\">\n<p>隐式迭代：就是 jquery 获取元素后会暗中自动对获得的匹配元素伪数组进行遍历操作。如上面 给每个 div 都添加 css 样式，取代了原生 js 中的 for 循环</p>\n</div>\n<p>可以利用伪类结构选择器只对其中一个 div 进行修改而不进行遍历</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div:nth-child(3)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'yellow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"jquery筛选选择器\"><a class=\"卓越科技-\" href=\"#jquery筛选选择器\">#</a> jQuery 筛选选择器</h4>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:first</code></td>\n<td><code>$(&quot;li:first&quot;)</code></td>\n<td>获取第一个 li 元素</td>\n</tr>\n<tr>\n<td><code>:last</code></td>\n<td><code>$(&quot;li:last&quot;)</code></td>\n<td>获取最后一个 li 元素</td>\n</tr>\n<tr>\n<td><code>:eq(index)</code></td>\n<td><code>$(&quot;li:eq(2)&quot;)</code></td>\n<td>获取到的元素中，选择索引号为 2 的元素，索引号 index 从开始。</td>\n</tr>\n<tr>\n<td><code>:odd</code></td>\n<td><code>$(&quot;:odd&quot;)</code></td>\n<td>获取到的元素中，选择索引号为奇数的元素</td>\n</tr>\n<tr>\n<td><code>:even</code></td>\n<td><code>$(&quot;li:even&quot;)</code></td>\n<td>获取到的元素中，选择索引号为偶数的元素</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"jquery筛选方法\"><a class=\"卓越科技-\" href=\"#jquery筛选方法\">#</a> jQuery 筛选方法</h4>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>parent()</code></td>\n<td><code>$(&quot;li&quot;).parent();</code></td>\n<td>查找父级</td>\n</tr>\n<tr>\n<td><code>children(selector)</code></td>\n<td><code>$(&quot;ul&quot;).chilren(&quot;li&quot;)</code></td>\n<td>相当于 $(&quot;ul&gt;li&quot;) , 最近一级 (亲儿子)</td>\n</tr>\n<tr>\n<td><code>find(selector) </code></td>\n<td><code>$(&quot;li&quot;).find(li&quot;);</code></td>\n<td>相当于 $(&quot;ul li&quot;) , 后代选择器</td>\n</tr>\n<tr>\n<td><code>siblings(selector)</code></td>\n<td><code>$(&quot; .first&quot;).siblings(&quot;li&quot;);</code></td>\n<td>查找兄弟节点，不包括自己本身</td>\n</tr>\n<tr>\n<td><code>nextAll([expr])</code></td>\n<td><code>$(&quot; .first&quot;).nextAll()</code></td>\n<td>查找当前元素之后所有的同辈元素</td>\n</tr>\n<tr>\n<td><code>prevtAll([expr])</code></td>\n<td><code>$(&quot; .last&quot;).prevAll()</code></td>\n<td>查找当前元素之前所有的同辈元素</td>\n</tr>\n<tr>\n<td><code>hasClass(class)</code></td>\n<td><code>$('div').hasClass(&quot;protected&quot;)</code></td>\n<td>检查当前的元素是否含有某个特定的类，如果有，返回 true</td>\n</tr>\n<tr>\n<td><code>eq(index)</code></td>\n<td><code>$(&quot;1i&quot;).eq(2);</code></td>\n<td>相当于 $(&quot;li:eq (2)&quot;), index 从 0 开始</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p><code>$('选择器').parent() 获取最近的父级元素</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 寻找 son 的父级元素</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$('选择器').parents(&quot;查找的元素&quot;)  获取指定的祖父级元素</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parents</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;选择器&quot;).children(&quot;查找的元素&quot;) 获取最近一级的子元素 相当于 选择器&gt;查找的元素</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".nav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 寻找 nav 中的亲儿子 p 元素</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;选择器&quot;).find(&quot;查找的元素&quot;) 获取所有目标子元素 相当于 选择器 查找的元素</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".nav\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 寻找 nav 中所有 p 元素</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;选择器&quot;).sibling(&quot;查找的元素&quot;) 获取所有处于同一级的元素(兄弟元素)但不包括自己</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ol .item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">siblings</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;选择器&quot;).eq(index) 获取该对象中的第index个元素 相当于$(&quot;选择器:eq(index)&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取获得的所有 li 中的第 3 个</span></pre></td></tr></table></figure><p>注：一般采用这种写法，因为 index 可以写入变量</p>\n</li>\n</ul>\n<h4 id=\"状态选择器\"><a class=\"卓越科技-\" href=\"#状态选择器\">#</a> 状态选择器</h4>\n<blockquote>\n<p><code>$(&quot;xxx:checked&quot;)</code>   返回 xxx 中被选中的</p>\n</blockquote>\n<h3 id=\"jquery的排他思想\"><a class=\"卓越科技-\" href=\"#jquery的排他思想\">#</a> jQuery 的排他思想</h3>\n<blockquote>\n<p>可以利用 sibling 轻松实现排他思想</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">siblings</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jquery链式编程\"><a class=\"卓越科技-\" href=\"#jquery链式编程\">#</a> jQuery 链式编程</h3>\n<p>即可以对一个对象按顺序进行多个操作</p>\n<p><code>每一个对象执行完操作后下一个对象都是以前一个对象为标准,而不是以第一个</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 即可以对同个操作对象实现多个操作  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">siblings</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jquery修改css样式的方法\"><a class=\"卓越科技-\" href=\"#jquery修改css样式的方法\">#</a> jQuery 修改 css 样式的方法</h3>\n<ol>\n<li>\n<p>利用 css 属性</p>\n<p>如果只写参数，那么则会返回属性值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果只想修改一个属性，那么 $(&quot;目标对象&quot;).css (&quot;属性名&quot;,&quot;属性值&quot;)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果想修改多个属性，那么则以对象方式写入修改的属性和属性值。 <code>$(&quot;目标对象&quot;).css(&#123;&quot;属性名1&quot;:&quot;属性值1&quot;,&quot;属性名2&quot;:&quot;属性值2&quot;,&quot;属性名2&quot;:&quot;属性值2&quot;...&#125;)</code></p>\n<p>其中属性名双引号可加可不加，如果加则属性名按驼峰命名法写，如果不加则不变</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"width\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"height\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"300px\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"backgroundColor\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用类名修改</p>\n<p><code>$(&quot;目标对象&quot;).addClass('class_name') 添加类名</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>$(&quot;目标对象&quot;).removeClass('class_name') 移除类名</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">dblclick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>$(&quot;目标对象&quot;).toggleClass('class_name') 切换类名 无则切换 有则取消</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意: jQuery 中的类操作不会影响原有类名，addClass 相当于追加类名</p>\n<p><code>$(&quot;目标对象&quot;).hasClass('class_name') 检查目标对象是否有某个类名,返回布尔值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fa-play'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    video<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fa-pause'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fa-play'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    video<span class=\"token punctuation\">.</span><span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fa-play'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fa-pause'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"jquery效果\"><a class=\"卓越科技-\" href=\"#jquery效果\">#</a> jQuery 效果</h3>\n<h4 id=\"显示隐藏效果\"><a class=\"卓越科技-\" href=\"#显示隐藏效果\">#</a> 显示隐藏效果</h4>\n<ul>\n<li>\n<p>显示效果</p>\n<p><code>元素.show(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>隐藏效果</p>\n<p><code>元素.hide(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>切换显示 / 隐藏效果 (有则消失，无则切换)</p>\n<p><code>元素.toggle(&quot;显示速度&quot;,回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>          </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：一般情况下不加参数，直接显示隐藏</p>\n</li>\n</ul>\n<h4 id=\"滑动效果\"><a class=\"卓越科技-\" href=\"#滑动效果\">#</a> 滑动效果</h4>\n<ul>\n<li>\n<p>上拉效果</p>\n<p><code>元素.slideUp(&quot;显示速度&quot;,回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>下拉效果</p>\n<p><code>元素.slideDown(&quot;显示速度&quot;,回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>          </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>            </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>切换滑动效果 下拉则上拉 上拉则下拉</p>\n<p><code>元素.slideToggle(&quot;显示速度&quot;,回调函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>         </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"事件切换\"><a class=\"卓越科技-\" href=\"#事件切换\">#</a> 事件切换</h4>\n<p><code>元素.hover(function() &#123;经过元素时触发的事件&#125;, function() 离开元素时触发的事件&#125;);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fatheropi>li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hover</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideUp</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果参数中的函数只写一个，那么经过或者离开该元素都会触发事件 (一般会用 toggle 类事件与其搭配)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fatheropi>li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hover</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"停止正在进行中的动画\"><a class=\"卓越科技-\" href=\"#停止正在进行中的动画\">#</a> 停止正在进行中的动画</h4>\n<p>动画一旦触发就会执行 如果不断触发就会造成排队执行，利用 stop () 可以停止动画的执行，在动画效果中用 stop () 相当于停止上一次还在运行中的动画 利用这个函数可以防止动画排队执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".fatheropi>li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hover</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意: stop 应写在所有有动画的元素之后及其动画之前！！！！！！</p>\n<h4 id=\"淡入淡出效果\"><a class=\"卓越科技-\" href=\"#淡入淡出效果\">#</a> 淡入淡出效果</h4>\n<ul>\n<li>\n<p>淡入效果</p>\n<p><code>元素.fadeIn(&quot;显示速度&quot;,回调函数) //参数可写可不写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>淡出效果</p>\n<p><code>元素.fadeOut(&quot;显示速度&quot;,回调函数)  //参数可写可不写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>淡入淡出切换</p>\n<p><code>元素.fadeToggle(&quot;显示速度&quot;,回调函数) 参数可写可不写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 淡出淡出切换    </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeToggle</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>改变透明度</p>\n<p><code>元素.fadeTo(&quot;显示速度&quot;,最终透明度,回调函数) 前两个参数必写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<p><code>注意: fadeTo和fadeIn、fadeOut不能搭配使用!!!</code></p>\n<h4 id=\"自定义动画效果\"><a class=\"卓越科技-\" href=\"#自定义动画效果\">#</a> 自定义动画效果</h4>\n<p><code>元素名.animate(&#123;样式名1: 样式值,样式名2: 样式值...&#125;,速度,速度曲线,回调函数)</code></p>\n<p>document 不能设置动画！！！！！</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>left<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>top<span class=\"token operator\">:</span><span class=\"token number\">500</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jquery属性操作\"><a class=\"卓越科技-\" href=\"#jquery属性操作\">#</a> jQuery 属性操作</h3>\n<blockquote>\n<p>原有属性的操作 (prop)</p>\n</blockquote>\n<h4 id=\"获取原有属性值\"><a class=\"卓越科技-\" href=\"#获取原有属性值\">#</a> 获取原有属性值</h4>\n<p><code>元素.prop(&quot;属性名&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"修改原有属性值\"><a class=\"卓越科技-\" href=\"#修改原有属性值\">#</a> 修改原有属性值</h4>\n<p><code>元素.prop(&quot;属性名,&quot;属性值&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"shabi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"自定义属性的操作attr\"><a class=\"卓越科技-\" href=\"#自定义属性的操作attr\">#</a> 自定义属性的操作 (attr)</h4>\n<ul>\n<li>\n<p>获取自定义属性值</p>\n<p><code>元素.attr(&quot;属性名&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>修改自定义属性值</p>\n<p><code>元素.attr(&quot;属性名&quot;,&quot;属性值&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"属性数据的缓存data\"><a class=\"卓越科技-\" href=\"#属性数据的缓存data\">#</a> 属性数据的缓存 (data)</h4>\n<ul>\n<li>\n<p>缓存数据</p>\n<p><code>元素名.data(&quot;属性名&quot;,属性值)</code> : 不会给元素添加该属性名，只是保存，以便后面调用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uname\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"andy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>调取数据</p>\n<p><code>元素名.data(&quot;属性名&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uname\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同时还可以获取元素用 data-xx 定义的自定义属性 直接写后面名字即可 不用加 data</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uuu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    11   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<p><code>注意: 以上方法设置属性时,如果属性值是布尔值,不用加双引号</code></p>\n<h3 id=\"jquery获取文本内容\"><a class=\"卓越科技-\" href=\"#jquery获取文本内容\">#</a> jQuery 获取文本内容</h3>\n<h4 id=\"获取设置元素所有内容\"><a class=\"卓越科技-\" href=\"#获取设置元素所有内容\">#</a> 获取设置元素所有内容</h4>\n<p><code>$(元素).html()</code> :  相当于 innerHTML 返回元素的内容 (包括标签)</p>\n<p><code>$(元素).html(&quot;xxx&quot;)</code> :  给元素添加内容 XXX</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"获取设置元素的文本内容\"><a class=\"卓越科技-\" href=\"#获取设置元素的文本内容\">#</a> 获取设置元素的文本内容</h4>\n<p><code>$(元素).text()</code> : 相当于 innerText 获取元素的文本内容 (只有文本，没有标签)</p>\n<p><code>$(元素).text(&quot;xxxx&quot;)</code> : 设置元素文文内容为 xxx</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jjj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"获取设置表单值\"><a class=\"卓越科技-\" href=\"#获取设置表单值\">#</a> 获取设置表单值</h4>\n<p><code>$(表单元素).val()</code> :  相当于 value 获取表单元素的值</p>\n<p><code>$(表单元素).val(&quot;xxxx&quot;)</code> :  将表单的值设置为 xxxx</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"jquery元素的操作\"><a class=\"卓越科技-\" href=\"#jquery元素的操作\">#</a> jQuery 元素的操作</h3>\n<h4 id=\"遍历\"><a class=\"卓越科技-\" href=\"#遍历\">#</a> 遍历</h4>\n<ol>\n<li>\n<p><code>$(&quot;元素&quot;).each(function(index,domEle)&#123;&#125;)</code> :  其中 index 为索引值 domEle 为 DOM 元素，不是 jQuery 元素，所以要使用 jQuery 方法必须加 $</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span>domEle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// domEle.css(\"color\",\"red\");</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>domEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sum <span class=\"token operator\">+=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>domEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 注意返回的是字符串 要转为数字型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：也可以遍历数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span>domEle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>domEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$.each($(&quot;元素&quot;),function(index,domEle)&#123;&#125;)</code> :  function 中参数和上面一样</p>\n<p><code>注意: 一般该方法用于遍历数据,可以遍历元素数组对象</code></p>\n<p><code>遍历对象时,第一个参数是属性名,第二个为属性值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span>ele</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span>ele</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">\"andy\"</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token string\">\"19\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span>ele</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"jquery添加删除元素\"><a class=\"卓越科技-\" href=\"#jquery添加删除元素\">#</a> jQuery 添加删除元素</h3>\n<ol>\n<li>\n<p>创建元素</p>\n<p><code>var 变量 = $(&quot;添加的元素&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;li>new&lt;/li>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加元素</p>\n<ul>\n<li>\n<p>内部添加 (添加完为父子关系)</p>\n<p><code>$(&quot;父元素&quot;).append(添加的元素)</code> : 添加到父元素最后面 相当于 appendChild</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;父元素&quot;).prepend(添加的元素)</code> : 添加到父元素最前面</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>外部添加 (添加完为兄弟关系)</p>\n<p><code>$(&quot;元素&quot;).after(添加的元素) 添加到元素后面</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).before(添加的元素)</code> : 添加到元素前面</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>删除元素</p>\n<p><code>$(&quot;元素&quot;).remove()</code> : 删除元素本身 自杀</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).empty()</code> : 删除元素的所有子节点</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"jquery尺寸方法\"><a class=\"卓越科技-\" href=\"#jquery尺寸方法\">#</a> jQuery 尺寸方法</h3>\n<p><code>$(&quot;元素&quot;).width()/height()</code> : 只能获取内容高宽 不包含  <code>margin padding borer</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).innerWidth/innerHeight</code> : 获取  <code>width+padding  == clientWidth</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">innerWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).outerWidth/outerHeight</code> : 获取  <code>width+padding+border  == offsetWidth</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">outerWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">outerWidth</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果加参数 true, 则会加上 margin</p>\n<p><code>注意: 如果以上所有的参数为空,则是获取相应值,返回数字型。如果参数是数字,则是修改相应值,参数不用加单位</code></p>\n<h3 id=\"jquery位置获取\"><a class=\"卓越科技-\" href=\"#jquery位置获取\">#</a> jQuery 位置获取</h3>\n<p><code>$(&quot;元素&quot;).offset()</code> :  获取元素距离文档的距离，跟父元素无关。获取的值包含了 top 和 left, 为对象形式，添加参数可以修改</p>\n<p><code>$(&quot;元素&quot;).offset().top/left</code> :  获取元素距离文档顶部 / 左边的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \t \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    top<span class=\"token operator\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> \t \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    left<span class=\"token operator\">:</span><span class=\"token number\">200</span> \t </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 修改</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).position()</code> :  获取目标元素距离带有定位的父级元素的距离，如果父级都没有定位，则以文档为准，也是返回对象形式， <code>只能获取不能设置</code>   ==  <code>offsetLeft/offsetTop</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$(&quot;元素&quot;).scrollTop/scrollLeft</code> :  获取元素头部 / 左边被卷去的距离，加参数可以修改卷动距离 也可应用于动画</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollTop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 实现页面直接滚回顶部</pre></td></tr></table></figure><h3 id=\"jquery事件\"><a class=\"卓越科技-\" href=\"#jquery事件\">#</a> jQuery 事件</h3>\n<h4 id=\"jquery事件注册\"><a class=\"卓越科技-\" href=\"#jquery事件注册\">#</a> jQuery 事件注册</h4>\n<ol>\n<li>\n<p>单个事件注册</p>\n<p><code>$(&quot;元素&quot;).xxxx(function() &#123;&#125;)</code> :  与原生 js 差不多</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>缺点：一次只能绑定一个事件，而且无法给动态创建的元素绑定事件 (不会动态更改元素指向)</p>\n</li>\n<li>\n<p>多个事件注册</p>\n<p><code>$(&quot;元素&quot;).on()</code> : 与 addEventListener 相似</p>\n<ul>\n<li>绑定一个事件</li>\n</ul>\n<p><code>$(&quot;元素&quot;).on(事件类型,函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wocanima1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>多个事件触发同个函数</p>\n<p><code>$(&quot;元素&quot;).on(&quot;事件类型1 事件类型2 ...&quot;,函数)</code> :  相当于 hover 的写法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseenter mouseleave\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'current'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>多个事件分别触发不同函数 (以对象形式书写)</p>\n<p><code>$(&quot;元素&quot;).on(&#123;事件类型1:函数1,事件类型2:函数2,事件类型3:函数3&#125;...)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function-variable function\">mouseenter</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">click</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"skyblue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">mouseleave</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">css</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"background-color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 on 实现事件委托 (把原来绑定在子元素的事件绑定在父元素上，可以免去重复给同类元素定义事件)</p>\n<p><code>$(&quot;元素&quot;).on(事件类型,触发对象,函数)</code></p>\n<p>其中 $(this) 指向的是实参中的触发对象)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 绑定的是 ul, 但是触发的是 li </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ojbk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"jquery事件解绑\"><a class=\"卓越科技-\" href=\"#jquery事件解绑\">#</a> jQuery 事件解绑</h4>\n<p><code>$(&quot;元素&quot;),off()</code></p>\n<ol>\n<li>\n<p>解绑全部事件</p>\n<p><code>$(&quot;元素&quot;).off()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>解绑指定事件</p>\n<p><code>$(&quot;元素&quot;).off(事件类型)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>解绑事件委托</p>\n<p><code>$(&quot;元素&quot;).off(事件类型,触发对象)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"one事件只能触发事件一次\"><a class=\"卓越科技-\" href=\"#one事件只能触发事件一次\">#</a> one 事件 (只能触发事件一次)</h4>\n<p><code>$(&quot;元素&quot;).one(事件类型,函数)</code> :  语法与 on 相同</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>该事件注册后点击一次后就失效了</code></p>\n<h3 id=\"自动触发事件\"><a class=\"卓越科技-\" href=\"#自动触发事件\">#</a> 自动触发事件</h3>\n<ol>\n<li>\n<p><code>$(&quot;元素&quot;).click()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;元素&quot;).trigger(&quot;事件类型&quot;)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>$(&quot;元素&quot;).triggerHandler(&quot;事件类型&quot;)  与上面的区别为这个方法不会触发默认事件</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">triggerHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"事件对象与原生基本一致\"><a class=\"卓越科技-\" href=\"#事件对象与原生基本一致\">#</a> 事件对象 (与原生基本一致)</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"点击了div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jquery其他方法\"><a class=\"卓越科技-\" href=\"#jquery其他方法\">#</a> jQuery 其他方法</h3>\n<h4 id=\"元素拷贝\"><a class=\"卓越科技-\" href=\"#元素拷贝\">#</a> 元素拷贝</h4>\n<p><code>$.extend([deep],拷贝给谁,拷贝谁1,拷贝谁2,...)</code> : deep 属性可以选填 默认为浅拷贝 如果为 true 则是深拷贝</p>\n<ul>\n<li>\n<p>浅拷贝</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> targetobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"andy\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    msg<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        age<span class=\"token operator\">:</span><span class=\"token number\">19</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>targetobj<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>深拷贝</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> targetobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    id<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"andy\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    msg<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        age<span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>targetobj<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"多库共存\"><a class=\"卓越科技-\" href=\"#多库共存\">#</a> 多库共存</h3>\n<ol>\n<li>\n<p>如果 $ 符号冲突 则用 jquery 关键字代替</p>\n</li>\n<li>\n<p>或者用定义一个变量，替换 $</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xx <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">noConflict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span>  suibian <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">noConflict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">suibian</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"关于数据储存\"><a class=\"卓越科技-\" href=\"#关于数据储存\">#</a> 关于数据储存</h3>\n<blockquote>\n<p>本地存储只能存储字符串的数据格式</p>\n</blockquote>\n<p><code>JSON.stringify()</code> :  把数组对象转为字符串格式，以便赋予本地存储</p>\n<p><code>JSON.parse()</code> : 把本地存储的数据转为对象格式，以便修改本地存储的视距</p>\n",
            "tags": [
                "Web教程",
                "jQuery"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/8cde864d/",
            "url": "https://shoka.zykjofficial.top/posts/8cde864d/",
            "title": "JavaScript高级",
            "date_published": "2020-05-02T04:00:00.000Z",
            "content_html": "<h2 id=\"javascript高级\"><a class=\"卓越科技-\" href=\"#javascript高级\">#</a> JavaScript 高级</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVg3NDExbjcyVQ==\">黑马程序员</span></p>\n</div>\n<h3 id=\"两大编程思想\"><a class=\"卓越科技-\" href=\"#两大编程思想\">#</a> 两大编程思想</h3>\n<blockquote>\n<p>(面向过程，面向对象)</p>\n</blockquote>\n<h4 id=\"面向过程pop\"><a class=\"卓越科技-\" href=\"#面向过程pop\">#</a> 面向过程 pop</h4>\n<blockquote>\n<p><code>process-oriented programming</code> :  分析出问题所需的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个调用 (蛋炒饭)</p>\n</blockquote>\n<ul>\n<li>\n<p>优点：性能高，适合跟硬件紧密联系</p>\n</li>\n<li>\n<p>缺点：没有面向对象易维护、易复用、易扩展</p>\n</li>\n</ul>\n<h4 id=\"面向对象oop\"><a class=\"卓越科技-\" href=\"#面向对象oop\">#</a> 面向对象 oop</h4>\n<blockquote>\n<p><code>object-oriented programming</code> : 把事务分解成一个一个对象，然后对象之间分工与合作 (盖浇饭) 适用于复杂的项目</p>\n</blockquote>\n<ul>\n<li>\n<p>优点：易维护、易复用、易扩展，可以设计出低耦合的系统。使系统更加灵活、更加易于维护</p>\n</li>\n<li>\n<p>缺点：性能比面向过程低</p>\n</li>\n</ul>\n<h4 id=\"面向对象的特性\"><a class=\"卓越科技-\" href=\"#面向对象的特性\">#</a> 面向对象的特性</h4>\n<ol>\n<li>\n<p>封装性：即封装后无需知道原理，运行即可</p>\n</li>\n<li>\n<p>继承性：某个接口的功能继承于其父亲</p>\n</li>\n<li>\n<p>多态性：多个工作状态</p>\n</li>\n</ol>\n<h4 id=\"面向对象的思维特点\"><a class=\"卓越科技-\" href=\"#面向对象的思维特点\">#</a> 面向对象的思维特点</h4>\n<ol>\n<li>\n<p>抽取 (抽象) 对象公用的属性和行为阻止 (封装) 成一个类 (模板)</p>\n</li>\n<li>\n<p>对类进行实例化，获取类的对象</p>\n</li>\n</ol>\n<h4 id=\"类\"><a class=\"卓越科技-\" href=\"#类\">#</a> 类</h4>\n<blockquote>\n<p>类抽象了对象的公共部分，泛指一大类</p>\n</blockquote>\n<p>类和对象的区别：对象是具体的，而类是所有同类具体对象的共同属性方法的集合。可以通过类实例化一个具体的对象</p>\n<h3 id=\"类es6\"><a class=\"卓越科技-\" href=\"#类es6\">#</a> 类 (ES6)</h3>\n<h4 id=\"类的创建\"><a class=\"卓越科技-\" href=\"#类的创建\">#</a> 类的创建</h4>\n<p><code>class name &#123;  // class body&#125;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>类constructor构造函数</code> ：用于传递参数，返回实例，通过 new 命令生成对象实例时，自动调用该方法。如果没有显示定义，类内部会自动创建一个 constructor ()。即将参数传递给实例对应的属性或方法。</p>\n<h4 id=\"创建实例\"><a class=\"卓越科技-\" href=\"#创建实例\">#</a> 创建实例</h4>\n<blockquote>\n<p>必须用 new 创建实例</p>\n</blockquote>\n<p><code>var xx = new name(参数);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>通过 class 创建类，类名首字母大写</p>\n</li>\n<li>\n<p>类里面有 constructor 函数，可以传递实参，同时返回实例，constructor 记得加小括号</p>\n</li>\n<li>\n<p>只要 new 生成实例时，就会自动调用这个函数</p>\n</li>\n<li>\n<p>生成实例 new 不能省略</p>\n</li>\n<li>\n<p>创建类时类名后没有小括号，生成实例时类名后一定有小括号用于传递实参，构造函数不需要加 function ()</p>\n</li>\n</ol>\n<h4 id=\"类中添加方法\"><a class=\"卓越科技-\" href=\"#类中添加方法\">#</a> 类中添加方法</h4>\n<blockquote>\n<p>实质为添加在原型对象中</p>\n</blockquote>\n<p><code>class name &#123;  函数名()&#123;&#125;&#125;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">song</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我在唱歌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">+</span> song<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>直接添加在 constructor 之后</p>\n</li>\n<li>\n<p>可传递参数</p>\n</li>\n<li>\n<p>可添加多个方法</p>\n</li>\n<li>\n<p>可在方法中调用该对象属性</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>添加类方法</p>\n<p>在函数前面加 static 保留字即可</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Big</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">big</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i'm private!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Big<span class=\"token punctuation\">.</span><span class=\"token function\">big</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"类的继承\"><a class=\"卓越科技-\" href=\"#类的继承\">#</a> 类的继承</h4>\n<blockquote>\n<p>子类可以继承父类的一些属性和方法</p>\n</blockquote>\n<h5 id=\"继承语法\"><a class=\"卓越科技-\" href=\"#继承语法\">#</a> 继承语法</h5>\n<p><code>class Son extends Father &#123;&#125; </code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"super-关键字\"><a class=\"卓越科技-\" href=\"#super-关键字\">#</a> super 关键字</h5>\n<p>用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数</p>\n<ol>\n<li>\n<p>利用 super 调用构造函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">z<span class=\"token punctuation\">,</span>v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>即继承的本质是通过子类到父类中去执行函数，如果没有用 super 调用父类的函数，那么子类的形参无法传给父类，也就得不出结果。只有在子类的构造函数 constructor 中使用 super 调用父类的构造函数，才能将形参传给父类。</p>\n</li>\n<li>\n<p>利用 super 调用普通函数</p>\n<p><code>super.父类中的函数名()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'woshibaba'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'deerzi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 就近原则调用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 继承中属性或者方法查找原则：就近原则</span></pre></td></tr></table></figure><p>调用原则：就近原则。如果子类调用了一个函数，则先查看子类中有无此函数，如果没有，就去父类中寻找，super 可视为等于 f ather</p>\n</li>\n</ol>\n<h5 id=\"子类继承父类方法同时扩展自己的方法\"><a class=\"卓越科技-\" href=\"#子类继承父类方法同时扩展自己的方法\">#</a> 子类继承父类方法同时扩展自己的方法</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">substract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">substract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重点：构造函数里有 this 和 super 的时候，super 一定要写在 this 之前，父亲为大！</p>\n<h4 id=\"使用类注意事项\"><a class=\"卓越科技-\" href=\"#使用类注意事项\">#</a> 使用类注意事项</h4>\n<ol>\n<li>\n<p>ES6 中没有变量提升，所以必须先定义类，才能通过类实例化对象</p>\n</li>\n<li>\n<p>类里面的共有的属性和方法必须一定要加 this 使用</p>\n</li>\n<li>\n<p>可以通过在构造函数里 this. 函数名直接调用方式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> that<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//constructor 里面的 this 指向创建的实例对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//this 指向实例 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>constructor 里面的 this 指向创建的实例对象，方法中的 this 指向调用者</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> that<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Star</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//constructor 里面的 this 指向创建的实例对象 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>btn<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dance<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//this 指向实例 \t</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">dance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 指向 btn 的 uname \t</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"es6中的类的本质\"><a class=\"卓越科技-\" href=\"#es6中的类的本质\">#</a> ES6 中的类的本质</h4>\n<ol>\n<li>class 本质还是 function.</li>\n<li>类的所有方法都定义在类的 prototype 属性上</li>\n<li>类创建的实例里面也有 <code>__proto__</code>  指向类的 prototype 原型对象</li>\n<li>所以 ES6 的类它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li>\n<li>所以 ES6 的类其实就是语法糖</li>\n<li>语法糖语法糖就是一种便捷写法简单理解，有两种方法可以实现同样的功能但是一种写法更加清晰、方便<br />\n那么这个方法就是语法糖</li>\n</ol>\n<p>扩展方法:</p>\n<ul>\n<li>\n<p><code>xx.select()</code> :  实现 xx 元素的选中</p>\n</li>\n<li>\n<p><code>xx.blur()</code> :  实现 xx 元素的失焦</p>\n</li>\n</ul>\n<h3 id=\"构造函数和原型es5\"><a class=\"卓越科技-\" href=\"#构造函数和原型es5\">#</a> 构造函数和原型 (ES5)</h3>\n<h4 id=\"概述\"><a class=\"卓越科技-\" href=\"#概述\">#</a> 概述</h4>\n<ul>\n<li>\n<p>在典型的 OOP 的语言中 (如 Java) , 都存在类的概念，类就是对象的模板，对象就是类的实例，但在 ES6 之前，<br />\nJS 中并没用引入类的概念。</p>\n</li>\n<li>\n<p>ES6 前 JS 没有类，通过构造函数来定义</p>\n</li>\n<li>\n<p>ES6 , 全称 ECMAScript6.0 , 2015.06 发版。但是目前浏览器的 JavaScript 是 ES5 版本，大多数高版本的浏<br />\n览器也支持 ES6, 不过只实现了 ES6 的部分特性和功能。<br />\n在 ES6 之前，对象不是基于类创建的，而是用一种称为 <code>构造函数</code> 的特殊函数来定义对象和它们的特征。</p>\n</li>\n</ul>\n<h4 id=\"创建对象三种方式\"><a class=\"卓越科技-\" href=\"#创建对象三种方式\">#</a> 创建对象三种方式</h4>\n<ol>\n<li>\n<p>通过 new Object 创建对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过字面量创建对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过构造函数创建对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会唱歌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>对象的增强写法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zykj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    age</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"静态成员和实例成员\"><a class=\"卓越科技-\" href=\"#静态成员和实例成员\">#</a> 静态成员和实例成员</h4>\n<blockquote>\n<p>实例成员：包括了实例方法和实例属性。 <code>通过构造函数内部 this 创建的成员</code> ，比如上面的 uname ,age , sing ()</p>\n</blockquote>\n<p><code>实例成员只能通过实例访问</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ldh<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>不能通过构造函数访问</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Star<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><blockquote>\n<p>静态成员：即类属性和类方法 (如 Number.MAX_VALUE)。构造函数本身添加的成员，如</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Star<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">'man'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>静态成员只能通过构造函数访问</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Star<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>不能通过实例访问</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ldh<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><h3 id=\"原型\"><a class=\"卓越科技-\" href=\"#原型\">#</a> 原型</h3>\n<div class=\"note danger\">\n<p>重要内容、忘记了记得看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVg3NDExbjcyVT9wPTI2\">原型</span></p>\n</div>\n<blockquote>\n<p>JS 规定每一个构造函数都有一个 prototype 属性，指向一个原型对象。当函数被定义的时候，prototype 属性会自动创建和初始化。这个对象拥有的属性和方法都会被构造函数所拥有。即通过 prototype 定义的属性和方法都会自动成为该其构造函数创建实例所共有的属性和方法 (prototype 只有构造函数有，对象实例没有)</p>\n</blockquote>\n<p>作用：共享作用，可以把那些 <code>不变的方法</code> ，直接定义在 Prototype 对象上，这样所有对象的实例就可以 <code>共享这些方法</code> 。</p>\n<p>优点:</p>\n<ol>\n<li>\n<p>使用原型对象可以显著减少每个对象所需的内存数量，因为对象可以继承原型的很多属性。</p>\n</li>\n<li>\n<p>即便是在对象创建以后才添加到原型中的属性，对象也可以继承它</p>\n</li>\n</ol>\n<p><code>例</code>  :</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会唱歌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ldh<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：继承的属性依旧可以用 for/in 来枚举，in 运算符依旧起效。只能用 Object.hasOwnProperty () 来区分继承的属性和常规的属性</p>\n<h4 id=\"对象原型-__proto__\"><a class=\"卓越科技-\" href=\"#对象原型-__proto__\">#</a> 对象原型  <code>__proto__</code></h4>\n<p>每个实例对象 (包括原型对象) 都有一个属性 <code>__proto__</code> (是两个杠), 指向构造这个对象的构造函数的原型对象，对象通过 <code>__proto__</code> 就可以调用其中的属性和原型 (即 <code>__proto__</code> 和 <code>prototype</code>  是等价的)</p>\n<p>开发中不可以使用 <code>__proto__</code> 这个属性，不可对其赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ldh<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 ldh.__proto__.sing ()</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212254.png\" alt=\"\" /></p>\n<p><code>即构造函数只能通过prototype属性获取原型对象,而实例对象必须通过proto获取原型对象</code></p>\n<h4 id=\"原型对象中的-constructor-属性\"><a class=\"卓越科技-\" href=\"#原型对象中的-constructor-属性\">#</a> 原型对象中的 constructor 属性</h4>\n<p>原型对象初始化后只有一个属性 constructor</p>\n<p><code>构造函数.prototype.constructor</code>   或  <code>对象实例. proto.constructor ( proto 可以省略) </code> 可以返回这个对象所引用的构造函数 (只会返回其构造函数，没有对象实例)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ldh<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用 constructor 指回原来的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 如果我们修改了原来的原型对象，给原型对象赋值的是一个对象，则必须手动的利用 constructor 指回原来的构造函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    constructor<span class=\"token operator\">:</span> Star<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">sing</span> <span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱唱歌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">movie</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱演电影\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"构造函数-实例-原型对象的三者关系\"><a class=\"卓越科技-\" href=\"#构造函数-实例-原型对象的三者关系\">#</a> 构造函数、实例、原型对象的三者关系</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212654.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>构造函数通过 <code>new</code>  生成对象实例</p>\n</li>\n<li>\n<p>构造函数通过 <code>prototype</code>  属性获取原型对象</p>\n</li>\n<li>\n<p>对象实例通过 <code>__proto__</code> 获取原型对象</p>\n</li>\n<li>\n<p>原型对象通过 <code>constructor</code>  获取构造函数</p>\n</li>\n</ul>\n<h4 id=\"类和原型\"><a class=\"卓越科技-\" href=\"#类和原型\">#</a> 类和原型</h4>\n<p>原型对象是类的唯一标识：当且仅当两个对象继承自同一个原型对象时，他们才是属于同一个类的实例。即类的识别是通过原型来完成而不是构造函数的名字。构造函数是类的外在表现，通常构造函数的名字用作类名</p>\n<h4 id=\"定义类的步骤\"><a class=\"卓越科技-\" href=\"#定义类的步骤\">#</a> 定义类的步骤</h4>\n<ol>\n<li>\n<p>定义构造函数，设置初始化新对象的实例属性</p>\n</li>\n<li>\n<p>给构造函数的 prototype 对象定义实例的方法</p>\n</li>\n<li>\n<p>给构造函数定义类字段和类属性</p>\n</li>\n</ol>\n<h4 id=\"原型链\"><a class=\"卓越科技-\" href=\"#原型链\">#</a> 原型链</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501212754.png\" alt=\"\" /></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 只要是对象就 __proto__ 原型，指向原型对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 我们 Star 原型对象里面的 __proto__ 原型指向的 Object.prototype</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span></pre></td></tr></table></figure><h4 id=\"object\"><a class=\"卓越科技-\" href=\"#object\">#</a> Object</h4>\n<blockquote>\n<p>是最通用的类。构造函数和实例的原型对象的原型对象指向 <code>Object的原型对象(Object.prototype)</code> ,Object 的原型对象的原型对象为空。(所有通过 new Object 创建的对象都具有同一个原型对象，即 <code>Object.prototype.Object.prototype</code>  是没有原型的对象)</p>\n</blockquote>\n<p>也就是对象实例可以调用 Object 的 prototype 中的属性方法</p>\n<h4 id=\"实例对象属性方法的查找规则\"><a class=\"卓越科技-\" href=\"#实例对象属性方法的查找规则\">#</a> 实例对象属性方法的查找规则</h4>\n<ul>\n<li>当访问一个对象的属性 (包括方法) 时，首先查找这个 <code>对象自身</code> 有没有该属性。</li>\n<li>如果没有就查找它的原型 (也就是 <code>__proto__</code> 指向的 <code>prototype原型对象</code> )。</li>\n<li>如果还没有就查找原型对象的原型 ( <code>Object的原型对象</code> ).</li>\n<li>依此类推一直找到 Object 为止 ( <code>null</code> )。</li>\n<li><code>__ proto__</code>  对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">'woman'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Object.prototype.sex = 'nomannowoman'; </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Star.sex = 'man'; </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// ldh.sex = 'man'; </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ldh<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>先查找实例对象中有没有查找的值，没有则到其原型对象中查找，再没有就到 Object 的原型对象中查找，如果再没有则返回 undefined</p>\n<p>当写入一个属性的值时，js 不会使用原型对象，因为这样会影响其他同个构造函数创建的对象</p>\n<p>如果 o 对象的原型中有了 p 属性，给 o 对象设置 p 属性时只是直接在 o 对象中创建 p 属性，而不再继承原型中的 p 属性，也就是 o 的 p 遮盖了原型对象中的 p。也就是说，JS 中只有查询属性时才体会到继承的存在，而设置属性和继承无关，属性的设置永远都是设置在目标对象中。</p>\n<h4 id=\"原型对象中-this-的指向\"><a class=\"卓越科技-\" href=\"#原型对象中-this-的指向\">#</a> 原型对象中 this 的指向</h4>\n<p><code>原型对象中的 this指向调用者</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> that<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会唱歌'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ldh<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that <span class=\"token operator\">===</span> ldh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h4 id=\"扩展内置对象方法不建议这么做\"><a class=\"卓越科技-\" href=\"#扩展内置对象方法不建议这么做\">#</a> 扩展内置对象方法 (不建议这么做！)</h4>\n<p>可以通过给原型对象 <code>追加</code> 方法，实现内置对象方法的扩展。如 Array 数组对象追加求和的方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> sum  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        sum <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不可以使用下面形式 ( <code>因为会覆盖内置的方法</code> )</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">sum</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> sum  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            sum <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"es5的继承\"><a class=\"卓越科技-\" href=\"#es5的继承\">#</a> ES5 的继承</h4>\n<h5 id=\"call函数\"><a class=\"卓越科技-\" href=\"#call函数\">#</a> call 函数</h5>\n<pre><code>    fun.call(thisArg, arg1, arg2, ...)\n</code></pre>\n<ul>\n<li>thisArg : 当前调用函数 this 的指向对象</li>\n<li>arg1 , arg2 : 传递的其他参数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"哈哈哈\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name <span class=\"token operator\">:</span> <span class=\"token string\">\"zykj\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"属性的继承利用call函数\"><a class=\"卓越科技-\" href=\"#属性的继承利用call函数\">#</a> 属性的继承利用 call 函数</h5>\n<p>ES6 前的继承就是在子构造函数中利用 call 引用父构造函数，并改变 this 指向为子构造函数的实例</p>\n<p>调用这个函数并且修改函数运行时的 this 指向</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 父构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//this 指向父构造函数的对象实例 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 子构造函数 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>score</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//this 指向子构造函数的对象实例 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：可以不断嵌套</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Grandson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>score</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">Son</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"方法的继承\"><a class=\"卓越科技-\" href=\"#方法的继承\">#</a> 方法的继承</h5>\n<p><code>子类.prototype = new 父类()</code></p>\n<p>确保子类的原型对象是父类的一个实例即可</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Son</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Son 的原型对象的 constructor 指回原来的 (构造函数) Son</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Son</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Son<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 即 Son.prototype.__proto__.constructor = Son;</span></pre></td></tr></table></figure><p><code>切记: Son 的原型对象的 constructor 指向要改回为 Son</code></p>\n<h5 id=\"类的判别方法\"><a class=\"卓越科技-\" href=\"#类的判别方法\">#</a> 类的判别方法</h5>\n<ol>\n<li>\n<p>instanceof</p>\n<p>基于原型链检测，而不是构造函数的名字</p>\n<p>缺点：无法通过对象获得类名，只能检测对象是否属于指定的类名。在多窗口和多框架子页面的 Web 应用中兼容性不佳，如一个页面中的数组不是另一个页面中数组的实例</p>\n</li>\n<li>\n<p>constructor 属性</p>\n<p>缺点与 instanceof 中一样，在多个执行上下文的场景中无法正常工作</p>\n</li>\n<li>\n<p>利用构造函数的名称</p>\n<p>利用 <code>Object.toString</code>  方法获取然后裁剪出来</p>\n</li>\n<li>\n<p>鸭式辨型</p>\n<p>如果该对象出现与某个同名的方法，那么就认为该对象属于这个类</p>\n</li>\n</ol>\n<h4 id=\"es5新增对象方法\"><a class=\"卓越科技-\" href=\"#es5新增对象方法\">#</a> ES5 新增对象方法</h4>\n<ol>\n<li>\n<p>Object.keys () 用于获取对象自身所有的属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>效果类似 <code>for...in</code></li>\n<li>返回一个由属性名组成的数组</li>\n</ul>\n</li>\n<li>\n<p>Object.defineProperty () 定义对象中新属性或修改原有的属性。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>obj</code> : 必需。目标对象</li>\n<li><code>prop</code> : 必需。需定义或修改的属性的名字</li>\n<li><code>descriptor</code> : 必需。目标属性所拥有的特性</li>\n</ul>\n<p>Object.defineProperty () 第三个参数 descriptor 说明:  <code>以对象形式&#123;&#125;写</code></p>\n<ul>\n<li><code>value</code> : 设置属性的值默认为 undefined</li>\n<li><code>writable</code> : 值是否可以重写。true | false 默认为 false</li>\n<li><code>enumerable</code> : 目标属性是否可以被枚举 (遍历)。true | false 默认为 false</li>\n<li><code>configurable</code> : 目标属性是否可以被删除或是否可以再次修改特性 true | false 默认为 false</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   id<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   name<span class=\"token operator\">:</span><span class=\"token string\">'zykj'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   value<span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   value<span class=\"token operator\">:</span> <span class=\"token string\">'skx'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 设置为 false 代表不能修改</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   writable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    value<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 默认为 false 代表不能被遍历</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 默认为 false 代表不能删除这个属性和修改这个参数的特性</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//delete obj.price// 错误</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"函数进阶\"><a class=\"卓越科技-\" href=\"#函数进阶\">#</a> 函数进阶</h4>\n<h5 id=\"函数定义方式\"><a class=\"卓越科技-\" href=\"#函数定义方式\">#</a> 函数定义方式</h5>\n<ol>\n<li>\n<p><code>function 函数名()&#123;&#125;</code></p>\n</li>\n<li>\n<p><code>var 函数名 = function()&#123;&#125;</code></p>\n</li>\n<li>\n<p><code>var 函数名 = new Function('参数1','参数2','函数体');</code> (了解即可，这种方法创建的函数并不适用词法作用域)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'console.log(a + b)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数的增强写法</p>\n<pre><code>//原本\nconst fun2 = &#123;\n\tgetName: function()&#123;\n\t\n\t&#125;\n&#125;\n\n//增强写法\nconst fun2 = &#123;\n\tgetName()&#123;\n\t\n\t&#125;\n&#125;\n</code></pre>\n</li>\n</ol>\n<p>注意:</p>\n<ol>\n<li>\n<p>Function 里面必须是 <code>字符串格式</code></p>\n</li>\n<li>\n<p>效率较低，较少使用</p>\n</li>\n<li>\n<p>所有函数都是 Function 的实例对象</p>\n</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200501220254.png\" alt=\"img\" /></p>\n<h5 id=\"函数调用方式\"><a class=\"卓越科技-\" href=\"#函数调用方式\">#</a> 函数调用方式</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 普通函数 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 对象的方法 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>o<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 3. 构造函数 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 4. 绑定事件函数 </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 5. 定时器函数 </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 6. 立即执行函数 (立即调用) (function () &#123;&#125;)()</span></pre></td></tr></table></figure><h5 id=\"函数内-this-指向\"><a class=\"卓越科技-\" href=\"#函数内-this-指向\">#</a> 函数内 this 指向</h5>\n<table>\n<thead>\n<tr>\n<th>调用方式</th>\n<th>this 指向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通函数调用</td>\n<td>window</td>\n</tr>\n<tr>\n<td>构造函数调用</td>\n<td>实例对象 函数原型对象里面的方法也指向实例对象</td>\n</tr>\n<tr>\n<td>对象调用方法</td>\n<td>该方法所属对象</td>\n</tr>\n<tr>\n<td>事件绑定方法</td>\n<td>绑定事件对象</td>\n</tr>\n<tr>\n<td>定时器函数</td>\n<td>window</td>\n</tr>\n<tr>\n<td>立即执行函数</td>\n<td>window</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"函数内改变-this-指向方法\"><a class=\"卓越科技-\" href=\"#函数内改变-this-指向方法\">#</a> 函数内改变 this 指向方法</h5>\n<ol>\n<li>\n<p>call 方法</p>\n<ul>\n<li>\n<p><code>函数.call(this指向的对象,参数1,参数2,。。。)</code></p>\n</li>\n<li>\n<p>作用：调用该函数并且将其 this 指向修改</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'andy'</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 fn 函数的 this 指向改为 o</span></pre></td></tr></table></figure></li>\n<li>\n<p>apply 方法</p>\n<p><code>函数名.apply(this指向的对象,[参数1,参数2,。。。])</code></p>\n<p>同样会调用函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> arry <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">,</span>arry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ul>\n<li>参数必须是数组形式，返回值会自动改为需要的形式</li>\n</ul>\n</li>\n<li>\n<p>bind 方法</p>\n<p><code>函数名.bind(this指向的对象,参数1,参数2...)</code></p>\n<p><code>不会调用函数,而是返回一个改造后的原函数的拷贝</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token number\">1</span>  \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：因为不会调用原函数，所以要新建变量来接收改造后的函数</p>\n<p>使用例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    btn<span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"总结\"><a class=\"卓越科技-\" href=\"#总结\">#</a> 总结</h5>\n<p><code>相同点</code> :</p>\n<ol>\n<li>都可以改变函数内部的 this 指向.</li>\n</ol>\n<p><code>区别点</code> :</p>\n<ol>\n<li>call 和 apply 会调用函数并且改变函数内部 this 指向，</li>\n<li>call 和 apply 传递的参数不一样，call 传递参数 arg1, arg2... 形式 apply 必须数组形式 [arg]</li>\n<li>bind 不会调用函数，可以改变函数内部 this 指向</li>\n</ol>\n<p><code>主要应用场景</code> :</p>\n<ol>\n<li>call 经常做继承</li>\n<li>apply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值</li>\n<li>bind 不调用函数但是还想改变 this 指向，比如改变定时器内部的 this 指向.</li>\n</ol>\n<h5 id=\"高阶函数\"><a class=\"卓越科技-\" href=\"#高阶函数\">#</a> 高阶函数</h5>\n<blockquote>\n<p>对其他函数进操作的函数，接收函数作为参数或将函数作为返回值输出</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>函数作为一种数据类型，也可以作为参数传递给另一个函数使用，最典型的就是作为 <code>回调函数</code></p>\n<ul>\n<li>\n<p>filter</p>\n<p><code>数组.filter(function(currentValue,index)&#123;&#125;)</code></p>\n<p>实现数组中满足某条件的数值的筛选，返回一个 <code>新数组</code></p>\n<p>个人理解：通过返回值的真假来判断是否添加到一个新的数组中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// return value >= 20; </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现筛选偶数 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [12, 66, 4, 88]</span></pre></td></tr></table></figure></li>\n<li>\n<p>reduce</p>\n<p><code>reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><em>total</em></td>\n<td style=\"text-align:left\">必需。<em>初始值</em>，或者 <code>计算结束后的返回值</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>currentValue</em></td>\n<td style=\"text-align:left\">必需。 <code>当前元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>currentIndex</em></td>\n<td style=\"text-align:left\">可选。 <code>当前元素的索引</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>arr</em></td>\n<td style=\"text-align:left\">可选。 <code>当前元素所属的数组对象。</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>initialValue</em></td>\n<td style=\"text-align:left\">可选。 <code>传递给函数的初始值</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> arr4<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// console.log(prev); </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 3 4 5 6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 21</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>解释</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>第一次 prev: 0 item: 1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>第二次 prev: 1 item: 2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>第三次 prev: 3 item: 3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>第四次 prev: 6 item: 4</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>第五次 prev: 10 item: 5</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>第五次 prev: 15 item: 6</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>最后结果为 21</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>**/</span></pre></td></tr></table></figure></li>\n<li>\n<p>map</p>\n<p><code>数组.map(function(currentValue,index)</code></p>\n<p>改方法按照原始数组元素顺序依次处理元素、返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现数据 * 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [24, 132, 8, 176, 6, 14]</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"严格模式ie10以上版本支持\"><a class=\"卓越科技-\" href=\"#严格模式ie10以上版本支持\">#</a> 严格模式 (IE10 以上版本支持)</h3>\n<h4 id=\"内容\"><a class=\"卓越科技-\" href=\"#内容\">#</a> 内容</h4>\n<ol>\n<li>消除了 Javascript 语法的一些不合理不严谨之处，减少了一些怪异行为。</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全。</li>\n<li>提高编译器效率，增加运行速度。</li>\n<li>禁用了在 ECMAScript 的未来版本中可能会定义的一 - 些语法，为未来新版本的 Javascript 做好铺垫。比<br />\n如一些保留字如:  <code>class</code> ,  <code>enum</code> ,  <code>export</code> ,  <code>extends</code> ,  <code>import</code> ,  <code>super</code>  不能做变量名</li>\n</ol>\n<h4 id=\"两种形式及其开启方式\"><a class=\"卓越科技-\" href=\"#两种形式及其开启方式\">#</a> 两种形式及其开启方式</h4>\n<h5 id=\"为脚本开启严格模式\"><a class=\"卓越科技-\" href=\"#为脚本开启严格模式\">#</a> 为脚本开启严格模式</h5>\n<ol>\n<li>\n<p>在脚本开头添加 <code>'use strict'</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 开启脚本严格模式 下面的 js 代码会按照严格模式执行代码 \t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在立即执行函数的函数体开头添加 <code>'use strict'</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注：此时所有的代码按照严格模式执行</p>\n</li>\n</ol>\n<h5 id=\"为函数开启严格模式\"><a class=\"卓越科技-\" href=\"#为函数开启严格模式\">#</a> 为函数开启严格模式</h5>\n<p>在函数的函数体开头添加 <code>'use strict'</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 只为 fn 开启严格模式 \t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 下面代码按照严格模式执行 \t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注：此时只对 fn 执行严格模式，其中的函数体按照严格模式执行</p>\n<h4 id=\"严格模式中的变化\"><a class=\"卓越科技-\" href=\"#严格模式中的变化\">#</a> 严格模式中的变化</h4>\n<h5 id=\"变量规定\"><a class=\"卓越科技-\" href=\"#变量规定\">#</a> 变量规定</h5>\n<ul>\n<li>\n<p>变量必须先声明再使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'use strict'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>严禁删除已经声明的变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'use strict'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能删除已经声明好的变量</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"this-指向问题\"><a class=\"卓越科技-\" href=\"#this-指向问题\">#</a> this 指向问题</h5>\n<ul>\n<li>\n<p>全局作用域中 this 的指向为 undefined</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'use strict'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>定时器的 this 依旧为 window</p>\n</li>\n<li>\n<p>严格模式构造函数不加 new 调用，this 会指向 undefined</p>\n</li>\n</ul>\n<h5 id=\"函数的变化\"><a class=\"卓越科技-\" href=\"#函数的变化\">#</a> 函数的变化</h5>\n<ul>\n<li>函数的形参不能有重名</li>\n<li>不允许在非函数 (如 if , for) 代码块中定义函数</li>\n</ul>\n<h5 id=\"对象的变化\"><a class=\"卓越科技-\" href=\"#对象的变化\">#</a> 对象的变化</h5>\n<ul>\n<li>对象中不能有同名的属性</li>\n</ul>\n<h4 id=\"闭包\"><a class=\"卓越科技-\" href=\"#闭包\">#</a> 闭包</h4>\n<blockquote>\n<p>指一个嵌套函数被导出到他所定义的作用域外访问其外部函数的参数和变量，即某个作用域可以访问另一个函数内部的局部变量。也可理解为一种某个函数可以调用其他函数中变量的现象</p>\n</blockquote>\n<h5 id=\"原理\"><a class=\"卓越科技-\" href=\"#原理\">#</a> 原理</h5>\n<p>词法作用域：函数是通过词法来划分作用域的，而不是动态的划分作用域。他们在定义的位置运行而不是调用的位置运行</p>\n<p>一个定义在函数 f 中的函数 g。当 f 被调用的时候，作用域链包含了对 f 的这一调用的调用对象，后边是全局对象。g 定义在 f 中，因为 f 调用时才会定义 g, 所以这个作用域链接保存为 g 的定义的一部分。g 被调用时，作用域链包括 3 个对象: g 自己的调用对象，f 的调用对象和全局对象</p>\n<p>当嵌套函数的引用放到全局作用域中时，这种情况下有一个对嵌套的函数的外部引用，并且嵌套的函数将它的引用保留给外围函数的调用对象，结果就是外围函数的一次特调用的调用对象依然存在，外围函数的参数和局部变量的名字和值在这个调用对象中得以维持，而他又是嵌套函数定义的一部分，所以嵌套函数的调用可以访问这些值</p>\n<p>如:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>调用的这个变量所在的函数被称为闭包函数，如上面的 fn 函数</p>\n<p>注意：闭包是为了调用一个变量，而不是他的值！！！</p>\n<h5 id=\"闭包的主要作用\"><a class=\"卓越科技-\" href=\"#闭包的主要作用\">#</a> 闭包的主要作用</h5>\n<blockquote>\n<p>作用：延伸了变量的作用范围</p>\n</blockquote>\n<p>最常用的闭包还是函数中的函数调用其父函数的变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 相当于 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//return function f() &#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//console.log(num);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>经典案例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.nav'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 1. 传统方式获取 li 索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 2. 闭包方式式获取 li 索引</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 立即执行函数称为小闭包</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 3. 三秒后打印里的内容</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 经典案例</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">// 起步价</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\">// 总价</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">var</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function-variable function\">price</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        total <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        total <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function-variable function\">yd</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">return</span> flag <span class=\"token operator\">?</span> total <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">:</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>car<span class=\"token punctuation\">.</span><span class=\"token function\">price</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>car<span class=\"token punctuation\">.</span><span class=\"token function\">yd</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"递归函数\"><a class=\"卓越科技-\" href=\"#递归函数\">#</a> 递归函数</h4>\n<blockquote>\n<p>如果一个函数在内部可以调用其本身，就称为递归函数</p>\n</blockquote>\n<ul>\n<li>\n<p>递归函数的作用和循环效果一样</p>\n</li>\n<li>\n<p>由于递归很容易发生栈溢出错误 (即不停地新建栈区域), 所以必须要添加退出条件 return</p>\n</li>\n<li>\n<p>当遍历多层次的数据时可以用递归函数来遍历</p>\n</li>\n</ul>\n<h4 id=\"剩余参数用来代表剩余形参的参数-x\"><a class=\"卓越科技-\" href=\"#剩余参数用来代表剩余形参的参数-x\">#</a> 剩余参数 (用来代表剩余形参的参数 ...x)</h4>\n<p>当使用箭头函数时，无法使用 arguments 代替数量不定的参数，必须用剩余参数 ...args (一定要加 3 点，可以任意命名)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        sum <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 60</span></pre></td></tr></table></figure><p>用法与 arguments 基本相同，都是数组形式</p>\n<br>\n<p>剩余参数与数组解构的搭配使用 (即可以用任意命名剩余参数代替参数中的剩余部分)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>s3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3456</span></pre></td></tr></table></figure><h3 id=\"正则表达式\"><a class=\"卓越科技-\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<blockquote>\n<p>正则表达式 (regular expression)。用于匹配字符串中字符组合的模式，在 js 中也是对象</p>\n</blockquote>\n<h4 id=\"作用\"><a class=\"卓越科技-\" href=\"#作用\">#</a> 作用</h4>\n<p>用来检索、替换那些符合某个模式 (规则) 的文本。亦可用于过滤页面内容的一些敏感词，或从字符串中提取我们想要的特定部分</p>\n<h4 id=\"正则表达式在js中的使用\"><a class=\"卓越科技-\" href=\"#正则表达式在js中的使用\">#</a> 正则表达式在 js 中的使用</h4>\n<h5 id=\"创建方式\"><a class=\"卓越科技-\" href=\"#创建方式\">#</a> 创建方式</h5>\n<ol>\n<li>\n<p>利用 RegExp 构造函数创建 (ES5 中用这个方法创建两个字面量相同的对象不是同个对象)</p>\n<p><code>new RegExp(/xxxx/)</code>    <code>一定要加 // </code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/123/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用字面量创建</p>\n<p><code>var x = /xxx/;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token regex\">/zykj/</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"测试正则表达式-test\"><a class=\"卓越科技-\" href=\"#测试正则表达式-test\">#</a> 测试正则表达式 test</h5>\n<p><code>正则表达式.test(被测字符串)</code> : 正则对象的方法，用于检测字符串是否符合该规则，返回布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> rg <span class=\"token operator\">=</span> <span class=\"token regex\">/123/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 true</span></pre></td></tr></table></figure><h5 id=\"正则表达式构成\"><a class=\"卓越科技-\" href=\"#正则表达式构成\">#</a> 正则表达式构成:</h5>\n<p>正则表达式可以由简单的字符组成，如 /abc/ , 也可以是简单和特殊的字符组成，比如 /ab*c/ , 其中特殊字符被称为 <code>元字符</code> ，在正则表达式中是具有特殊意义的专用符号</p>\n<p>锚字符 (用来提示字符所处位置)</p>\n<table>\n<thead>\n<tr>\n<th>边界符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>^</code></td>\n<td>表示匹配行首的文本 ( <code>以谁开始</code> )</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>表示匹配行尾的文本 ( <code>以谁结束</code> )</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词的边界</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>匹配非单词边界的位置</td>\n</tr>\n<tr>\n<td><code>(?=p)</code></td>\n<td>零宽正向先行断言，要求接下来的字符都与 p 匹配，但不能包括匹配 p 的字符</td>\n</tr>\n<tr>\n<td><code>(?!p)</code></td>\n<td>零宽负向先行断言，要求接下来的字符不与 p 匹配</td>\n</tr>\n</tbody>\n</table>\n<p><code>^用法</code> :</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^abc/</span><span class=\"token punctuation\">;</span>  \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true \t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aabcd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>$用法</code> :</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg2 <span class=\"token operator\">=</span> <span class=\"token regex\">/ab$/</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ssab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>/^xxxx$/</code> : 表示精确匹配，只能是 xxxx 出现不能有其他字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span>  reg1 <span class=\"token operator\">=</span> <span class=\"token regex\">/^abc$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果是 ^xx$ 则为精确匹配，要求必须是 abc 字符串才符合规范 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true \t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false  \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aabcd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcabc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>\\b</code> :  匹配词语的边界，可以代替 \\s 实现匹配字符串前后的空格，而不用是字符串一定得有空格才能匹配</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string\">'language java'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/\\bjava\\b/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>\\B</code> : 匹配非词语边界的位置</p>\n<p>如 <code>/\\B[Ss]cript/</code>  与  <code>&quot;JavaScript&quot;</code>  和  <code>&quot;postscript&quot;</code>  匹配，但不与  <code>&quot;script&quot;</code>  和  <code>&quot;Scripting&quot;</code>  匹配</p>\n<p><code>(?=p)</code> : 正向前声明，要求接下来的字符都与模式 p 匹配，但是不包括匹配中的那些字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string\">'JavaScript:the definitive guide'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/[Jj]ava([Ss]cript)?(?=\\:)/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>(?!p)</code> : 反向前声明，要求接下来的字符不与模式 p 匹配</p>\n<h5 id=\"字符类\"><a class=\"卓越科技-\" href=\"#字符类\">#</a> 字符类</h5>\n<blockquote>\n<p>将单独的直接量字符放进方括号内就可以组成字符串类</p>\n</blockquote>\n<p>[] 用法:</p>\n<p><code>[abc]</code> : 表示只要包含有 abc 其中一个就返回 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'andy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'google'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>/^[abc]$/</code> :  三选一 只包含 a 或 b 或 c 单个字符的才返回 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aac'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>/^[a-z]$/</code> :  加了 - 号，表示 26 个英文字母返回任何一个 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'as'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>/^[a-zA-Z0-9_-]$/</code> :  26 个英文字母 (大写和小写都可以) 任何数字以及两个符号返回任何一个 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adada'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><p><code>/^[^a-zA-Z0-9_-]$/</code> : 中括号里的 ^ 为取反的意思，与边界符不同</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'adada'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h5 id=\"量词符设定某个模式出现的次数\"><a class=\"卓越科技-\" href=\"#量词符设定某个模式出现的次数\">#</a> 量词符 (设定某个模式出现的次数)</h5>\n<table>\n<thead>\n<tr>\n<th>量词</th>\n<th>量词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>零次或一次</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>重复 n 次或更多次</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>重复 n 到 m 次</td>\n</tr>\n</tbody>\n</table>\n<p>都是加在规定字符后面</p>\n<p><code>*用法</code> ：相当于 a&gt;=0 可以出现 0 次或者很多次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^a*$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只允许出现 a,a 的次数可以是 0 或者多次 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaabbbb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>+用法</code> ：相当于 &gt;=1 可以出现 1 次或者很多次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg1 <span class=\"token operator\">=</span> <span class=\"token regex\">/^a+$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只允许出现 a,a 的次数可以是 1 次或者多次 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaaaaaaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>?用法</code> ：相当于 1 | 0 只能出现 1 次或 0 次</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg2 <span class=\"token operator\">=</span> <span class=\"token regex\">/^a?$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 出现 1 次或 0 次为 true 其他为 false </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>利用？和其他重复字符可以组成非贪婪的重复</p>\n<p>例如 <code>/a+/</code>  与字符串 <code>&quot;aaa&quot;</code>  的三个都匹配，而 <code>/a+?/</code>  只与第一个 a 匹配</p>\n<p><code>&#123;x&#125;用法</code> ：相当于重复 3 次为 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg3 <span class=\"token operator\">=</span> <span class=\"token regex\">/^a&#123;3&#125;$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 重复 3 次为 true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>&#123;x,&#125;用法</code> ：相当于重复大于等于 x 次为 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg3 <span class=\"token operator\">=</span> <span class=\"token regex\">/^a&#123;3,&#125;$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a 出现大于 3 次为 true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>&#123;x,y&#125;用法</code> ：重复大于等于 3 次小于等于 y 次为 true , 输入时中间不能有空格</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg4 <span class=\"token operator\">=</span> <span class=\"token regex\">/^a&#123;3,6&#125;$/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaaaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h5 id=\"选择分组引用\"><a class=\"卓越科技-\" href=\"#选择分组引用\">#</a> 选择分组引用</h5>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>| 符号</td>\n<td>选择，匹配的是该符号左边的子表达式或者右边的子表达式</td>\n</tr>\n<tr>\n<td><code>(...)</code></td>\n<td>组合，将几个项组合成为一个单元，可通过 * + ? \\ | 等符号加以修饰，可以被引用</td>\n</tr>\n<tr>\n<td><code>(?:...)</code></td>\n<td>只组合，把项组合到一个单元，但不记忆与该组相匹配的字符，不可被引用</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>和第 n 个分组第一次匹配的字符串相匹配，组是圆括号里的子表达式，从左向右算起。不包括 (?:) 的分组</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>选择:</td>\n<td>符号</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/ab|cd|ef/</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>注意：选择项的匹配是从左到右，直到发现了匹配项。如果左边的匹配则忽略右边，即使它产生更好的匹配</p>\n<p>小括号的作用:</p>\n<ol>\n<li>\n<p>把单独的项组合成子表达式，以便可以像处理一个独立的单元那样用 | 、* 、+ 或者 ？等来对单元内的项进行处理。例如 /Java (script)?/ 可以匹配字符串 &quot;java&quot;, 其后可以有 &quot;script&quot; 也可以没有。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/Java(script)?/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Java'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Javascript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>第二个作用是引用。即允许我们在同一正则表达式后部引用前面的子表达式。通过 \\ 后面加数字实现，数字指定了带括号的子表达式在正则表达式中的位置。这个引用不是引用模式，而是引用与那个模式匹配的文本</p>\n<p>例:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> txt <span class=\"token operator\">=</span> <span class=\"token string\">'232'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/([12])[3]*\\1/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^(abc)&#123;3&#125;$/</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcabcabc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>注：不能在字符类中使用这种引用。</p>\n</li>\n</ol>\n<p>括号总结</p>\n<ol>\n<li>大括号量词符里面表示重复次数</li>\n<li>中括号字符集合。匹配方括号中的任意字符</li>\n<li>小括号表示优先级</li>\n</ol>\n<p>可以<a href=\"https//c.runoob.com/\">在线测试</a></p>\n<h5 id=\"预定义类某些常见模式的预定义类\"><a class=\"卓越科技-\" href=\"#预定义类某些常见模式的预定义类\">#</a> 预定义类 (某些常见模式的预定义类)</h5>\n<table>\n<thead>\n<tr>\n<th>预定类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配 0-9 之间的任一数字，相当于 <code>[0-9]</code></td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>匹配所有 0-9 以外的字符，相当于 <code>[^0-9]</code></td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配任意的字母、数字和下划线，相当于 <code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>除所有字母、数字和下划线以外的字符，相当于 <code>[^A-Za-20-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配空格 (包括换行符、制表符、空格符等), 相等于 <code>[\\t\\r\\n\\v\\f]</code></td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配非空格的字符，相当于 <code>[^ \\t\\r\\n\\v\\f]</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\d&#123;3&#125;-\\d&#123;8&#125; | \\d&#123;4&#125;-\\d&#123;7&#125;$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现座机号码验证</span></pre></td></tr></table></figure><p>注意：正则表达式里可以用 <code>或符号</code> ，但是符号为 <code>|</code>  而不是 <code>||</code></p>\n<h5 id=\"敏感字的替换\"><a class=\"卓越科技-\" href=\"#敏感字的替换\">#</a> 敏感字的替换</h5>\n<p><code>replace(regexp/substr,replacement)</code></p>\n<p>replace 除了可以替换字符串也可以替换正则表达式</p>\n<p><code>目标字符串.replace(/xxx/,'yy') </code>  将字符串中的 xxx 替换为 yy</p>\n<h6 id=\"参数1\"><a class=\"卓越科技-\" href=\"#参数1\">#</a> 参数 1</h6>\n<p><code>replace(/表达式/[switch],替换的内容)</code></p>\n<p>正则表达式的参数 (写在 / 后面):</p>\n<ul>\n<li>\n<p><code>g</code> : 全局匹配，可以匹配多个</p>\n</li>\n<li>\n<p><code>i</code> : 忽略大小写</p>\n</li>\n<li>\n<p><code>gi</code> : 全局匹配 + 忽略大小写</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/激情|gay/g</span><span class=\"token punctuation\">,</span><span class=\"token string\">'**'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现将文本中所有关键字替换</span></pre></td></tr></table></figure><p>注意：不能用精确匹配模式！！！！！</p>\n<h6 id=\"参数2\"><a class=\"卓越科技-\" href=\"#参数2\">#</a> 参数 2</h6>\n<p><code>$1, $2, $3, …, $n</code> : 依次匹配子表达式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> sStr<span class=\"token operator\">=</span><span class=\"token string\">'讨论一下正则表达式中的replace的用法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sStr<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(正则)(.+?)(式)/</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"《$1》$2&lt;$3>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 得到：\"讨论一下《正则》表达 & lt; 式 > 中的 replace 的用法\"</span></pre></td></tr></table></figure><p><code>函数</code></p>\n<p>先看 <code>arguments</code>  的用法：</p>\n<pre><code>var sStr='讨论一下正则表达式中的replace的用法';\nsStr.replace(/(正则).+?(式)/,function() &#123;\n    console.log(arguments);\n&#125;);\n// [&quot;正则表达式&quot;, &quot;正则&quot;, &quot;式&quot;, 4, &quot;讨论一下正则表达式中的replace的用法&quot;]\n</code></pre>\n<p><code>参数分别为:</code></p>\n<ul>\n<li>匹配到的字符串（此例为 &quot;正则表达式&quot;)</li>\n<li>如果正则使用了分组匹配就为多个否则无此参数。（此例的参数就分别为 &quot;正则&quot;, &quot;式&quot;）</li>\n<li>匹配字符串的对应索引位置（也就是 &quot;正则表达式&quot; 的索引位置，此例为 4）</li>\n<li>原始字符串</li>\n</ul>\n<h3 id=\"for-in\"><a class=\"卓越科技-\" href=\"#for-in\">#</a> for ... in</h3>\n<blockquote>\n<p><code>for...in</code>  是 ES5 标准，用来遍历对象和数组，返回 <code>键名key</code></p>\n</blockquote>\n<pre><code>// 遍历对象\nlet obj = &#123;\n  a: 1,\n  b: 2,\n  c: 3\n&#125;\nfor (let key in obj) &#123;\n  console.log(key)\n&#125;  // a  b  c\n\n// 遍历数组\nlet arr = [1, 2, 3]\nfor (let key in arr) &#123;\n  console.log(key)\n&#125;  // 0  1  2\n</code></pre>\n<h2 id=\"es6\"><a class=\"卓越科技-\" href=\"#es6\">#</a> ES6</h2>\n<h3 id=\"let-和-const\"><a class=\"卓越科技-\" href=\"#let-和-const\">#</a> let 和 const</h3>\n<h4 id=\"let\"><a class=\"卓越科技-\" href=\"#let\">#</a> let</h4>\n<blockquote>\n<p>let: 用于声明变量</p>\n</blockquote>\n<h5 id=\"特点\"><a class=\"卓越科技-\" href=\"#特点\">#</a> 特点</h5>\n<ol>\n<li>\n<p>只在块级作用域 (即 {}) 中起作用，而 var 不具备这个特点</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>没有变量提升，即必须先声明再使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure></li>\n<li>\n<p>具有暂时性死区特性</p>\n<p>在块级区域用 let 声明的变量会与该区域绑定，与区域外同名变量的使用互不影响</p>\n<p>ES6 中，在代码块内，在用 let 和 const 声明变量之前，该变量都是不可用的，不可用的区域就叫做 <code>暂时性死区</code>  (temporal dead zone,TDZ)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//TDZ 开始   </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    k <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 皆报错    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TDZ 结束 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><p>暂时性死区的本质：再进入一个代码块的时候，变量就已经存在，但是无法引用，只有 let 或者 const 声明时，才能使用</p>\n</li>\n<li>\n<p>不允许重复声明</p>\n<p>不允许在同一个作用域中重复声明同一个变量</p>\n</li>\n</ol>\n<h5 id=\"let经典面试题\"><a class=\"卓越科技-\" href=\"#let经典面试题\">#</a> let 经典面试题</h5>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502102154.png\" alt=\"img\" /></p>\n<p style=\"text-align:center;\">输出 2 2</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502102254.png\" alt=\"img\" /></p>\n<p style=\"text-align:center;\">输出 0 1</p>\n<p>区别在于 for 循环中的 i 如果是 var 声明，则为全局的。如果是 let , 则有了局部作用域，每一次循环都是一个新的 i 值</p>\n<p>注意: for 循环设置变量的部分是一个父作用域，而循环体内部是一个单独的子作用域</p>\n<p>证明:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// abc abc abc</span></pre></td></tr></table></figure><p>输出的是 3 次 abc , 说明花括号内部的作用域和循环设置内部的作用域不是同一个，如果是同一个，会因为 let 不能重复声明而报错</p>\n<h4 id=\"const\"><a class=\"卓越科技-\" href=\"#const\">#</a> const</h4>\n<blockquote>\n<p>const: 用于声明常量</p>\n</blockquote>\n<h5 id=\"特性\"><a class=\"卓越科技-\" href=\"#特性\">#</a> 特性</h5>\n<ol>\n<li>\n<p>具有块级作用域，即只在其所在中括号内生效</p>\n</li>\n<li>\n<p>const 声明的常量必须赋予初始值</p>\n</li>\n<li>\n<p>不存在变量提升</p>\n</li>\n<li>\n<p>const 赋值后，值 / 引用不能修改 (即地址不能修改), 不可重复声明</p>\n</li>\n</ol>\n<p>注意：对于简单数据类型 num ,string 等，不能修改其中的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>而对于复杂数据类型，数组等，其中的值可以修改，但不能修改这个常量的整体，因为前者不会改变地址，后者则会改变地址</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p><code>const 本质</code> : const 不是让变量的值不能改动，而是让变量指向的地址不能改动。对于值类型的数据，其值就保存在变量指向的地址中，所以无法改变，是一个常量。而对于引用数据类型，其变量指向的地址保存的不是值而是一个指针，这个指针指向堆中存放的具体值，所以复杂数据类型的具体值可以改变</p>\n<h4 id=\"总结-2\"><a class=\"卓越科技-\" href=\"#总结-2\">#</a> 总结</h4>\n<p>let , const , var 的区别</p>\n<ol>\n<li>使用 var 声明的变量，其作用域为该语句所在的明数内，存在变量提升现象。</li>\n<li>使用 let 声明的变量，其作用城为该语句所在的代码块内，不存在变量提升，</li>\n<li>使用 const 声明的是常量，在后面出现的代明中不能再修改该常量的值。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数级作用域</td>\n<td>块级作用域</td>\n<td>块级作用域</td>\n</tr>\n<tr>\n<td>变量提升</td>\n<td>不存在变量提升</td>\n<td>不存在变量提升</td>\n</tr>\n<tr>\n<td>值可更改</td>\n<td>值可更改</td>\n<td>值不可更改</td>\n</tr>\n</tbody>\n</table>\n<p>一般常量用 const , 效率比较高</p>\n<p>加上 es6 , js 一共有六种声明变量的方法:  <code>var</code>   <code>function</code>   <code>let</code>   <code>const</code>   <code>import</code>   <code>class</code></p>\n<h3 id=\"解构赋值\"><a class=\"卓越科技-\" href=\"#解构赋值\">#</a> 解构赋值</h3>\n<blockquote>\n<p>ES6 允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构，结构什么用就用对应的括号</p>\n</blockquote>\n<ul>\n<li>\n<p>数组解构 (用中括号)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ary<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>只要右边数据类型具有 Iterator 接口，就可以用数组解构</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'wwe'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// w w e</span></pre></td></tr></table></figure></li>\n<li>\n<p>允许给左边指定默认值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure></li>\n<li>\n<p>默认值生效的条件是右边对应值严格等于 (===) undefined, 否则不生效</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null 因为 null 不等于 undefined</span></pre></td></tr></table></figure></li>\n<li>\n<p>允许把默认值设为函数，但是函数执行的条件是右边对应位置没有赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">=</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// aaa </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>k<span class=\"token operator\">=</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure></li>\n<li>\n<p>默认值也可以引用解构赋值中的其他变量，但是前提是该变量已经声明</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 1 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1 2 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>m <span class=\"token operator\">=</span> n<span class=\"token punctuation\">,</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// n is not defined</span></pre></td></tr></table></figure><p>总之，只要记住数组解构的顺序是从左到右，先默认，再赋值</p>\n</li>\n</ul>\n<h4 id=\"对象解构用大括号\"><a class=\"卓越科技-\" href=\"#对象解构用大括号\">#</a> 对象解构 (用大括号)</h4>\n<p><code>第一种方式</code> :</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span>sex<span class=\"token operator\">:</span><span class=\"token string\">'nan'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// list </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//nan</span></pre></td></tr></table></figure><p>注意: let 的属性名必须和对象中的属性名一样，本质是下面的简写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span>name<span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span>age<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>第二种方式</code> :</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span>myName<span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span>myAge<span class=\"token punctuation\">,</span>sex<span class=\"token operator\">:</span>mySex<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mySex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意: let 中属性名后的值可以任意命名，myName 可以改为其他</p>\n<p>本质：对象解构本质上只有第二种方式，第一种只是简写了。其内部机制是先找到同名属性，再赋值给属性中的变量。前者只是个名字，用于匹配。后者才是接收值的变量。所以对象解构赋值中属性名顺序不一定要与右边对象属性名顺序一致</p>\n<p><code>也可以嵌解构赋值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    p<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>y<span class=\"token operator\">:</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>p<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>y<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>对象解构也可以赋予默认值,生效条件与数组的一致</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b<span class=\"token operator\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span></pre></td></tr></table></figure><p><code>使用对象解构,如果右边是基本数据类型,则将其转为包装类型,可以用同名属性获取其中内置的方法属性</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>length<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token string\">'heihei'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>__proto__<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;&#125;</span></pre></td></tr></table></figure><p><code>结构赋值右侧的数组所包含的元素不必和左侧的变量一一对应。左侧多余的变量的赋值为 undefined ,而右侧多于的值则会忽略。左侧的变量列表可以包含连续的逗号用以跳过右侧对应的值.此外解构赋值也适用于数组嵌套的情况,但是格式应当相同</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左边对于右边</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// undefined </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 右边多于左边 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 逗号跳过</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组嵌套 </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr></table></figure><h4 id=\"函数参数的解构赋值\"><a class=\"卓越科技-\" href=\"#函数参数的解构赋值\">#</a> 函数参数的解构赋值</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Obj</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Obj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"扩展运算符变量\"><a class=\"卓越科技-\" href=\"#扩展运算符变量\">#</a> 扩展运算符 (... 变量)</h3>\n<blockquote>\n<p>可以将数组、Map 、Set、元素集合、arguments、字符串等具有 Iterator 接口的可遍历数据结构转换成逗号分隔的形式，可应用于形参或数组合并中</p>\n</blockquote>\n<p>也可以将数组转变为非数组形式</p>\n<ol>\n<li>\n<p>应用于函数中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组合并</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法 1:  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ary1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> ary2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> ary3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>ary1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>ary2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ary3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 方法 2:  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ary1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>ary2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ary1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将伪数组转换成真正的数组</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    divs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>divs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divs <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>将数组转为非数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1 2 3</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"es6新增方法\"><a class=\"卓越科技-\" href=\"#es6新增方法\">#</a> ES6 新增方法</h3>\n<h4 id=\"数组方法\"><a class=\"卓越科技-\" href=\"#数组方法\">#</a> 数组方法</h4>\n<h5 id=\"es5新增数组方法\"><a class=\"卓越科技-\" href=\"#es5新增数组方法\">#</a> ES5 新增数组方法</h5>\n<ul>\n<li>\n<p><code>数组.forEach(function(currentValue,index,arr)&#123;&#125;)</code></p>\n<p><code>value</code> : 为数组的值</p>\n<p><code>index</code> : 为索引值</p>\n<p><code>arr</code> : 为数组本身</p>\n<p>实现数组、伪数组、set 数据的遍历</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    sum <span class=\"token operator\">+=</span> value<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>数组.filter(function(currentValue,index,arr)&#123;&#125;)</code></p>\n<p>实现数组中满足某条件的数值的筛选，返回一个 <code>新数组</code></p>\n<p>参数值同 forEach</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">88</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// return value >= 20; </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实现筛选偶数 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>数组.some(function(currentValue,index,arr)&#123;&#125;)</code></p>\n<p>用于查找数组是否有满足条件的数值</p>\n<p>返回的是布尔值，如果有满足条件的值就返回 true , 否则为 false</p>\n<p><code>当查找到第一个满足条件的数值时就停止查找,退出函数</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// return value > 20; </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> flag1 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>some 和其他两个区别: 利用 return true 可以使 some 停止迭代,forEach和filter不可以</code></p>\n</li>\n<li>\n<p><code>数组.every(function(currentValue,index,arr), thisValue)</code></p>\n<p>用于检测数组所有元素是否都符合指定条件（通过函数提供）、在判断是否全选中好用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查 ages 数组中的所有值是否为 18 或更高：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> ages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">checkAdult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> ages<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>checkAdult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"es6新增数组方法\"><a class=\"卓越科技-\" href=\"#es6新增数组方法\">#</a> ES6 新增数组方法</h5>\n<ul>\n<li>\n<p><code>Array.of()</code> : 与 Array () 构造数组，区别在于对于单个整数参数，前者返回一个第一个值为参数值的数组，后者返回一个长度等于参数值的空数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [7] [,,,,,,]</span></pre></td></tr></table></figure></li>\n<li>\n<p>Array.from 方法 (Array.from 方法从一个类似数组 (既具有 length 属性) 或可迭代对象 (对象、字符串) 中创建一个新的，浅拷贝的数组实例)</p>\n<p><code>Array.from(目标对象,函数)</code></p>\n<p><code>转换对象</code> 时，对象里面的属性名应有双引号且必须是整数， <code>一定要有length属性</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ls\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"ww\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"length\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span> <span class=\"token comment\">// 一定要有 length 属性 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['zs','ls','ww']</span></pre></td></tr></table></figure><p><code>转换伪数组</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> weishuzu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>weishuzu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>转换字符串</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1,2,3]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Array.from</code> : 中的函数用于对每个值进行操作</p>\n<p>方法还可以接受第二个参数， 作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arrayLike2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"0\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"length\"</span><span class=\"token operator\">:</span><span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> newary  <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike2<span class=\"token punctuation\">,</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所以将数据转为对象有两种方法:</p>\n<ol>\n<li>\n<p>使用 <code>扩展运算符</code></p>\n</li>\n<li>\n<p>使用  <code>Array.from</code>  区别在于前者无法转换对象，后者可以</p>\n</li>\n</ol>\n</li>\n<li>\n<p>数组.find</p>\n<p><code>array.find(function(item,index) &#123;&#125;)</code> :  返回符合函数中条件的 <code>第一个数值</code> ，item 是数组的每个值，index 为其对应的索引值，没有返回 undefined</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span><span class=\"token string\">'zhangsan'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span><span class=\"token string\">'ls'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> ary<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组.findIndex</p>\n<p><code>array.findIndex(function(value,index)&#123;&#125; )</code> :  find  <code>返回第一个</code> 符合条件的数值的索引值，value 为值，index 为其索引值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ary1 <span class=\"token operator\">=</span> ary<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ary1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组.includes</p>\n<p><code>array.includes(目标值)</code> : 返回的是布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组.copyWithin 复制数组制定成员内容到数组内其他位置</p>\n<p><code>array.copyWithin(替换的目标的起始位置,替换内容的起始位置,替换内容的结束位置(不包括该位置))</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr3<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,3,4,5,8]</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组.fill 用给定内容替换数组内容</p>\n<p><code>array.fill(替换内容,替换开始位置,替换结束位置(不包括))</code> : 默认全部替换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [a,a,a,a] </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [a,a,a] </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,1,1,4,5,8]</span></pre></td></tr></table></figure></li>\n<li>\n<p>reduce 迭代 直接从第二项开始迭代</p>\n<p><code>参数1:上一次迭代return的值 </code></p>\n<p><code>参数2: 当前值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> arr4<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// console.log(prev); </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2 3 4 5 6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 21</span></pre></td></tr></table></figure></li>\n<li>\n<p>reduceRight 跟 reduce 一样 但是是从右边开始</p>\n</li>\n<li>\n<p>keys 用于  <code>for...of...</code>  遍历数组每一项的 <code>索引值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> arr6<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2 3 4 5 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>values 用于  <code>for...of...</code>  遍历数组每一项的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3 4 5 6  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>entries 用于  <code>for...of...</code>  遍历数组每一项键值对 返回数值形式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> arr6<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0,1] [1,2] [2,3] [3,4] [4,5] [5,6] </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>注意：所有数组方法的结束位置参数都是不包括在内 即顾前不顾后</p>\n</li>\n</ul>\n<h3 id=\"字符串扩展\"><a class=\"卓越科技-\" href=\"#字符串扩展\">#</a> 字符串扩展</h3>\n<h4 id=\"模板字符串\"><a class=\"卓越科技-\" href=\"#模板字符串\">#</a> 模板字符串</h4>\n<blockquote>\n<p>利用反引号 `` 定义字符串</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">woshizykj</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特点:</p>\n<ol>\n<li>\n<p>可以解析变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">zykj</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> sayHello <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sayHello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可以空行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span><span class=\"token string\">'zd'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span><span class=\"token number\">18</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;div> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     &lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     &lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;/div> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>可以调用函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'我是fn函数'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> html1 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我是模板字符串 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 我是模板字符串 我是 fn 函数 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>html1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>注意：调用外部变量和函数必须用 ${} , {} 中可以放入任意 js 表达式</p>\n<p><code>String.raw</code>  用来将模板字符串转义 (包括变量)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>str<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// helloworld</span></pre></td></tr></table></figure><h4 id=\"三种确定字符串是否包含另外一个字符串方法\"><a class=\"卓越科技-\" href=\"#三种确定字符串是否包含另外一个字符串方法\">#</a> 三种确定字符串是否包含另外一个字符串方法</h4>\n<blockquote>\n<p>ES6 提供了 三种新的用来确定一个字符串是否包含了另外一个字符串的方法 (原先只有 indexOf) : startsWith、endsWith、includes</p>\n</blockquote>\n<p>判断字符串开头结尾</p>\n<p><code>字符串.startsWith('xxx');</code>  : 判断 str 字符串是否以 xxx 开头</p>\n<p><code>字符串.endsWith('xxx'); </code> : 判断 str 字符串是否以 xxx 结尾</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello myworld'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//startsWith 判断字符串是否以某字符串开头 返回布尔值 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'he'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//endsWith 判断字符串是否以某字符串结尾 返回布尔值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>string.includes(查找字符,开始查找的位置)</code> : 判断字符串是否有某个字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>以上三种方法都接受第二个参数，表示开始搜索的位置</p>\n<h4 id=\"重复某个字符串\"><a class=\"卓越科技-\" href=\"#重复某个字符串\">#</a> 重复某个字符串</h4>\n<blockquote>\n<p>返回新的字符串</p>\n</blockquote>\n<p><code>字符串.repeat(n)</code> : 将字符串 str 重复 n 次，返回新的，不改变旧的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str1 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"字符串补全\"><a class=\"卓越科技-\" href=\"#字符串补全\">#</a> 字符串补全</h4>\n<p><code>padStart(补全后长度,补全的字符串)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str  <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// abxxx</span></pre></td></tr></table></figure><p><code>padEnd(补全后长度,补全的字符串)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// xxxabb</span></pre></td></tr></table></figure><p>若第一个参数小于原字符串长度，则返回原字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abbaaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// xxx</span></pre></td></tr></table></figure><p>若补全的字符串长度加上原字符串长度大于第一个参数，则会截除补全后的字符串多余的部分</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'abbaaaaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token comment\">// xxxabb</span></pre></td></tr></table></figure><h3 id=\"数值的扩展\"><a class=\"卓越科技-\" href=\"#数值的扩展\">#</a> 数值的扩展</h3>\n<blockquote>\n<p>ES6 提供了二进制和八进制的新写法</p>\n</blockquote>\n<ul>\n<li>\n<p>二进制: 0b (0B) 开头</p>\n</li>\n<li>\n<p>八进制: 0o (0O) 开头</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0o767</span> <span class=\"token operator\">===</span> <span class=\"token number\">503</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b011</span> <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>如果要将改写法的二进制和八进制转为十进制，则要调用 Number 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">0o767</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 503</span></pre></td></tr></table></figure><blockquote>\n<p>Number.isFinite()、Number.isNaN()</p>\n</blockquote>\n<p><code>Number.isFinite</code> : 判断一个数值是否是有限的</p>\n<p><code>Number.isNaN</code> : 判断一个值是否是 NaN</p>\n<p>这两个方法与传统的全局方法在于：传统方法会先将非数值转为数值在进行判断。而新方法只对数值有效，对于非数值一律返回 false</p>\n<p>ES6 还将 <code>parseInt</code>  和 <code>parseFloat</code>  移植到了 Number 对象上面，行为保持不变</p>\n<p><code>Number.isInteger()</code> :  判断一个数值是否是整数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>注意: js 中 1 和 1.0 都是同样的存储方式，所以被视为同一个值</p>\n<h3 id=\"函数的扩展\"><a class=\"卓越科技-\" href=\"#函数的扩展\">#</a> 函数的扩展</h3>\n<h4 id=\"函数参数设置默认值\"><a class=\"卓越科技-\" href=\"#函数参数设置默认值\">#</a> 函数参数设置默认值</h4>\n<p><code>function xx(arg1=xx,arg2=yy,...)&#123;&#125; </code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> star <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>star<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：参数默认值是不传值的，每次调用都会重新计算默认值。一旦设置了默认值，函数进行声明初始化时，参数列表会形成一个作用域。</p>\n<br>\n<p>可以解构赋值默认值配合使用</p>\n<p>第一种:  <code>只有赋值结构有默认值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 5 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5 6</span></pre></td></tr></table></figure><p>第二种:  <code>参数和赋值结构都有默认值</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined 5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 5 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 10</span></pre></td></tr></table></figure><h4 id=\"函数的length\"><a class=\"卓越科技-\" href=\"#函数的length\">#</a> 函数的 length</h4>\n<p>函数参数如果指定了默认值，那么函数的参数只会计算第一个指定了默认值的参数前面的参数个数，第一个指定了默认值的参数及其后面的参数 (不管有没有指定默认值) 都不计入 length 属性中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h4 id=\"rest参数\"><a class=\"卓越科技-\" href=\"#rest参数\">#</a> rest 参数</h4>\n<p>用于获取函数多余的参数，形式为... 变量名，变量名代表的是一个数组变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2,3,4]</span></pre></td></tr></table></figure><h5 id=\"注意\"><a class=\"卓越科技-\" href=\"#注意\">#</a> 注意</h5>\n<blockquote>\n<p>rest 参数必须是最后一个参数。函数的 length 不包括 rest 参数</p>\n</blockquote>\n<p>name 属性</p>\n<p>函数的 name 属性返回函数的名字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Big</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'Big'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Big<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Big</span></pre></td></tr></table></figure><h4 id=\"箭头函数\"><a class=\"卓越科技-\" href=\"#箭头函数\">#</a> 箭头函数</h4>\n<p><code>(参数1,参数2...) =&gt; &#123;函数体&#125;</code></p>\n<h5 id=\"特性-2\"><a class=\"卓越科技-\" href=\"#特性-2\">#</a> 特性</h5>\n<ol>\n<li>\n<p>如果函数体只有一句代码，且代码的执行结果就是函数的返回值，函数体大括号可以省略</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>箭头函数中，如果形参只有一个，形参外侧的小括号可以省略</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span>  <span class=\"token operator\">=</span> <span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>箭头函数不绑定 this 关键字,箭头函数中的 this 指向的是函数定义位置所在的对象中的(即箭头函数定义时所在花括号的外层的 this 的指向)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 window fun (); </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回 window</span></pre></td></tr></table></figure><p>解析：因为 fun () 的函数体是在 fn () 中定义，所以其中的 this 即为 fn 中的 this, 也就是通过 call 设定的 obj, 所以输出值不是 fun 而是 obj</p>\n</li>\n<li>\n<p>箭头函数里没有 arguments 对象 用 rest 参数代替</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>箭头函数不能做构造函数 不能 new 调用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>箭头函数主要用于具名函数的声明和简化回调函数</p>\n</li>\n</ol>\n<h5 id=\"箭头函数面试题\"><a class=\"卓越科技-\" href=\"#箭头函数面试题\">#</a> 箭头函数面试题</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></pre></td></tr></table></figure><p>解析：因为 say 函数定义在 obj 中，而 obj 是个对象，不形成作用域，所以 say 的指向为 window</p>\n<h3 id=\"对象扩展\"><a class=\"卓越科技-\" href=\"#对象扩展\">#</a> 对象扩展</h3>\n<h4 id=\"对象的简写赋值\"><a class=\"卓越科技-\" href=\"#对象的简写赋值\">#</a> 对象的简写赋值</h4>\n<p>可以直接将函数声明、变量写进对象中，属性名即为变量名，属性值即为该变量的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'bruce'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 简写赋值 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>school<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>school<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'bruce' 20</span></pre></td></tr></table></figure><h4 id=\"对象里用变量表示属性名\"><a class=\"卓越科技-\" href=\"#对象里用变量表示属性名\">#</a> 对象里用变量表示属性名</h4>\n<p>属性名使用 [] 里面就可以使用变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// bruce</span></pre></td></tr></table></figure><h4 id=\"objectassign\"><a class=\"卓越科技-\" href=\"#objectassign\">#</a> Object.assign</h4>\n<blockquote>\n<p>将源对象所有可枚举属性复制到目标对象 (浅拷贝)</p>\n</blockquote>\n<p><code>Object.assign(target,sources...)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj4 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">,</span>obj3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>可以利用该方法实现浅拷贝</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj6 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">,</span>obj4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj6<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>深拷贝</code> ：拷贝多层，每一级别的数据都会重新开辟地址拷贝</p>\n<p>拷贝方法：利用递归函数</p>\n<p>利用 for in 和 递归函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepcopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newobj<span class=\"token punctuation\">,</span>oldobj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> oldobj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> oldobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 判断是否是数组 \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            newobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">deepcopy</span><span class=\"token punctuation\">(</span>newobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            newobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">deepcopy</span><span class=\"token punctuation\">(</span>newobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            newobj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：因为数组也是对象，所以要放在对象之前</p>\n<h4 id=\"对象也可以使用扩展运算符\"><a class=\"卓越科技-\" href=\"#对象也可以使用扩展运算符\">#</a> 对象也可以使用扩展运算符</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj11 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'clark'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj22 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>age<span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> obj33 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj11<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>obj22<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj33<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;name:'clark',age:20&#125;</span></pre></td></tr></table></figure><h4 id=\"方法\"><a class=\"卓越科技-\" href=\"#方法\">#</a> 方法</h4>\n<ul>\n<li>\n<p><code>Object.defineProperty(目标对象,'修改的属性',descriptor)</code></p>\n<p>其中 descriptor 以对象形式 {} 说明，包括了</p>\n<p><code>value</code> : 设置属性的值</p>\n<p><code>writable</code> : 值是否可以重写 true | false 默认为 false</p>\n<p><code>enumerable</code> : 目标属性是否可以被遍历   true | false 默认为 false</p>\n<p><code>configurable</code> : 目标属性是否可以被删除或是否可以再次修改特性  true | false 默认为 false</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    id <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pname <span class=\"token operator\">:</span> <span class=\"token string\">'xiaomi'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    price <span class=\"token operator\">:</span> <span class=\"token number\">1999</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 修改添加对象的属性 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'num'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    value<span class=\"token operator\">:</span> <span class=\"token number\">1000</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    value<span class=\"token operator\">:</span> <span class=\"token number\">9.9</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    writable<span class=\"token operator\">:</span><span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：一开始就设置的好的属性如果没有利用该方法就不会被影响。只能修改已有属性或者新建自有属性，但不能修改继承属性</p>\n</li>\n<li>\n<p><code>Object.getOwnPropertyDescriptor(对象名,对象属性名)</code> : 返回某个对象特定属性的属性描述符)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    num <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        num1 <span class=\"token operator\">:</span> <span class=\"token number\">2</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Object.keys(对象名)</code></p>\n<p>获取对象的所有可枚举的自有属性属性名 **,** 以数组形式返回</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// console.log(arr); </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>与 for (var k in obj){} 的区别在于后者返回字符串 前者返回数组</p>\n</li>\n<li>\n<p><code>Object.values 返回对象的属性值 数组形式</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['bruce']</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Object.entries 返回对象的属性和值  二维数组形式</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [['name','bruce']]</span></pre></td></tr></table></figure></li>\n</ul>\n<p>对象的解构赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>z<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;a:3,b:4&#125;</span></pre></td></tr></table></figure><p>对象的扩展运算符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>obj<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;x:1,y:2&#125;</span></pre></td></tr></table></figure><h3 id=\"set数据结构\"><a class=\"卓越科技-\" href=\"#set数据结构\">#</a> Set 数据结构</h3>\n<blockquote>\n<p>类似于数组，但是会自动消除重复的数据，适用于搜索引擎。即成员的值都是唯一的，没有 key 没有索引 无法通过索引获取</p>\n</blockquote>\n<h4 id=\"set数据结构的创建\"><a class=\"卓越科技-\" href=\"#set数据结构的创建\">#</a> Set 数据结构的创建</h4>\n<p><code>new Set()</code> ;</p>\n<p>参数必须是数组或者是类数组或者是有 iterable 接口</p>\n<p>有 iterable 接口：数组 arguments DOM 元素集合 set Map 字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr></table></figure><p>可以利用 Set 数据结构对数组去重</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"set数据结构方法\"><a class=\"卓越科技-\" href=\"#set数据结构方法\">#</a> Set 数据结构方法</h4>\n<ul>\n<li>\n<p><code>set.size</code> : 返回实例的值个数</p>\n</li>\n<li>\n<p><code>set.add(value)</code> : 添加某个值 返回 Set 解构本身</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>set.delete(value)</code> : 删除某个值 返回布尔值显示删除是否成功</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> r1 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>set.has()</code> : 判断是否存在某个值 返回布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> r2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>set.clear()</code> : 删除全部数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"遍历set数据结构\"><a class=\"卓越科技-\" href=\"#遍历set数据结构\">#</a> 遍历 Set 数据结构</h4>\n<blockquote>\n<p>利用 forEach 函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Set 实例也有 keys、values、entries 方法，由于 Set 数据类型没有索引，所以 keys 和 values 返回的是同样的值</p>\n<h4 id=\"weakset\"><a class=\"卓越科技-\" href=\"#weakset\">#</a> WeakSet</h4>\n<p>与 Set 数据类型相同，也是不重复的值的集合。但是与 Set 有两个区别:</p>\n<ol>\n<li>\n<p>WeakSet 的成员必须是对象类型的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure></li>\n<li>\n<p>WeakSet 的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，而是会继续回收该对象</p>\n<p>垃圾回收机制依赖引用计数，当一个数值的引用次数不为 0, 就无法被回收。结束该值的使用后，有时会忘记取消引用，导致该对象之前所占内存无法释放，进而可能引发内存泄漏。而 WeakSet 的引用都不计入垃圾回收机制，所以就不存在这个问题。由于这些特点，WeakSet 无法遍历也没有 size 属性，因为其成员随时可能消失。</p>\n</li>\n</ol>\n<h3 id=\"symbol数据类型\"><a class=\"卓越科技-\" href=\"#symbol数据类型\">#</a> Symbol 数据类型</h3>\n<blockquote>\n<p>是一个基本数据类型 表示独一无二的值</p>\n</blockquote>\n<p>通过 <code>Symbol()</code>  方法直接创造 Symbol 类型值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：不能用 new 调用，因为 Symbol 是一个基本数据类型而不是函数</p>\n<br>\n<p>Symbol 函数可接受一个参数 用以描述当前 Symbol 值 (相当于一个键值)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> sym3 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> sym4 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sym3 <span class=\"token operator\">===</span> sym4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><br>\n<p>Symbol 不可以进行数值运算，但是可以转为字符串和布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//console.log (Symbol (3) +1); 错误</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//console.log (Symbol ('1') + 'bruce') 错误</span></pre></td></tr></table></figure><br>\n<p><code>Symbol.for(参数)</code> : 根据描述寻找对应值 如果之前有相同参数的 Symbol 值，则返回这个值，否则则创建一个新的 Symbol</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> zf1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhufeng'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> zf2 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhufeng'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zf1 <span class=\"token operator\">===</span> zf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>Symbol.keyFor(Symbol值)</code> : 返回 Symbol.for 找到或创造的 Symbol 值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">keyFor</span><span class=\"token punctuation\">(</span>zf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用途: Symbol 数据类型主要用于属性名，防止对象内属性名的冲突</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>sym1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>sym2<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">'clark'</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>sym1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>sym2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>obj<span class=\"token punctuation\">[</span>sym3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'diana'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意: Symbol 做为属性名时，不会出现在 <code>for in</code>   <code>for of</code>   <code>Object.keys</code>   <code>Object.getOwnPropertyNames</code></p>\n<h3 id=\"map数据类型\"><a class=\"卓越科技-\" href=\"#map数据类型\">#</a> Map 数据类型</h3>\n<blockquote>\n<p>一个构造函数，代表了键值对的集合，键的范围包括各种类型的值而不局限于字符串</p>\n</blockquote>\n<h4 id=\"创建实例-2\"><a class=\"卓越科技-\" href=\"#创建实例-2\">#</a> 创建实例</h4>\n<p><code>new Map([[key1,value1],[key2,value2],...])</code> : 参数是一个二维数组，每一项内嵌数组里有 key 和对应的映射值 value</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> map1 <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhufeng'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>属性名不能重复，因为是映射关系，一个值只能映射一个值</li>\n</ol>\n<h4 id=\"方法-2\"><a class=\"卓越科技-\" href=\"#方法-2\">#</a> 方法</h4>\n<p><code>属性.size</code> : 映射对的个数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr></table></figure><p><code>map.get(key)</code> : 获取 key 键的映射值，key 值不用转为字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sz </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> bol <span class=\"token operator\">=</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>map.set(key,value)</code> : 给键 key 设置值 value</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hz</span></pre></td></tr></table></figure><p><code>map.has(key)</code> : 判断 key 键有没有对应的 value 值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><code>map.delete(key)</code> : 删除 key 键 返回布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map2<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p><code>map2.forEach((value,index,input) =&gt; &#123;&#125;)</code> :  遍历 map 数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map2<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>map.clear()</code> :  清空所有映射</p>\n<p><code>map.keys()</code> :  获取键值 用于遍历</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>map.values()</code> : 获取映射值 用于遍历</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>map.entries()</code> : 获取映射对</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">of</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"weakmap\"><a class=\"卓越科技-\" href=\"#weakmap\">#</a> WeakMap</h4>\n<p>与 Map 基本相同，但有两个区别:</p>\n<ol>\n<li>\n<p>键名只能用对象</p>\n</li>\n<li>\n<p>键名所指向的对象不计入垃圾回收机制</p>\n</li>\n</ol>\n<p>由于这些特性，WeakMap 数据同样没有 size 属性也无法遍历</p>\n<p>注意: WeakMap 弱引用的只是键名而不是键值。</p>\n<h3 id=\"proxy\"><a class=\"卓越科技-\" href=\"#proxy\">#</a> Proxy</h3>\n<blockquote>\n<p>用于代理对象，拦截 / 改写对对象的操作</p>\n</blockquote>\n<h4 id=\"创建实例-3\"><a class=\"卓越科技-\" href=\"#创建实例-3\">#</a> 创建实例</h4>\n<p><code>new Proxy(target,handler)</code> :</p>\n<p>第一个参数：代理的对象也可以是函数</p>\n<p>第二个参数：配置对象，对于每一个拦截的操作，都需要提供一个对应的处理函数，该函数将拦截对应的操作</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> proxy1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>proxy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'haha'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：必须是对 Proxy 实例操作其代理的对象才能执行拦截的函数</p>\n<h4 id=\"proxy拦截对象操作\"><a class=\"卓越科技-\" href=\"#proxy拦截对象操作\">#</a> Proxy 拦截对象操作</h4>\n<p>get: 用于拦截对对象属性值的读取，三个参数</p>\n<p>参数:</p>\n<p><code>target</code> : 原对象</p>\n<p><code>propKey</code>  : 读取的属性名</p>\n<p><code>receiver</code>  : 调用的 proxy 对象</p>\n<p>利用 get 拦截操作实现数组读取负数索引</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>prop<span class=\"token punctuation\">,</span>receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr/>\n<p>set: 用于拦截对对象属性值的值的设置，四个参数</p>\n<p>参数:</p>\n<p><code>target</code> : 原对象</p>\n<p><code>propKey</code> : 读取的属性名</p>\n<p><code>value</code> : 设置的值</p>\n<p><code>receiver</code> : 调用的 proxy 对象</p>\n<p>set 实现属性设置的限制</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">20</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>propKey<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>receiver</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>propKey <span class=\"token operator\">===</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exceed the limit!'</span><span class=\"token punctuation\">)</span> \t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                target<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>proxy<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span></pre></td></tr></table></figure><hr/>\n<p>has: 拦截 in 运算符</p>\n<p>参数:</p>\n<p><code>target</code> : 原对象</p>\n<p><code>propKey</code>  : 读取的属性名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'zhufeng'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> proxy1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>propKey<span class=\"token punctuation\">,</span>receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//target: 原对象 \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Propkey: 获取的属性名 \t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//receiver 当前 Proxy 实例 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>propKey<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>receiver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//target: 原对象 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// Propkey: 获取的属性名 </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//value: 设置的值 \t</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//receiver 当前 Proxy 实例 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'set'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        target<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//has 拦截 in 运算符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>propKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// console.log('yes'); </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> propKey <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// zhufeng </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>proxy1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'haha'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// haha </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span> <span class=\"token keyword\">in</span> proxy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h4 id=\"proxy拦截函数操作\"><a class=\"卓越科技-\" href=\"#proxy拦截函数操作\">#</a> Proxy 拦截函数操作</h4>\n<p>apply: 用于拦截函数的执行，三个参数</p>\n<p>参数:</p>\n<p><code>target</code>  : 原函数</p>\n<p><code>object</code>  : 函数中 this 指向</p>\n<p><code>args</code>  : 参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> proxy2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>getObj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 拦截函数执行 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>object<span class=\"token punctuation\">,</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//target: 原函数 \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//args: 传入的参数 数组形式 \t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//obejct: 修改函数 this 指向 \t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            object<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            object<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">delete</span> object<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">target</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">proxy2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// function [] undefined NaN </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">proxy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// function [1,2] undefiend 3 </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">proxy2</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'bruce'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// function [1,2]  &#123;name:'bruce'&#125; 3</span></pre></td></tr></table></figure><h3 id=\"promise\"><a class=\"卓越科技-\" href=\"#promise\">#</a> Promise</h3>\n<div class=\"note info\">\n<p>视频教程:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTU3NDExNzdFaD9wPTEyNQ==\">Promise 的介绍和使用</span> 、 文章教程: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3ODYwOTYzL2FydGljbGUvZGV0YWlscy84MTUzOTExOA==\">怎么理解 JS Promise</span></p>\n</div>\n<blockquote>\n<p>用于处理异步函数的执行顺序、主要用于 <code>网络请求</code></p>\n</blockquote>\n<h4 id=\"基础\"><a class=\"卓越科技-\" href=\"#基础\">#</a> 基础</h4>\n<p>Promise 是一个容器，一个对象，里面存放着异步事件，里面的异步事件有三种状态:</p>\n<ul>\n<li><code>pending (进行中)</code></li>\n<li><code>fulfilled (已成功)</code></li>\n<li><code>rejected (已失败)</code></li>\n</ul>\n<p>Promise 容器可以获取根据异步事件的结果将其转为完成状态或失败状态，并将事件结果传送出去</p>\n<p>Promise 对象的特点:</p>\n<ul>\n<li>\n<p>对象的状态不受外界影响，只要异步操作的结果可以决定是哪一种状态</p>\n</li>\n<li>\n<p>一旦状态改变就不会再变，会一直保持这个状态，成为 Resolved</p>\n</li>\n</ul>\n<p>步骤:</p>\n<ol>\n<li>\n<p>创建 promise 容器：即创建一个承诺变量 里面封装了异步任务 会自动调用</p>\n<p>promise 本身不是异步</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 如果失败 \t\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// console.log(err); \t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 调用 reject 将容器的状态由 pending 改为 Rejected、然后执行 catch\t\t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 如果成功 \t\t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// console.log(data); \t\t</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 调用 resolve 将容器的状态由 pending 改为 Resolved、然后执行 then \t</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//resolve (data); 会执行到这里</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//reject (err); 会执行到这里</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>设置承诺了之后调用  <code>then</code>  方法</p>\n<p>设置承诺里面回调函数的  <code>resolve/reject</code>  事件:</p>\n<ul>\n<li>参数 1 就是上面的函数  <code>resolved</code></li>\n<li>参数 2 就是函数  <code>rejected</code>  这里是在设置  <code>resolve</code>  和  <code>reject</code>  的具体函数</li>\n</ul>\n<p>在  <code>resolve</code>  里面最后要 return 接下去要执行的异步事件所在的 Promise 对象实例，形成链式编程，实现顺序执行</p>\n<pre><code class=\"language-javascript\"></code></pre>\n</li>\n</ol>\n<p>p1.then((data) =&gt; &#123;<br />\nconsole.log(data);<br />\n//return 一个 Promise 对象进行设置 链式编程<br />\n return p2;<br />\n&#125;,(err) =&gt; &#123;<br />\nconsole.log('failed');<br />\n&#125;).then((data) =&gt; &#123;<br />\n// 这是定义 p2 的 resolved<br />\nconsole.log(data + 'haha');<br />\nreturn p3;<br />\n&#125;,(err) =&gt; &#123;<br />\n// 这是定义 p2 的 reject<br />\nconsole.log(err);<br />\n&#125;)</p>\n<pre><code>\n注意:\n\n1. 即先创造保证,再设置异步事件完成后具体做什么\n\n2. 实现同步输出的原理就是: new Promise 是同步的,里面的函数依旧是异步的,所以继续往下进行 resolved 和 reject 函数的定义,第一个定义的 promise 的异步函数执行完后,会调用 resolved 或者 reject 函数,所以会找到定义之处进行执行,由于另外一个 promise 的 resolved 和 reject 是在第一个定义之后 return 出来再定义的,所以这个 promise 只能在第一个 promise 执行之后再定义,所以其 reject 和 resolve 函数也只能在其之后调用,依次递归形成同步\n\n3. then 方法只有在当前脚本所有同步任务执行完毕后才会执行\n\n4. resolve 函数只能有一个参数\n\n&lt;hr/&gt;\n\n- `catch方法`: 捕获 promise 实例和 then 中 resolve 的错误 一般会在最后使用 catch\n\n```javascript\npro1.then((mes) =&gt; &#123; \n   console.log(mes); \n   let a1 = 2; \n&#125;).catch((e) =&gt; &#123; \n   console.log(e); \n&#125;)\n</code></pre>\n<ul>\n<li>\n<p><code>Promise.all()</code> : 用于将多个 promise 实例整合成一个 promise 实例 参数为数组形式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> pro2 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>整合的实例的状态有两种情况:</p>\n<ol>\n<li>p1 , p2 , p3 的状态都为 fulfilled,p 才为 fulfilled。此时 p1 , p2 , p3 的结果组成一个数组，传递给 p 的回调函数</li>\n<li>只要 p1 , p2 , p3 中有一个进入 rejected 状态，p 就会进入 rejected 状态。此时第一个进入 rejected 的子实例的结果就会传给 p 的回调函数</li>\n</ol>\n</li>\n<li>\n<p>执行错误则停止执行并通过 catch 方法输出</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pro2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['OK1','OK2','OK3']</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Promsie.race()</code> : 与 all 方法类似，但只会输出第一个执行成功的回调函数的 resolve 的结果</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'OK1'</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"mongoose-中使用-promise\"><a class=\"卓越科技-\" href=\"#mongoose-中使用-promise\">#</a> mongoose 中使用 promise</h4>\n<p>mongoose 中已经包装了 promise , 数据库操作事件后面可以直接调用 then 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>author<span class=\"token operator\">:</span><span class=\"token string\">'clark'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户已存在'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            author<span class=\"token operator\">:</span><span class=\"token string\">'clark'</span><span class=\"token punctuation\">,</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            title<span class=\"token operator\">:</span><span class=\"token string\">'wonder woman'</span><span class=\"token punctuation\">,</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            body<span class=\"token operator\">:</span><span class=\"token string\">'prinecss'</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"async函数和await\"><a class=\"卓越科技-\" href=\"#async函数和await\">#</a> async 函数和 await</h3>\n<blockquote>\n<p>Generator 函数的语法糖，加在函数声明前方，async 函数返回一个 Promise 对象</p>\n</blockquote>\n<p>async 函数可以看做由多个 promise 包装成的 Promise 对象，await 则是内部 promise 的 then 命令的语法糖</p>\n<p>async 即把其后面的函数包装成一个 promise 对象，可以使用 then 方法添加回调函数。async 函数内 return 的值会作为 then 方法回调函数的参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'i am a async function!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'i am a async function!' </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当 async 遇到 await 时，会等待其函数执行完毕后再继续执行后面的函数体.</p>\n<p>await 后面一般是跟 Promise 对象</p>\n<p>await promise 实例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">whatName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'bruce'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">whatName</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 秒后输出 'bruce' </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>async 函数返回的 Promise 状态由函数内 await 后面的 promise 实例的状态决定。如果 async 内部发生错误或者某一个 await 发生错误，那么该错误就会被 async 函数的 Pomise 实例的 catch 方法捕获。并且发生错误的 await 后面的函数体不再执行。只有 async 函数内部所有异步操作执行完，才会执行 then 方法指定的回调函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error Happend!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Error Happend!'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error Happend!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 'Error Happend!' </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'successed!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'successed!' </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"iterator\"><a class=\"卓越科技-\" href=\"#iterator\">#</a> Iterator</h3>\n<blockquote>\n<p>Iterator (遍历器): 是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构，只要部署了 Iterator 接口，就可以完成遍历操作</p>\n</blockquote>\n<p>Iterator 作用:</p>\n<p>为各种数据结构提供统一的访问接口</p>\n<ol>\n<li>使得数据结构的成员能够按照某种次序排列</li>\n<li>供 for...of 消费</li>\n</ol>\n<p>Iterator 的遍历过程:</p>\n<ol>\n<li>创建一个指针对象，指向当前数据结构的起始位置</li>\n<li>第一次调用指针对象的 next 方法，将指针指向数据结构第一个成员</li>\n<li>第二次调用指针对象的 next 方法，将指针指向数据结构第二个成员</li>\n<li>不断调用 next 方法，直到遍历结束</li>\n</ol>\n<p>next 方法会返回数据结构的当前成员的信息。即一个包含 value 和 done 属性的对象。value 是当前成员的值，done 属性是一个布尔值，表示遍历是否结束</p>\n<p>默认 Iterator 接口</p>\n<p>数据结构只要部署了 Iterator 接口，就是可遍历的</p>\n<p>许多数据结构都默认部署了 iterator 接口，包括:</p>\n<ol>\n<li>\n<p>Array</p>\n</li>\n<li>\n<p>Map</p>\n</li>\n<li>\n<p>Set</p>\n</li>\n<li>\n<p>NodeList 对象</p>\n</li>\n<li>\n<p>String</p>\n</li>\n<li>\n<p>arguments</p>\n</li>\n<li>\n<p>TyperArray</p>\n</li>\n</ol>\n<p>默认的 Iterator 接口都部署在数据结构的 Symbol.iterator 属性中。</p>\n<p><code>Symbol.iterator</code>  是一个表达式，返回 Symbol 对象的 iterator 属性。该属性是个函数，会返回一个指针对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    value<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    done<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"forof\"><a class=\"卓越科技-\" href=\"#forof\">#</a> for...of</h3>\n<blockquote>\n<p><code>for...of</code>  是 ES6 标准，用来遍历 value 值，遍历数组， <code>不能遍历普通对象</code></p>\n</blockquote>\n<pre><code>// 遍历数组\nlet arr = [1, 2, 3]\nfor (let value of arr) &#123;\n  console.log(value)\n&#125;  // 1  2  3\n</code></pre>\n<ul>\n<li>\n<p><code>for...of</code>  不能遍历普通对象的原因</p>\n<p>原因是：普通对象没有 Symbol.iterator 属性，如果一个对象拥有 Symbol.iterator 属性，那么就可以使用 for...of 遍历</p>\n</li>\n</ul>\n<h3 id=\"es6的module\"><a class=\"卓越科技-\" href=\"#es6的module\">#</a> ES6 的 module</h3>\n<p>ES6 的模块化的基本规则或特点：</p>\n<ol>\n<li>\n<p>每一个模块只加载一次， 每一个 JS 只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；</p>\n</li>\n<li>\n<p>每一个模块内声明的变量都是局部变量， 不会污染全局作用域；</p>\n</li>\n<li>\n<p>模块内部的变量或者函数可以通过 export 导出；</p>\n</li>\n<li>\n<p>一个模块可以导入别的模块</p>\n</li>\n</ol>\n<p><code>export</code>  导出  <code>import</code>  导入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"zykj\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//export 中可以使用 as 关键字重命名对外输出名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tname <span class=\"token keyword\">as</span> a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age <span class=\"token keyword\">as</span> b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//import * as 变量名 用以获取目标文件中所有 export 的变量，对象形式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> obj <span class=\"token keyword\">from</span> <span class=\"token string\">'./config.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 解构赋值形式用以获取目标文件中同名变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./config.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./config.js'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//import 变量 用以获取目标文件中 export default 后的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> fn <span class=\"token keyword\">from</span> <span class=\"token string\">'./config.js'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"es6的模块化实现\"><a class=\"卓越科技-\" href=\"#es6的模块化实现\">#</a> ES6 的模块化实现</h3>\n<p>如何实现模块化，在 html 中需要使用 <code>type='module'</code>  属性。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aaa.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bbb.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mmm.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此时表示 aaa.js 是一个单独的模块，此模块是有作用域的。如果要使用 aaa.js 内的变量，需要在 aaa.js 中先导出变量，再在需要使用的地方导出变量。</p>\n<h4 id=\"直接导出\"><a class=\"卓越科技-\" href=\"#直接导出\">#</a> 直接导出</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span></pre></td></tr></table></figure><blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./aaa.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>./aaa.js</code>  表示 aaa.js 和 mmm.js 在同级目录。</p>\n<h4 id=\"统一导出\"><a class=\"卓越科技-\" href=\"#统一导出\">#</a> 统一导出</h4>\n<pre><code>var age = 22\nfunction sum(num1, num2) &#123;\n  return num1 + num2\n&#125;\nvar flag = true\nif (flag) &#123;\n  console.log(sum(10, 20))\n&#125;\n//2.最后统一导出\nexport &#123;\n  flag,sum,age\n&#125;\n</code></pre>\n<blockquote>\n<p>使用 <code>import &#123;name,flag,sum&#125; from './aaa.js'</code>  导入多个变量</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./aaa.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明是天才\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 {} 将需要的变量放置进去</p>\n</blockquote>\n<h4 id=\"导出函数类\"><a class=\"卓越科技-\" href=\"#导出函数类\">#</a> 导出函数 / 类</h4>\n<blockquote>\n<p>在 aaa.js 中添加</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3. 导出函数 / 类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"奔跑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 mmm.js 中添加</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">,</span>say<span class=\"token punctuation\">,</span>Person<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./aaa.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明是天才\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>导入 export default</p>\n</blockquote>\n<blockquote>\n<p>导出</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  flag<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">,</span>age</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>导入</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//4. 默认导入 export default</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> aaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./aaa.js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：使用默认导出会将所有需要导出的变量打包成一个对象，此时导出一个对象，此时我在 <code>mmm.js</code>  中导入变量时候命名为 aaa，如果要调用变量需要使用 aaa. 变量。</p>\n</blockquote>\n<h4 id=\"统一全部导入\"><a class=\"卓越科技-\" href=\"#统一全部导入\">#</a> 统一全部导入</h4>\n<blockquote>\n<p>使用 <code>import * as aaa from './aaa.js'</code>  统一全部导入</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 5. 统一全部导入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> aaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./aaa.js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aaa<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"前端模块化\"><a class=\"卓越科技-\" href=\"#前端模块化\">#</a> 前端模块化</h2>\n<p>随着前端项目越来越大，团队人数越来越多，多人协调开发一个项目成为常态。</p>\n<p>例如现在小明和小张共同开发一个项目，小明定义一个 aaa.js，小张定义了一个 bbb.js。</p>\n<p><code>aaa.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小明开发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时小明的 <code>sum</code>  是没有问题的。</p>\n<p><code>bbb.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小红</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"小红\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr></table></figure><p>此时小明和小红各自用各自的 <code>flag</code>  你变量没问题。</p>\n<p><code>但是此时小明又创建了一个mmm.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag是true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 index.html 页面导入这些 js 文件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aaa.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bbb.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ccc.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>此时小明知道自己在 aaa.js 中定义的 <code>flag</code>  是 <code>true</code> ，认为打印没有问题，但是不知道小红的 bbb.js 中也定义了 <code>flag</code>  为 <code>true</code> ，所以 mmm.js 文件并没有打印出 “flag 是 true”。</p>\n<blockquote>\n<p>这就是全局变量同名问题。</p>\n</blockquote>\n<h3 id=\"使用导出全局变量模块解决全局变量同名问题\"><a class=\"卓越科技-\" href=\"#使用导出全局变量模块解决全局变量同名问题\">#</a> 使用导出全局变量模块解决全局变量同名问题</h3>\n<blockquote>\n<p>aaa.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模块对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> moduleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">param</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 导出对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  obj<span class=\"token punctuation\">.</span>flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>mmm.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用全局变量 moduleA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>moduleA<span class=\"token punctuation\">.</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag是true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样直接使用 aaa.js 导出的 moduleA 变量获取小明自己定义的 <code>flag</code> 。</p>\n<h3 id=\"commonjs的模块化实现\"><a class=\"卓越科技-\" href=\"#commonjs的模块化实现\">#</a> CommonJS 的模块化实现</h3>\n<p>CommonJS 需要 nodeJS 的依支持。</p>\n<blockquote>\n<p>aaa.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CommonJS 需要 nodeJS 支持</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// module.exports = &#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//   flag : flag,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//   sum : sum</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 导出对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  flag<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  sum</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>module.exports = &#123;&#125;</code>  导出需要的对象。</p>\n<blockquote>\n<p>mmm.js</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入对象，nodejs 语法，需要 node 支持，从 aaa.js 取出对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token punctuation\">&#123;</span>flag<span class=\"token punctuation\">,</span>sum<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用  <code>var &#123;flag,sum&#125; = require(&quot;./aaa&quot;)</code>  获取已经导出的对象中自己所需要的对象。</p>\n",
            "tags": [
                "Web教程",
                "JavaScript",
                "高级"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/d3a7443d/",
            "url": "https://shoka.zykjofficial.top/posts/d3a7443d/",
            "title": "JavaScript学习",
            "date_published": "2020-04-29T13:38:11.000Z",
            "content_html": "<h2 id=\"javascript基础\"><a class=\"卓越科技-\" href=\"#javascript基础\">#</a> JavaScript 基础</h2>\n<div class=\"note danger\"><p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXV4NDExZDc1Sg==\">黑马程序员</span></p>\n</div>\n<h3 id=\"js概论\"><a class=\"卓越科技-\" href=\"#js概论\">#</a> JS 概论</h3>\n<ul>\n<li>\n<p>HTML/CSS -  <code>标记语言</code></p>\n</li>\n<li>\n<p>JS 脚本语言 -  <code>编程类语言</code></p>\n</li>\n</ul>\n<blockquote>\n<p>浏览器分成两部分， <code>渲染引擎</code> 和 <code>JS引擎</code></p>\n</blockquote>\n<ul>\n<li>渲染引擎：用来解析 HTML 与 CSS, 俗称内核，比如 Chrome 的 blink</li>\n</ul>\n<blockquote>\n<p>JS 引擎: JS 解释器，用来读取网页中的 JavaScript 代码，对其处理后运行，比如 chrome 浏览器的 V8</p>\n</blockquote>\n<ul>\n<li>\n<p>浏览器本身并不会执行 JS 代码，而是通过内置 JavaScript 引擎来执行 JS 代码，JS 引擎执行代码时逐行解释每一句源码 (转换为机器语言二进制), 然后由计算机去执行</p>\n</li>\n<li>\n<p><code>解释性语言: 进行时立即解释执行的语言 如 Js</code></p>\n</li>\n<li>\n<p><code>编译性语言: 必须通过编译生成中间代码后才执行的语言 如 Java、C</code></p>\n</li>\n</ul>\n<blockquote>\n<p>JS 组成: ECMAscript (js 语法)、DOM (页面文档对象模型)、BOM (浏览器对象模型) 后两者即合称 API</p>\n</blockquote>\n<ul>\n<li>ECMAscript: 规定了 JS 的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套 JS 语法工业标准</li>\n</ul>\n<blockquote>\n<p>JavaScript 程序的执行</p>\n</blockquote>\n<ul>\n<li>出现在 <code>&lt;script&gt;</code>  和 <code>&lt;/script&gt;</code>  标记对之间的 javascript 语句按照它们在脚本中出现的顺序来执行。当一个文件有多个脚本的时候，脚本按照它们出现的顺序来执行 (除非脚本带有 defer 属性)。 <code>&lt;script&gt;</code>  标记中的 JS 代码作为文档载入和解析过程的一部分来执行</li>\n</ul>\n<h3 id=\"js词法结构\"><a class=\"卓越科技-\" href=\"#js词法结构\">#</a> JS 词法结构</h3>\n<h4 id=\"js注释\"><a class=\"卓越科技-\" href=\"#js注释\">#</a> JS 注释</h4>\n<ul>\n<li>\n<p>单行注释</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这一行都是注释内容</span></pre></td></tr></table></figure></li>\n<li>\n<p>多行注释</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 这里面的内容为注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>快捷键</p>\n<pre><code>单行注释 ctrl+/ \n\n多行注释 ctrl+shift+/\n</code></pre>\n</li>\n</ul>\n<h4 id=\"js相关\"><a class=\"卓越科技-\" href=\"#js相关\">#</a> JS 相关</h4>\n<p>标识符、关键字、保留字、直接量</p>\n<ul>\n<li>\n<p><code>标识符</code> ：开发人员为 <code>变量</code> 、 <code>属性</code> 、 <code>函数</code> 、 <code>参数</code> 取的名字 (标识符不能是关键字或保留字)</p>\n</li>\n<li>\n<p><code>关键字</code> : js 本身已经使用了的字</p>\n</li>\n<li>\n<p><code>保留字</code> ：为后面预留的关键字 如  <code>boolean</code>   <code>byte</code>   <code>char</code>   <code>int</code>  等</p>\n</li>\n<li>\n<p><code>字面量(直接量)</code> : 程序中直接显示出来的数据值</p>\n</li>\n<li>\n<p><code>数字字面量</code> : 8、9、10</p>\n</li>\n<li>\n<p><code>字符串字面量</code> :  &quot;大前端&quot;</p>\n</li>\n<li>\n<p><code>布尔字面量</code> : true false</p>\n</li>\n</ul>\n<h4 id=\"js命名规则\"><a class=\"卓越科技-\" href=\"#js命名规则\">#</a> JS 命名规则</h4>\n<div class=\"note info\">\n<p>标识符命名规则</p>\n</div>\n<ul>\n<li>\n<p>必须要有意义</p>\n</li>\n<li>\n<p>变量一般用名词</p>\n</li>\n<li>\n<p>函数一般用动词</p>\n</li>\n<li>\n<p>不能与其他关键字同名</p>\n</li>\n</ul>\n<div class=\"note info\">\n<p>操作符规范</p>\n</div>\n<ul>\n<li>\n<p>操作符左右两侧各保留个空格</p>\n</li>\n<li>\n<p>单行注释 // 后加一个空格再写注释</p>\n</li>\n<li>\n<p>末尾大括号要对齐其父元素</p>\n</li>\n</ul>\n<h3 id=\"js嵌入html\"><a class=\"卓越科技-\" href=\"#js嵌入html\">#</a> JS 嵌入 HTML</h3>\n<h4 id=\"行内式\"><a class=\"卓越科技-\" href=\"#行内式\">#</a> 行内式</h4>\n<blockquote>\n<p>放置在 HTML 事件处理程序中</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>点我<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert(<span class=\"token punctuation\">'</span>Hello World!<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><input type=\"button\" value=\"点我\" onclick=\"alert('Hello World!')\">\n<p>注意:</p>\n<ul>\n<li>\n<p>可以将单行或少量 JS 代码写在 HTML 标签的事件属性中 (以 on 开头的属性), 如: onclick</p>\n</li>\n<li>\n<p>注意单双引号的使用：在 HTML 中我们推荐使用双引号，JS 中使用单引号</p>\n</li>\n<li>\n<p>可读性差</p>\n</li>\n<li>\n<p>引号易错，易混淆</p>\n</li>\n<li>\n<p>特殊情况下使用</p>\n</li>\n</ul>\n<h4 id=\"内联式\"><a class=\"卓越科技-\" href=\"#内联式\">#</a> 内联式</h4>\n<blockquote>\n<p>直接写在 html 文件中，一般写在 body 标签中所有元素后面</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">     </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"外联式\"><a class=\"卓越科技-\" href=\"#外联式\">#</a> 外联式</h4>\n<blockquote>\n<p>放置在由标签的 src 属性指定的外部 js 文件中</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">此处不可写代码</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意:</p>\n<ul>\n<li>引用外部 js 文件的 script 标签中间不可以写代码</li>\n<li>执行顺序就是他们在文档中出现的顺序</li>\n</ul>\n<h4 id=\"指定脚本语言\"><a class=\"卓越科技-\" href=\"#指定脚本语言\">#</a> 指定脚本语言</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Script-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>一般浏览器会假设 js 为默认脚本化语言，如果没有指定默认语言，或者想覆盖默认语言，可以使用 <code>type属性</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"script标记的属性\"><a class=\"卓越科技-\" href=\"#script标记的属性\">#</a> script 标记的属性</h4>\n<blockquote>\n<p>defer、async<br />\n 脚本的执行在默认情况下是同步和阻塞的。但是如果有了属性 defer 或者 async, 情况会发生变化。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>defer作用</code> ：浏览器解析遇到带有 defer 属性的 script 标记时，延迟该脚本的执行。文档的载入和解析完成再继续执行</p>\n</li>\n<li>\n<p><code>async作用</code> ：浏览器可以尽快执行脚本，不用在下载脚本时阻塞文档解析。即一边下载 js 一边解析文档，js</p>\n</li>\n<li>\n<p>如果两者同时都有，那么会遵从 async 而忽略 defer</p>\n</li>\n</ul>\n<h3 id=\"js输入输出语句\"><a class=\"卓越科技-\" href=\"#js输入输出语句\">#</a> JS 输入输出语句</h3>\n<ul>\n<li>\n<p><code>alert(msg)</code> : 浏览器弹出警示框</p>\n</li>\n<li>\n<p><code>console.log(msg)</code> : 浏览器控制台打印输出信息</p>\n</li>\n<li>\n<p><code>prompt(info)</code> : 浏览器弹出输入框，用户可以输入，输入的是字符串</p>\n</li>\n<li>\n<p><code>confirm(msg)</code> : 浏览器弹出确认框，点击确认返回 true, 否则返回 false</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这是一个输入框 \t\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年龄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 弹出警示框 输出展示给用户的 \t\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入结果是: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//console 控制台输出 便于测试 \t\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是程序猿'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 弹出确认框           </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你确定吗?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//right 结果为真说明点击了确定</span></pre></td></tr></table></figure><p>注意: confirm、prompt、alert  <code>都会产生阻塞</code> ，但他们弹出时，代码会停止运行。</p>\n<h3 id=\"js变量\"><a class=\"卓越科技-\" href=\"#js变量\">#</a> JS 变量</h3>\n<h4 id=\"声明和初始化\"><a class=\"卓越科技-\" href=\"#声明和初始化\">#</a> 声明和初始化</h4>\n<h5 id=\"声明变量\"><a class=\"卓越科技-\" href=\"#声明变量\">#</a> 声明变量</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明变量 (var=variable)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 声明一个名为 age 的变量</span></pre></td></tr></table></figure><h5 id=\"赋值\"><a class=\"卓越科技-\" href=\"#赋值\">#</a> 赋值</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// = 表示把右边的值赋予左边的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"变量的初始化\"><a class=\"卓越科技-\" href=\"#变量的初始化\">#</a> 变量的初始化</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"变量语法扩展\"><a class=\"卓越科技-\" href=\"#变量语法扩展\">#</a> 变量语法扩展</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> myname<span class=\"token operator\">=</span><span class=\"token string\">'卓越科技-'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\t卓越科技 -</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myname<span class=\"token operator\">=</span><span class=\"token string\">'zykj'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// zykj</span></pre></td></tr></table></figure><p><code>变量值只取就近一个</code></p>\n<h5 id=\"声明多个变量\"><a class=\"卓越科技-\" href=\"#声明多个变量\">#</a> 声明多个变量</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> address<span class=\"token operator\">=</span><span class=\"token string\">'火影村'</span><span class=\"token punctuation\">,</span> gz<span class=\"token operator\">=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"声明变量的特殊情况\"><a class=\"卓越科技-\" href=\"#声明变量的特殊情况\">#</a> 声明变量的特殊情况</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 只声明不赋值 结果为 undefined </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> sex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 不声明不赋值 直接使用某个变量 结果报错 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// console.log(tel); </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 不声明直接赋值 结果正确 不推荐 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>qq <span class=\"token operator\">=</span> <span class=\"token number\">110</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"变量命名规范\"><a class=\"卓越科技-\" href=\"#变量命名规范\">#</a> 变量命名规范</h4>\n<ul>\n<li>\n<p>由字母数字下划线美元符号构成，不能有横杠！！！</p>\n</li>\n<li>\n<p>区分大小写</p>\n</li>\n<li>\n<p>不能数字开头</p>\n</li>\n<li>\n<p>不能是关键字、保留字</p>\n</li>\n<li>\n<p>变量名必须有意义</p>\n</li>\n<li>\n<p>遵守驼峰命名法</p>\n</li>\n<li>\n<p>对于内部使用的函数变量可以用下划线开头结尾的格式命名</p>\n</li>\n</ul>\n<h4 id=\"作用域\"><a class=\"卓越科技-\" href=\"#作用域\">#</a> 作用域</h4>\n<blockquote>\n<p>变量起作用的范围，可以提高程序的可靠性，减少命名冲突</p>\n</blockquote>\n<h5 id=\"作用域类型\"><a class=\"卓越科技-\" href=\"#作用域类型\">#</a> 作用域类型</h5>\n<ul>\n<li>\n<p>全局作用域：整个 script 标签内 或是一个单独的 js 文件</p>\n</li>\n<li>\n<p>局部作用域：在函数内部，代码名字只在函数内部起效果和作用</p>\n</li>\n</ul>\n<h5 id=\"全局变量和局部变量\"><a class=\"卓越科技-\" href=\"#全局变量和局部变量\">#</a> 全局变量和局部变量</h5>\n<blockquote>\n<p>根据作用域的不同，变量可分为: 1. 全局变量 2. 局部变量</p>\n</blockquote>\n<ul>\n<li>\n<p>全局变量：在全局起作用的变量</p>\n</li>\n<li>\n<p>局部变量：在局部作用域下的变量 (函数内部的变量) 函数形参亦可以看做局部变量</p>\n</li>\n</ul>\n<p>从执行效率看</p>\n<ul>\n<li>\n<p>全局变量只有浏览器关闭时才会销毁，比较占内存资源</p>\n</li>\n<li>\n<p>局部变量在程序执行完毕时即销毁</p>\n</li>\n</ul>\n<p>现阶段 js 没有块级作用域 (即花括号包含之内): 函数中声明的所有变量，无论是在那里声明在整个函数中都是有定义的，因为变量提升的原因</p>\n<h5 id=\"全局对象和调用对象\"><a class=\"卓越科技-\" href=\"#全局对象和调用对象\">#</a> 全局对象和调用对象</h5>\n<ul>\n<li>\n<p><code>全局对象</code> ：当 js 解释器开始运行时，它首先要做的是在执行任何 js 代码前创建一个全局对象，而全局变量就是这个全局对象的属性。在客户端 JS (嵌入网页的 JS) 中，这个全局对象就是 Window 对象</p>\n</li>\n<li>\n<p><code>调用对象</code> ：每调用一次函数时，会在该函数作用域链前加一个调用对象。函数的参数和局部变量是作为调用对象的属性而存储的。用一个完全独立的对象来存储局部变量使 JS 可以防止局部变量覆盖同名的全局变量的值</p>\n</li>\n</ul>\n<h5 id=\"作用域链\"><a class=\"卓越科技-\" href=\"#作用域链\">#</a> 作用域链</h5>\n<blockquote>\n<p>为一个对象列表或对象链。在一个 <code>非嵌套函数中,作用域链由这个函数的调用对象和全局对象组成</code></p>\n</blockquote>\n<ul>\n<li>\n<p>内部函数访问外部函数的变量，采取的是链式查找的方式根据就近原则来决定取那个值</p>\n<pre><code class=\"language-javascript\">var num = 10; \t\nfunction fn()&#123; \t\t\n    var num = 20; \t\t\n    function fun()&#123; \t\t\t\n        console.log(num); \t\t\n    &#125; \t\t\n    fun(); \t\n&#125; \t\nfn(); // 结果是20\n</code></pre>\n</li>\n</ul>\n<h4 id=\"垃圾回收\"><a class=\"卓越科技-\" href=\"#垃圾回收\">#</a> 垃圾回收</h4>\n<ul>\n<li>\n<p>JavaScript 每次创建字符串数组或对象时，解释器都必须 f 分配内存储存实体</p>\n</li>\n<li>\n<p>与 C、C++ 不同，js 有垃圾收集的机制，解释器可以检测何时程序不再使用一个对象，当确定了对象是无用的时候，会自动释放其占用的内存</p>\n</li>\n</ul>\n<h3 id=\"数据类型占用内存大小不同\"><a class=\"卓越科技-\" href=\"#数据类型占用内存大小不同\">#</a> 数据类型 (占用内存大小不同)</h3>\n<div class=\"note info\">\n<p>js 是一种弱类型或者说动态语言，不用提前声明变量的类型，在程序运行过程中，类型会自动被确定，js 的变量数据类型只有被赋值后才被确定<br>相同的变量可用于不同的数据类型</p>\n</div>\n<h4 id=\"简单数据类型\"><a class=\"卓越科技-\" href=\"#简单数据类型\">#</a> 简单数据类型</h4>\n<p>三种基本数据类型:  <code>数字型</code> 、 <code>字符串型</code> 和 <code>布尔型</code></p>\n<p>两种小数据类型:  <code>null</code> 、 <code>undefined</code></p>\n<p>还有 ES6 新增:  <code>symbol</code></p>\n<table>\n<thead>\n<tr>\n<th>简单数据类型</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>number</td>\n<td>数字型，包含整型值和浮点型值，如 21,0.21</td>\n<td>0</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>布尔型，如 true、false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串类型，如 &quot;张三&quot;</td>\n<td>&quot;&quot;</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>var a; 声明但没赋值 此时 a = undefined</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>null</td>\n<td>var a = null;  声明了变量 a 为空值</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"复杂数据类型\"><a class=\"卓越科技-\" href=\"#复杂数据类型\">#</a> 复杂数据类型</h4>\n<blockquote>\n<p>对象 (object)、数组 (array)、函数 (function)、日期 (Date)、正则表达式 (RegExp). 本质上都是对象</p>\n</blockquote>\n<h4 id=\"数字型number\"><a class=\"卓越科技-\" href=\"#数字型number\">#</a> 数字型 Number</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">010</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数字前面加 0, 代表八进制 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 数字前面加 0x, 代表 16 进制 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0x9</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> num4 <span class=\"token operator\">=</span> <span class=\"token number\">0xa</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 最大值 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 最小值 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 无穷大 </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 输出 Infinity 无穷大 */</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 无穷小 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 输出 -Infinity 无穷小 */</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 非数值 NaN </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 输出 NaN*/</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>isNaN();</code> : 用来判断非数字 数字返回 false 非数字返回 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果为 false </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dada'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果为 true</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>变量.toFixed(n);</code> : 将变量保留 n 位小数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span><span class=\"token number\">2.312313</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2.312</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"字符串型不是对象\"><a class=\"卓越科技-\" href=\"#字符串型不是对象\">#</a> 字符串型 (不是对象)</h4>\n<ul>\n<li>\n<p>语法：双引号或单引号 (推荐)</p>\n</li>\n<li>\n<p>嵌套：外双内单或者外单内双</p>\n</li>\n</ul>\n<p>转义符 (以 \\ 开头)</p>\n<table>\n<thead>\n<tr>\n<th>转义符</th>\n<th>解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符，n 是 newline 的意思</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>斜杠 \\</td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>' 单引号</td>\n</tr>\n<tr>\n<td><code>\\*</code></td>\n<td>&quot; 双引号</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>tab 缩进</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>空格，b 是 blank 的意思</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"字符串的length属性\"><a class=\"卓越科技-\" href=\"#字符串的length属性\">#</a> 字符串的 length 属性</h5>\n<p>用于检测字符串长度</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检测获取字符串的长度 \t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'my name is zykj'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span></pre></td></tr></table></figure><h5 id=\"字符串拼接\"><a class=\"卓越科技-\" href=\"#字符串拼接\">#</a> 字符串拼接</h5>\n<p>多个字符串之间可以用 + 拼接，拼接方式为字符串 + 任何类型 = 拼接之后的新字符串</p>\n<p>数值型和字符型之间也可以相加</p>\n<p>口诀:  <code>数值相加,字符相连</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是 helloworld</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wo'</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 结果是 wo12 \t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'so'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果是 sotrue \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 结果是 24 \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 结果是 1212    </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zykj'</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">'岁'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是 zykj18 岁     </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>age <span class=\"token operator\">=</span> age <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zykj'</span> <span class=\"token operator\">+</span> age<span class=\"token operator\">+</span> <span class=\"token string\">'岁'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果是 zykj19 岁</span></pre></td></tr></table></figure><h4 id=\"布尔型\"><a class=\"卓越科技-\" href=\"#布尔型\">#</a> 布尔型</h4>\n<ul>\n<li>\n<p>布尔型有两个值: true 和 false, 其中 true 表示真，false 表示假</p>\n</li>\n<li>\n<p>布尔型和数字型相加时，true 为 1, false 为 0</p>\n</li>\n</ul>\n<h4 id=\"undefined\"><a class=\"卓越科技-\" href=\"#undefined\">#</a> undefined</h4>\n<blockquote>\n<p>如果使用了一个 <code>并未声明的变量</code> 时，或者使用了 <code>已经声明但还没有赋值的变量</code> 时，又或者 <code>使用了一个并不存在的对象属性</code> 时，返回的就是 undefined</p>\n</blockquote>\n<p>定义方式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 undefinedaa </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined 和数字相加，最后结果是 NaN</span></pre></td></tr></table></figure><p>布尔环境中，它会转为 false 。数字环境中，会被转为 NaN 。字符串环境中，转为 &quot;undefined&quot;</p>\n<h4 id=\"null\"><a class=\"卓越科技-\" href=\"#null\">#</a> null</h4>\n<blockquote>\n<p>即不是有效的对象、数组、数字、字符串和布尔值</p>\n</blockquote>\n<p>定义方式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 null </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span><span class=\"token string\">'dadad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 nulldadad </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 1</span></pre></td></tr></table></figure><p>布尔环境中，它会转为 false 。数字环境中，会被转为 0。字符串环境中，转为 &quot;null&quot;</p>\n<h4 id=\"数据类型转换\"><a class=\"卓越科技-\" href=\"#数据类型转换\">#</a> 数据类型转换</h4>\n<h5 id=\"转为字符型\"><a class=\"卓越科技-\" href=\"#转为字符型\">#</a> 转为字符型</h5>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>toString()</code></td>\n<td>转换为字符串</td>\n<td>var num = 1; alert(num,toString());</td>\n</tr>\n<tr>\n<td><code>String()强制转换</code></td>\n<td>转换成字符串</td>\n<td>var num = 1; alert(String(num));</td>\n</tr>\n<tr>\n<td><code>加号拼接字符串</code></td>\n<td>和字符串拼接的结果都是字符串</td>\n<td>var num = 1; alert (num + &quot;我是字符串&quot;);</td>\n</tr>\n</tbody>\n</table>\n<p>用法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 变量.toString ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// console.log(typeof num); </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 利用 String ()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// console.log(typeof String(num)); </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 利用拼接字符串的方法 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>toString () 可加参数，用来指定转换的基数，如为 2, 则转为二进制，如为 8, 则转为八进制，默认为 10</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">190</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1011110</span></pre></td></tr></table></figure></li>\n</ul>\n<p>前两种了解即可。推荐使用第三种，亦称为 <code>隐式转换</code></p>\n<h5 id=\"转为数字型重点\"><a class=\"卓越科技-\" href=\"#转为数字型重点\">#</a> 转为数字型 (重点)</h5>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>parseInt(string)函数</code></td>\n<td>将 string 类型转换成整数数值型</td>\n<td>parselnt('78');</td>\n</tr>\n<tr>\n<td><code>parseFloat(string)函数</code></td>\n<td>将 string 类型转换成浮点数数值</td>\n<td>parseFloat('78.21');</td>\n</tr>\n<tr>\n<td><code>Number()强制转换函数</code></td>\n<td>将 string 类型转换成数值型</td>\n<td>Number('12');</td>\n</tr>\n<tr>\n<td><code>js 隐式转换( - * / )</code></td>\n<td>利用算数运算隐式转换为数值型</td>\n<td>'12' - 0</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"重点掌握\"><a class=\"卓越科技-\" href=\"#重点掌握\">#</a> 重点掌握</h5>\n<ul>\n<li>\n<p><code>parseInt()</code> 、 <code>parseFloat()</code>  会从字符串开始处转换和返回任何的数字，自动忽略舍去非数字部分 (前提是数字开头)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"88 woshi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 88 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa 88 woshi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>parseInt</code>  可以解析 &quot;0x&quot; 或 &quot;0X&quot; 开头的数字，也可以接受另一个参数指定要解析的数字的基数 (不能解析 0 开头的数字，除非显性地指定所使用的基数)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ff\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 255</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//parseInt (变量) 只能转为整数型 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年龄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//3 取整 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'120px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 会取消 px 单位 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//parseFloat 可以把字符型的转化为数字型 得到是小数 浮点数 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// Number()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 隐式转换  可以利用 - * / 三种符号 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12'</span> <span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>注: Number () 只对 10 十进制数字有效</p>\n</li>\n</ul>\n<h5 id=\"转化为布尔型\"><a class=\"卓越科技-\" href=\"#转化为布尔型\">#</a> 转化为布尔型</h5>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Boolean()函数</code></td>\n<td>其他类型转成布尔值</td>\n<td>Boolean(&quot;true&quot;);</td>\n</tr>\n</tbody>\n</table>\n<p>代表空、否定的值都转化为 false, 如 '', 0 , null , NaN , undefined 。其他都转化为 true</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h3 id=\"运算符\"><a class=\"卓越科技-\" href=\"#运算符\">#</a> 运算符</h3>\n<blockquote>\n<p>浮点数运算精确度远不如整数，不能直接拿浮点数比较是否相等</p>\n</blockquote>\n<ul>\n<li>\n<p>表达式：由 <code>数字</code> 、 <code>运算符</code> 、 <code>变量</code> 组成的式子</p>\n</li>\n<li>\n<p>返回值：表达式返回的值</p>\n</li>\n</ul>\n<h4 id=\"递增递减运算符\"><a class=\"卓越科技-\" href=\"#递增递减运算符\">#</a> 递增递减运算符</h4>\n<ul>\n<li>\n<p>递增运算符 (++) 递减运算符 (--)</p>\n</li>\n<li>\n<p>放在变量前面为 <code>前置递增</code>  后面为 <code>后置递增</code></p>\n<p>前置递增：先运算再取值</p>\n<p>后置递增：先取值再运算</p>\n</li>\n<li>\n<p>单独使用时两者结果相同</p>\n</li>\n</ul>\n<h4 id=\"比较运算符\"><a class=\"卓越科技-\" href=\"#比较运算符\">#</a> 比较运算符</h4>\n<blockquote>\n<p>概念：比较运算符 (关系运算符) 是 <code>两个数据进行比较时所使用的运算符</code> ，比较运算后，会 <code>返回一个布尔值true/false作为比较运算的结果</code> 。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>运算符名称</th>\n<th>说明</th>\n<th>案例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;</code></td>\n<td>小于号</td>\n<td>1 &lt; 2</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>大于号</td>\n<td>1 &gt; 2</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>大于等于号 (大于或者等于)</td>\n<td>2 &gt;= 2</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于号 (小于或者等于)</td>\n<td>3 &lt;= 2</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>判等号 (会转型)</td>\n<td>37 == 37</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>不等号</td>\n<td>37 != 37</td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>===</code>    <code>!===</code></td>\n<td>全等 要求值和 数据类型都要一直</td>\n<td>37 === '37'</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>= 赋值<br />\n == 判断 (会转型)<br />\n=== 全等 ( <code>不转型,即判断数据类型和值是否全部相等,对于对象数组函数来说则是判断是否引用同一个地址的对象数组函数</code> )</p>\n<h4 id=\"instanceof运算符\"><a class=\"卓越科技-\" href=\"#instanceof运算符\">#</a> instanceof 运算符</h4>\n<p>instanceof 运算符 (判断对象类型)</p>\n<p><code>instance</code> : 实例</p>\n<p>用于判断是否是某种特殊对象 (数组、对象、日期) 的实例</p>\n<p>要求左边是对象，右边是一个类的名字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>d <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>注:  <code>instanceof</code>  是通过原型对象来判断一个实例属不属于某个构造函数创建的，而不是通过构造函数的名字</p>\n<h4 id=\"利用typeof获取变量数据类型\"><a class=\"卓越科技-\" href=\"#利用typeof获取变量数据类型\">#</a> 利用 typeof 获取变量数据类型</h4>\n<p>typeof 获取变量数据类型 (判断基本类型)</p>\n<ul>\n<li>语法: typeof 变量</li>\n</ul>\n<blockquote>\n<p>返回的是字符类型的小写的数据类型名称  <code>undefined</code>   <code>string</code>   <code>number</code>   <code>function</code>   <code>boolean</code> , 对于包装对象和 DOM 获得的元素返回的都是  <code>object</code>  对象，null 和 数组返回的是 object</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> vari <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> vari<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年龄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"逻辑运算符\"><a class=\"卓越科技-\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n</tr>\n<tr>\n<td>！</td>\n<td>非</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>如果是布尔值参与逻辑运算，则结果为布尔值</p>\n</li>\n<li>\n<p>如果是 <code>具体数值或表达式参与运算,则发生逻辑中断</code> ，其中 <code>具体数值代表真,0 '' null undefined NaN代表假</code></p>\n</li>\n<li>\n<p><code>短路运算原理: 当有多个表达式时,左边的表达式可以确定结果时,就不再运算右边的表达式的值</code></p>\n</li>\n</ul>\n<br/>\n<p><code>表达式1 &amp;&amp; 表达式2</code></p>\n<ul>\n<li>\n<p>如果第一个为真，不足以确定结果，那么就返回表达式 2</p>\n</li>\n<li>\n<p>如果第一个为假，足以确定结果，那么就返回表达式 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 结果为 0 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 456</span></pre></td></tr></table></figure></li>\n</ul>\n<p><code>表达式1 || 表达式2</code></p>\n<ul>\n<li>\n<p>如果第一个为真，足以确定结果，那么就返回表达式 1</p>\n</li>\n<li>\n<p>如果第一个为假，不足以确定结果，那么就返回表达式 2</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">123</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 123 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 结果为 456 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">123</span> <span class=\"token operator\">||</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果 123</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 结果为 0</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"赋值运算符\"><a class=\"卓越科技-\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<ul>\n<li>\n<p>=  赋值  后面赋值给前面</p>\n</li>\n<li>\n<p>+= x   每次加 x  num += 5;  num = num + 5</p>\n</li>\n<li>\n<p>-= x   每年减 x  num -= 5 ; num = num - 5</p>\n</li>\n<li>\n<p>*= x 每次乘 x</p>\n</li>\n<li>\n<p>/= x 每次除 x</p>\n</li>\n<li>\n<p>%= x 每次除 x 取余</p>\n</li>\n</ul>\n<div class=\"note info\">\n<p>运算符优先级</p>\n</div>\n<ul>\n<li>\n<p>小括号</p>\n</li>\n<li>\n<p>一元运算符  <code>++</code>   <code>--</code>   <code>!</code></p>\n</li>\n<li>\n<p>算术运算符 先 * / % 再 + -</p>\n</li>\n<li>\n<p>关系运算符</p>\n</li>\n<li>\n<p>相等运算符</p>\n</li>\n<li>\n<p>逻辑运算符 先 &amp;&amp; 后 ||</p>\n</li>\n<li>\n<p>赋值运算符 =</p>\n</li>\n<li>\n<p>逗号运算符，</p>\n</li>\n</ul>\n<h3 id=\"语句\"><a class=\"卓越科技-\" href=\"#语句\">#</a> 语句</h3>\n<h4 id=\"三种结构\"><a class=\"卓越科技-\" href=\"#三种结构\">#</a> 三种结构</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200427153204.png\" alt=\"\" /></p>\n<h5 id=\"顺序结构\"><a class=\"卓越科技-\" href=\"#顺序结构\">#</a> 顺序结构</h5>\n<blockquote>\n<p>按照代码先后顺序，依次执行</p>\n</blockquote>\n<h5 id=\"分支结构\"><a class=\"卓越科技-\" href=\"#分支结构\">#</a> 分支结构</h5>\n<div class=\"note info\">\n<p>根据不同的条件，执行不同的路径代码 (if while)</p>\n</div>\n<blockquote>\n<p>if 分支语句</p>\n</blockquote>\n<ul>\n<li>\n<p>语法:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   执行语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 先判断第一个 不符合则判断下一个</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果条件表达式结果为真，则执行大括号里面的执行语句</p>\n</li>\n<li>\n<p>如果条件表达式为假，则跳过 if 执行后面的代码</p>\n</li>\n</ul>\n<blockquote>\n<p>三元表达式 (由三元运算符  <code>? :</code>  组成的表达式)</p>\n</blockquote>\n<ul>\n<li>\n<p>语法结构</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>条件表达式 <span class=\"token operator\">?</span> 表达式<span class=\"token number\">1</span><span class=\"token operator\">:</span>表达式<span class=\"token number\">2</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果条件表达式结果为真，则返回表达式 1 的值，如果为假则返回表达式 2</p>\n</li>\n</ul>\n<blockquote>\n<p>switch 语句</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>  执行语句<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>  执行语句<span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token operator\">:</span> 执行最后的语句<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>匹配 case 的值，如果匹配，则运行该 case 里的值，如果都不匹配，则执行 default 里的值</p>\n</li>\n<li>\n<p>表达式里的值和 case 里的值相等是用全等 === 判定的，即必须是值和数据类型完全一致才可以</p>\n</li>\n<li>\n<p>必须要有 break, 否则会执行下一个 case</p>\n</li>\n</ul>\n<p><code>if else if 和switch的区别</code></p>\n<ol>\n<li>\n<p>前者一般用判断范围 后者一般用于确定值</p>\n</li>\n<li>\n<p>前者需要判断多次，后者进行判断后直接执行到程序的条件语句，效率较高</p>\n</li>\n<li>\n<p>分支较少时前者效率高</p>\n</li>\n<li>\n<p>分支多时后者效率高且结构更清晰</p>\n</li>\n</ol>\n<h5 id=\"循环结构\"><a class=\"卓越科技-\" href=\"#循环结构\">#</a> 循环结构</h5>\n<div class=\"note info\">\n<p>可重复执行一些代码</p>\n</div>\n<blockquote>\n<p>for 循环结构</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化变量<span class=\"token punctuation\">;</span>条件表达式<span class=\"token punctuation\">;</span>操作表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> 循环体<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 外层循环一次，里面的循环执行全部</span></pre></td></tr></table></figure><blockquote>\n<p>while 循环结构</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>记得加入计数器，防止死循环</li>\n</ul>\n<blockquote>\n<p>do {} while () 循环</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>先执行一次语句，再判断，若正确，则继续执行，否则退出</p>\n</li>\n<li>\n<p>即循环体至少执行一次</p>\n</li>\n<li>\n<p>总结：一般若与数字相关，常用 for、while 和 dowhile 可以执行更加复杂的循环。while 先判断再执行，dowhile 先执行再判断</p>\n</li>\n</ul>\n<blockquote>\n<p>跳转语句 continue</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>遇到 continue 就停止本次循环，直接跳到 i++, 不再执行循环体内 continue 后面语句</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我正在吃第'</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">'个包子'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>结果:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>我正在吃第 1 个包子</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>我正在吃第 2 个包子</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>我正在吃第 4 个包子</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>我正在吃第 5 个包子</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>结束语句 break</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>遇到 break 直接跳出此循环所属的 for 语句的所有循环</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我正在吃第'</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">'个包子'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>结果:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>我正在吃第 1 个包子</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>我正在吃第 2 个包子</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>throw</p>\n</blockquote>\n<ul>\n<li>\n<p>用于抛出异常，用信号通知发生了错误或者异常状况</p>\n</li>\n<li>\n<p>异常：发生了某种异常情况或错误时产生的一个信号。</p>\n</li>\n<li>\n<p>语法格式:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">throw</span> expression<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>expression 可以使任意类型，一般为 Error 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">twoArg</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span>t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'必须是两个参数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">twoArg</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：当抛出异常时，JS 解释器会停止当前正在执行的逻辑，跳转到最近的异常处理程序 (即后面 try/catch/finally 中 catch 语句编写的程序)</p>\n</li>\n<li>\n<p>常见的几个错误异常</p>\n<ol>\n<li>SyntaxError：语法错误</li>\n<li>Uncaught ReferenceError：引用错误  <code>引用一个不存在的变量时发生的错误。将一个值分配给无法分配的对象，比如对函数的运行结果或者函数赋值。</code></li>\n<li>RangeError：范围错误  <code>RangeError是当一个只超出有效范围时发生的错误。主要的有几种情况，第一是数组长度为负数，第二是Number对象的方法参数超出范围，以及函数堆栈超过最大值。</code></li>\n<li>TypeError 类型错误  <code>变量或参数不是预期类型时发生的错误。比如使用new字符串、布尔值等原始类型和调用对象不存在的方法就会抛出这种错误，因为new命令的参数应该是一个构造函数。</code></li>\n<li>URIError，URL 错误  <code>URI相关参数不正确时抛出的错误，主要涉及encodeURI、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape(）六个函数</code></li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>try/catch/finally</p>\n</blockquote>\n<ul>\n<li>\n<p><code>try</code>  用于检查抛出异常</p>\n</li>\n<li>\n<p><code>catch</code>  用于抓住异常，其参数便是 try 抛出的值</p>\n</li>\n<li>\n<p><code>finally</code>  内的代码无论如何总会执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter a number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// var t = prompt('enter a number'); \t\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token string\">'wocao'</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//wocao \t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>注意:</p>\n<ul>\n<li>\n<p>try 后面至少要跟随一个 catch 或者 finally</p>\n</li>\n<li>\n<p>catch 的参数有局部作用域，只在 catch 语句中有效</p>\n</li>\n<li>\n<p>如果没有 catch 从句，执行 finally 后会向上传播异常，直到找到能处理这个异常的 catch 从句</p>\n</li>\n</ul>\n<h4 id=\"小知识-断点调试\"><a class=\"卓越科技-\" href=\"#小知识-断点调试\">#</a> 小知识：断点调试</h4>\n<ul>\n<li><code>浏览器中按F12 --&gt; sources --&gt; 找到需要要调试的文件 --&gt; 在程序的某一行设置断点</code></li>\n<li><code>Wath</code> : 监视，通过 watch 可以监视变量的值的变化，非常的常用。</li>\n<li><code>F11</code> : 程序单步执行，让程序行一行的执行，这个时候，观赛 watch 中变量的值的变化。</li>\n<li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决 bug 的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li>\n<li>代码调试非常的简单，只要记住代码调试的这几个按钮的作用即可，后面还会学到很多的代的调试技巧。</li>\n</ul>\n<h3 id=\"数组\"><a class=\"卓越科技-\" href=\"#数组\">#</a> 数组</h3>\n<blockquote>\n<p>一组数据的集合</p>\n</blockquote>\n<h4 id=\"创建方式\"><a class=\"卓越科技-\" href=\"#创建方式\">#</a> 创建方式</h4>\n<ol>\n<li>\n<p>利用 new 关键字创建数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用数组字面量创建数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dada'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意</p>\n<ul>\n<li>\n<p>数组里面可以放任何数据类型</p>\n</li>\n<li>\n<p>数组里面的数据称为数组元素</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"数组的索引\"><a class=\"卓越科技-\" href=\"#数组的索引\">#</a> 数组的索引</h4>\n<ul>\n<li>\n<p>索引：用来访问数组元素的序号 ( <code>从0开始,最大为2^32 - 1</code> )</p>\n</li>\n<li>\n<p>数组的长度是元素个数，不要跟索引号混淆</p>\n</li>\n</ul>\n<h4 id=\"数组的遍历\"><a class=\"卓越科技-\" href=\"#数组的遍历\">#</a> 数组的遍历</h4>\n<ul>\n<li>\n<p>遍历：就是把数组中的所有元素从头到尾访问一次；</p>\n</li>\n<li>\n<p><code>数组名.length</code> : 动态监测数组元素的个数，一般循环遍历时长度都用这个来表示</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> date<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"数组元素增加\"><a class=\"卓越科技-\" href=\"#数组元素增加\">#</a> 数组元素增加</h4>\n<ol>\n<li>\n<p>通过修改 length 新增数组元素</p>\n<p>先修改数组长度，再对新增元素赋值</p>\n<p>若修改后的长度 &lt;原先的长度，则原数组会被截取。若修改后的长度&gt; 原先的长度，则原数组会添加多余个数的 undefined</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过修改数组索引的方式增加数组元素</p>\n<p>直接对未赋值的数组元素赋值，若赋值的索引号已被占用，则会被替换为新的元素值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：不要对数组名直接赋值，否则会清除所有数组元素</p>\n</li>\n</ol>\n<h3 id=\"函数\"><a class=\"卓越科技-\" href=\"#函数\">#</a> 函数</h3>\n<blockquote>\n<p>封装了一段可被重复调用执行的代码块，通过函数可以实现大量代码的重复使用</p>\n</blockquote>\n<h4 id=\"函数使用步骤\"><a class=\"卓越科技-\" href=\"#函数使用步骤\">#</a> 函数使用步骤</h4>\n<ul>\n<li>\n<p>声明函数</p>\n<p>声明方式 1:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    函数体<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>注意 :</em></p>\n<ol>\n<li>\n<p>function 为声明函数的关键字，全部小写</p>\n</li>\n<li>\n<p>函数名一般为动词，代表此函数要做什么</p>\n</li>\n<li>\n<p>函数声明后被调用才能执行，不调用不执行</p>\n</li>\n<li>\n<p>函数声明一般出现在 js 代码的顶层，也可以嵌套在其他函数中，但是只能嵌套在那些函数顶层中，不能出现在 if , while 或其他语句中</p>\n</li>\n<li>\n<p>使用可选参数设计函数时，应该确保把可选的参数放参数列表的末尾</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>声明方式 2 :</p>\n<p><code>var 变量名 = function(参数1,参数2,...)&#123;&#125;; (匿名函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数调用</p>\n<p><code>函数名();</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者</p>\n<p><code>变量名(); 针对第二种声明方式</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ul>\n<li>调用函数时一定记得写 <code>小括号</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数的参数\"><a class=\"卓越科技-\" href=\"#函数的参数\">#</a> 函数的参数</h4>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>形参</code></td>\n<td>形式上的参数 函数定义的适合 传递的参数 当前并不知道是什么</td>\n</tr>\n<tr>\n<td><code>实参</code></td>\n<td>实际上的参数 函数调用的时候传递的参数 实参是传递给形参的</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>多个参数之间逗号隔开</p>\n</li>\n<li>\n<p>如果实参个数多于形参个数，会取到形参的个数</p>\n</li>\n<li>\n<p>如果实参个数小于形参的个数，没有赋值的形参则为 undefined , 结果为 NaN</p>\n</li>\n<li>\n<p>调用数组时直接写数组名字或者整个数组元素即可</p>\n</li>\n</ul>\n<h4 id=\"函数返回值\"><a class=\"卓越科技-\" href=\"#函数返回值\">#</a> 函数返回值</h4>\n<ul>\n<li>\n<p>函数只是实现某种功能，最终结果需要 return 返回数值，return 只能返回一个值</p>\n</li>\n<li>\n<p>函数如果没有 return, 返回的是 undefined</p>\n</li>\n<li>\n<p>return 也有终止函数的功能</p>\n</li>\n<li>\n<p>可以利用数组实现返回多个值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">,</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">,</span>num1 <span class=\"token operator\">*</span> num2<span class=\"token punctuation\">,</span> num1 <span class=\"token operator\">/</span> num2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"arguments的使用\"><a class=\"卓越科技-\" href=\"#arguments的使用\">#</a> arguments 的使用</h4>\n<p>存储函数传递的所有实参</p>\n<blockquote>\n<p>arguments 是 Arguments 对象的实例，是当前函数的一个内置对象，所有函数都内置了一个 arguments 对象，arguments 只能在函数中调用，可以按照数目获取函数的实参的参数值 (调用函数时写的参数而不是定义函数时写的形参), 当不确定有多少个参数传递的时候，可以用 arguments 来获取。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>arguments 是一个伪数组，可以进行遍历，特点如下:</p>\n<ol>\n<li>\n<p>具有 length 属性</p>\n</li>\n<li>\n<p>按索引方式储存数据</p>\n</li>\n<li>\n<p>不具有数组的  <code>push</code>  、 <code>pop</code>  等方法</p>\n</li>\n</ol>\n<p>arguments 的属性</p>\n<p><code>arguments.callee</code> : 返回 arguments 所在的函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">whoIsCalling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">whoIsCalling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 whoIsCalling 函数的代码</span></pre></td></tr></table></figure><p>该属性可用来实现回调</p>\n<h4 id=\"小知识\"><a class=\"卓越科技-\" href=\"#小知识\">#</a> 小知识</h4>\n<blockquote>\n<p>在 JS 中，代码可以对函数进行操作。JS 中的函数是真正的数据，可以被存储在变量中、数组和对象中，可以作为参数传递给其他函数</p>\n</blockquote>\n<h4 id=\"函数的属性方法\"><a class=\"卓越科技-\" href=\"#函数的属性方法\">#</a> 函数的属性方法</h4>\n<p><code>函数.length</code> : 返回函数定义时形参的个数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"js的预解析小难点看案例\"><a class=\"卓越科技-\" href=\"#js的预解析小难点看案例\">#</a> JS 的预解析 (小难点，看案例)</h3>\n<h4 id=\"js引擎运行分两步\"><a class=\"卓越科技-\" href=\"#js引擎运行分两步\">#</a> js 引擎运行分两步</h4>\n<ol>\n<li>\n<p>预解析:  <code>js 引擎会把 js 里面所有的 var 和 function 提升到当前作用域最前面</code></p>\n</li>\n<li>\n<p>代码执行：按书写顺序依次执行代码</p>\n</li>\n</ol>\n<h4 id=\"预解析分为\"><a class=\"卓越科技-\" href=\"#预解析分为\">#</a> 预解析分为</h4>\n<ol>\n<li>\n<p>变量预解析 (变量提升): 把 var 提升到当前作用域的最前面，但不赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>等价于 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> num<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>等价于 </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">var</span> fn<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数预解析 (函数提升): 把所有函数声明提升到当前作用域最前面，但不调用函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">con</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">con</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>等价于 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">con</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">con</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>var a = b = c = 9;</code>  预解析后等于 <code>var a;a = 9;b = 9;c = 9;</code>   <code>b和c变成全局变量</code></p>\n</li>\n</ol>\n<h3 id=\"js的对象\"><a class=\"卓越科技-\" href=\"#js的对象\">#</a> JS 的对象</h3>\n<h4 id=\"对象\"><a class=\"卓越科技-\" href=\"#对象\">#</a> 对象</h4>\n<blockquote>\n<p>一组无序的相关属性和方法的集合，所有的事物 都是对象，除了字符串、数字、true、false、null 和 undefined 其他都是对象 (事实上字符串数字布尔值可以被包装为包装对象)</p>\n</blockquote>\n<h4 id=\"对象由属性和方法构成\"><a class=\"卓越科技-\" href=\"#对象由属性和方法构成\">#</a> 对象由属性和方法构成</h4>\n<blockquote>\n<p>属性：事物的特征，在对象中用属性来表示 (常用名词), 属性值可以是任意的 js 表达式，等同于变量。</p>\n</blockquote>\n<p>属性两种类型:</p>\n<ul>\n<li>\n<p>自有属性：直接在对象中定义的属性</p>\n</li>\n<li>\n<p>继承属性：通过原型对象继承的属性</p>\n</li>\n</ul>\n<p>属性的三个特性:</p>\n<ul>\n<li>\n<p><code>值(value)</code> : 属性的值</p>\n</li>\n<li>\n<p><code>可写(writable)</code> : 表明是否可以设置该属性的值</p>\n</li>\n<li>\n<p><code>可枚举(enumerable)</code> : 表示是否可以通过 for/in 循环返回该属性</p>\n</li>\n<li>\n<p><code>可配置(configurable)</code> : 表明是否可以删除或者修改该属性</p>\n</li>\n<li>\n<p><code>方法</code> ：事物的行为，在对象中用方法来表示 (常用动词), 即存储在对象中的函数</p>\n</li>\n</ul>\n<h4 id=\"对象有三种\"><a class=\"卓越科技-\" href=\"#对象有三种\">#</a> 对象有三种</h4>\n<ol>\n<li>\n<p>自定义对象</p>\n</li>\n<li>\n<p>内置对象</p>\n</li>\n<li>\n<p>宿主对象 (前两者属于 ECMAscript , 后者属于客户端 JavaScript)</p>\n</li>\n</ol>\n<h4 id=\"创建对象\"><a class=\"卓越科技-\" href=\"#创建对象\">#</a> 创建对象</h4>\n<ul>\n<li>\n<p>用字面量创建对象</p>\n<p><code>var 对象名 = &#123; 属性名: '属性值', 属性名: '属性值', 。。。&#125;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    uname<span class=\"token operator\">:</span> <span class=\"token string\">'zykj'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sex<span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用对象</p>\n<ol>\n<li>\n<p><code>对象名.属性名</code></p>\n</li>\n<li>\n<p><code>对象名['属性名']</code>  (即作为关联数组的对象，允许动态地将任意数值和任意字符串关联在一起)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 第二种方法 对象名 [' 属性名 '] </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>变量、属性、函数、方法的区别</p>\n<ol>\n<li>\n<p>变量和属性都是用来存储数据，但变量需要声明属性不需要，变量可以直接写变量名调用，属性必须 <code>对象名.属性名</code> 调用，变量和属性基本等同</p>\n</li>\n<li>\n<p>函数和方法都是实现某种功能。函数是单独声明且调用时是写 <code>函数名()</code> 。方法在对象里声明且调用为 <code>对象.方法()</code> , 对象中的函数即为方法</p>\n</li>\n</ol>\n</li>\n<li>\n<p>用 new Object 创建对象</p>\n<p>利用等号对属性进行赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>obj<span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> <span class=\"token string\">'zykj'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj<span class=\"token punctuation\">.</span>age  <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>obj<span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用构造函数构造多个对象</p>\n<p><code>构造函数</code> ：就是把对象里面一些相同的属性和方法抽出封装起来的函数，即构造对象的函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">构造函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">形参</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>属性 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">方法</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>var 对象名 = new 构造函数名(实参);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> zykj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zykj'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意点以及构造函数执行过程:</p>\n<ol>\n<li>\n<p>构造函数名字首字母一般大写</p>\n</li>\n<li>\n<p>构造函数不需要 return</p>\n</li>\n<li>\n<p>调用构造函数 必须使用 new 构造函数在内存中创建了一个空的对象</p>\n</li>\n<li>\n<p>必须使用 this , this 指向 new 创建的空对象</p>\n</li>\n<li>\n<p>执行构造函数的代码后，就会给这个空对象添加属性和方法</p>\n</li>\n<li>\n<p>new 会返回创建后的对象</p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"遍历对象\"><a class=\"卓越科技-\" href=\"#遍历对象\">#</a> 遍历对象</h4>\n<blockquote>\n<p>语法:  for (变量 in 对象){} 该方法会 <code>枚举所有可枚举的属性,包括自有属性和继承属性</code>  (除非利用 Object.defineProperty () 人为设定</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历输出属性名    </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历输出属性值 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意:</p>\n<ul>\n<li>\n<p>k 可以改为任意变量名，一般用 k</p>\n</li>\n<li>\n<p>k 为数组</p>\n</li>\n<li>\n<p>也可以用于数组！！！</p>\n</li>\n<li>\n<p>该方法会枚举所有可枚举的属性，包括自有属性和继承属性 (除非利用 Object.defineProperty () 人为设定为不可枚举)</p>\n</li>\n<li>\n<p>许多预定义内部属性和方法，包括所有的内部方法都是不可枚举的</p>\n</li>\n</ul>\n<h4 id=\"删除属性\"><a class=\"卓越科技-\" href=\"#删除属性\">#</a> 删除属性</h4>\n<p>语法: delete 属性</p>\n<p>删除运算数指定的 <code>对象的属性、数组元素或变量</code>  (严格模式不可删除)。返回布尔值</p>\n<p>内部核心属性、客户端属性、用 var 语句声明的用户定义变量都不能删除</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    num<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">20</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//num 消失</span></pre></td></tr></table></figure><p>注意:</p>\n<p>delete:  <code>只是断开属性和宿主对象的联系,而不会去操作属性中的属性</code></p>\n<h4 id=\"检查属性的存在性\"><a class=\"卓越科技-\" href=\"#检查属性的存在性\">#</a> 检查属性的存在性</h4>\n<ol>\n<li>\n<p>检测对象或数组中是否有某个属性，返回布尔值</p>\n<p>语法：属性名 in 对象或数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    num<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">20</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>注意：该方法可以检测所有的属性方法，包括自定义类内置的和原型链上的以及原始类的属性方法</p>\n</li>\n<li>\n<p>只能检测对象的自有属性</p>\n<p>语法:  <code>对象.hasOwnProperty(属性名)</code>  返回布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>male <span class=\"token operator\">=</span> <span class=\"token string\">'man'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> zykj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zykj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zykj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"确定对象类型\"><a class=\"卓越科技-\" href=\"#确定对象类型\">#</a> 确定对象类型</h4>\n<ol>\n<li>\n<p><code>typeof</code> : 用于区分 number、string、boolean、undefined、function、symbol 这些基本类型</p>\n</li>\n<li>\n<p><code>instanceof</code> : 一旦确定了一个值不是基本类型或函数，就可以用 instanceof 来确定是哪种内建对象的实例，对于基本类型包装对象无效</p>\n</li>\n<li>\n<p><code>Object.toString()</code> : 返回的是 <code>[object class]</code> , class 是对象的内部类型，通常与该对象的构造函数名字对应。只能返回 Array、Function、Date、String、Number、Boolean、Symbol, 其他一律返回 Object</p>\n</li>\n<li>\n<p><code>constructor</code> : 返回原型对象所属的类，返回的是整个构造函数</p>\n</li>\n</ol>\n<h4 id=\"序列化对象\"><a class=\"卓越科技-\" href=\"#序列化对象\">#</a> 序列化对象</h4>\n<blockquote>\n<p>将对象的状态转为字符串或将字符串还原为对象</p>\n</blockquote>\n<p>利用 <code>JSON.stringify()</code>  和 <code>JSON.parse()</code>  来序列化和还原对象</p>\n<p>JSON (JavaScript Object Notation): JavaScript 对象表示法</p>\n<h4 id=\"内置对象\"><a class=\"卓越科技-\" href=\"#内置对象\">#</a> 内置对象</h4>\n<p>常用 Math Date Array String 等</p>\n<h5 id=\"数学对象\"><a class=\"卓越科技-\" href=\"#数学对象\">#</a> 数学对象</h5>\n<blockquote>\n<p>不是构造函数，无需用 new 调用。而是可以直接调用其类属性及类方法</p>\n</blockquote>\n<ul>\n<li>\n<p>调用属性 如 输出 pi 值:  <code>Math.PI</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.14....</span></pre></td></tr></table></figure></li>\n<li>\n<p>调用方法 如 取最大值:  <code>Math.max</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>如果有一个或一个以上的值为非整数型，则返回 NaN</p>\n<p>如果没有赋值，则返回 Infinity</p>\n</li>\n<li>\n<p>求开根号 <code>Math.sqrt(x)</code>  返回 x 的开根号值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">81</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>求绝对值 <code>Math.abs</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1 有隐式转换 可以直接字符串转为数字型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈哈'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN</span></pre></td></tr></table></figure></li>\n<li>\n<p>三个取整方法</p>\n<ol>\n<li>\n<p><code>Math.floor()</code> : 向下取整，往最小了取值，不会四舍五入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Math.ceil()</code> : 往上取整，往最大了取，不会四舍五入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 console.log(Math.ceil(1.1)); // 2</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Math.round()</code> : 四舍五入取整 (其他都是四舍五入，只有 5 是往大了取)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>随机数</p>\n<p><code>Math.random()</code> : 返回一个随机的 0 到 1 之间的小数 (不包含 0 和 1) 且不跟参数</p>\n<p>得到两个整数之间的随机整数:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span>max</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">-</span>min<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"日期对象\"><a class=\"卓越科技-\" href=\"#日期对象\">#</a> 日期对象</h5>\n<blockquote>\n<p>Date () 日期对象 是一个构造函数 必须使用 new 来调用创建自己的日期对象</p>\n</blockquote>\n<ul>\n<li>\n<p>使用方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>参数写法</p>\n<p>无参数则返回当前系统时间</p>\n<p>数字型: 2019,10,01<br />\n 字符型: '2019-10-1 08:08:08'</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> date1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>or </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> date2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2019-10-1 08:08:08'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>具体方法</p>\n<p><code>返回当前年份</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>返回当前月份</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>注意:  <code>是从0开始到11 所以应该+1 否则得到的月份少一个月</code></p>\n<p><code>返回当前号数</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>返回周几</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意:  <code>是从0(即星期日)开始到6(星期六)</code></p>\n<p><code>返回小时</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>返回分钟</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>返回秒钟</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>返回自1970年来的总毫秒数</code></p>\n<ol>\n<li>\n<p><code>对象名.getvalueOf()</code>  或者  <code>对象名.getTime()</code></p>\n</li>\n<li>\n<p>var 对象名 = new Date ();</p>\n</li>\n<li>\n<p>console.log (Date.now ());// 低版本浏览器不支持</p>\n</li>\n</ol>\n<p><code>获取时间</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> nowTime <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回的是当前时间总的毫秒数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">var</span> inputTime <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回的是用户输入时间的总毫秒数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> times <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>inputTime <span class=\"token operator\">-</span> nowTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//times 是剩余时间总的毫秒数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>times <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 天</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  d <span class=\"token operator\">=</span> d <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> d <span class=\"token operator\">:</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>times <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">%</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  h <span class=\"token operator\">=</span> h <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> h <span class=\"token operator\">:</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>times <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  m <span class=\"token operator\">=</span> m <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">:</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>times  <span class=\"token operator\">%</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前的秒</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  s <span class=\"token operator\">=</span> s <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">:</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> d <span class=\"token operator\">+</span> <span class=\"token string\">'天'</span> <span class=\"token operator\">+</span> h <span class=\"token operator\">+</span> <span class=\"token string\">'时'</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">+</span> <span class=\"token string\">'分'</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">'秒'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2020-5-13 17:29:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"数组对象\"><a class=\"卓越科技-\" href=\"#数组对象\">#</a> 数组对象</h5>\n<ul>\n<li>\n<p>创建方式</p>\n<ol>\n<li>\n<p>利用字面量</p>\n<pre><code>var arr = [1,2,3]; \nconsole.log(arr[0]);\n</code></pre>\n</li>\n<li>\n<p>利用 <code>new Array()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空数组 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 长度为 2 的空数组 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内容为 2 和 3 的数组</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>检测变量是否为数组的方法</p>\n<ol>\n<li>\n<p>利用 <code>instanceof</code></p>\n<p>变量名 instanceof Array</p>\n<p>返回的是布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 false</span></pre></td></tr></table></figure><p>注：亦可用来判断是否为对象类型：变量名 instanceof Object</p>\n</li>\n<li>\n<p>利用 Array 内置对象的行为</p>\n<p><code>Array.isArray(变量)</code></p>\n<p>返回的也是布尔值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TRUE </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FALSE</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>给数组添加元素的方法</p>\n<ol>\n<li>\n<p>末尾添加</p>\n<p><code>数组名.push(元素1,元素2,...);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dada'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回结果是数组长度</span></pre></td></tr></table></figure></li>\n<li>\n<p>头部添加</p>\n<p><code>数组名.unshift(元素1,元素2,...);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'purple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回结果是数组长度</span></pre></td></tr></table></figure></li>\n<li>\n<p>尾部删除</p>\n<p><code>数组名.pop()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//pop 没有参数 返回删除的元素 一次只能删除一个元素</span></pre></td></tr></table></figure></li>\n<li>\n<p>头部删除</p>\n<p><code>数组名.shift()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 没有参数 返回删除的元素 一次只能删除一个</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>总结</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>push(参数1...)</code></td>\n<td><code>末尾添加一个或多个元素</code> ，注意修改原数组</td>\n<td>返回新的长度</td>\n</tr>\n<tr>\n<td><code>pop() </code></td>\n<td><code>删除数组最后一个元素</code> ，把数组长度减 1 无参数、修改原数组</td>\n<td>返回它删除元素的值</td>\n</tr>\n<tr>\n<td><code>unshift(参数1...)</code></td>\n<td><code>向数组的开头添加一个或更多元素</code> ，注意修改原数组</td>\n<td>返回新的长度</td>\n</tr>\n<tr>\n<td><code>shift()</code></td>\n<td><code>删除数组的第一个元素</code> ，数组长度减 1 无参数。修改数组</td>\n<td>返回第一个元素</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>数组排序的方法</p>\n<ol>\n<li>\n<p>数组翻转</p>\n<p><code>数组名.reverse();</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组排序</p>\n<p><code>数组名.sort();</code> : 只对一位数起效，多位数会出错</p>\n<p><code>数组名.sort(function(a,b)&#123; a - b&#125;)</code> : 升序排序</p>\n<p><code>数组名.sort(function(a,b)&#123; b - a&#125;)</code> : 降序排序</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//return a - b;  升序排列 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>获取数组元素索引方式</p>\n<ol>\n<li>\n<p><code>变量名.indexOf(元素值)</code> ;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注：返回第一个满足条件的索引号</p>\n<p>如果该数组里找不到元素，则返回 - 1</p>\n</li>\n<li>\n<p><code>变量名.lastIndexOf(元素值);</code></p>\n<p>注：从末尾开始找 返回正序的索引号</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注：只能用于数组，不能用于节点</p>\n</li>\n</ol>\n</li>\n<li>\n<p>数组转为字符串</p>\n<ol>\n<li>\n<p><code>变量名.toString();</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>变量名.join();</code></p>\n<p>把数组所有元素转换成字符串，再把它们连接起来。可以指定一个可选的字符串来分隔结果字符串中的元素。默认为逗号分隔</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//green,blue,pink</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//greenbluepink</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>数组的截取删除连接</p>\n<p>数组链接</p>\n<p><code>数组名1.concat(数组名2);</code></p>\n<p><code>数组名1.concat(元素值,元素值,...);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组删除插入 (改变原数组，返回被删除的值)</p>\n<p><code>数组名.splice(起始位置,删除个数,添加元素)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ha'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xi'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hei'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'he'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> num4 <span class=\"token operator\">=</span> num3<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在第 1 位后插入 'en' </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> num5 <span class=\"token operator\">=</span> num3<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第 1 位开始删除一位  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'xi'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> num6 <span class=\"token operator\">=</span> num3<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'en'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'ha' 'xi' 'en' 'o' 'he'</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组截取 (不会改变原数组，只是截取出来作为新数组)</p>\n<p><code>数组名.slice(开始位置(包含),结束位置(不包含));</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> num7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num7<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3,4,5,6 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num7<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2,3 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//num7 依旧为 1,2,3,4,5,6</span></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"字符串对象\"><a class=\"卓越科技-\" href=\"#字符串对象\">#</a> 字符串对象</h5>\n<blockquote>\n<p>基本包装类型: js 不仅支持数字字符串和布尔值这些数据类型，还支持 Number、String、Boolean 类，这些类是其对应基本数据类型的包装。不仅具有和基本类型一样的值，还定义了用来运算数据的属性和方法</p>\n</blockquote>\n<p>过程:</p>\n<ol>\n<li>\n<p>字符串值内部创建一个 String 包装对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>字符串值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>代替原始的字符串值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量名 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>销毁 temp</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>temp<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>字符串不可变性：字符串赋值后重新赋值需要重新创建内存空间，原先的内存及其值不变。所以不要大量拼接字符串，即字符串的值无法修改</p>\n</blockquote>\n<blockquote>\n<p>字符串所有方法，都不会修改字符串本身内容，而是创建新的字符串</p>\n</blockquote>\n<p>实例方法</p>\n<ul>\n<li>\n<p>根据字符串返回索引值</p>\n<p><code>字符串名.indexOf(具体某个字符串,开始位置(默认无));</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span><span class=\"token string\">'改革春风吹满地,春天来了'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'春'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 2 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'春'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 8</span></pre></td></tr></table></figure></li>\n<li>\n<p>根据索引值返回字符串</p>\n<ol>\n<li>\n<p><code>字符串变量名.charAt(索引值)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>字符串变量名.charCodeAt(索引值)</code> : 返回对应位置字符的 ASCII 码 用于判断用户按键</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>变量名[索引值]</code></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字符串连接</p>\n<p><code>字符串1.concat(字符串2);</code></p>\n<p><code>字符串1.concat(字符,字符,...);</code></p>\n<p>一般用加号</p>\n</li>\n<li>\n<p>字符串截取</p>\n<p><code>字符串.substr(截取起始位置,截取的字符数)</code> : 不改变原字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'改革春风吹满地'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字符串替换</p>\n<p><code>字符串.replace('被替换的字符','替换为的字符')</code></p>\n<p>返回的是新修改后的字符串，原字符不变</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'andy'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有一个字符串 'abcoefoxyozzopp' 要求把所有 o 替换为 * </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'abcoefoxyozzopp'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> str1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    str1 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字符串转为数组</p>\n<p><code>字符串.split('分隔符')</code></p>\n<p>原字符串用什么分割，就用什么做分隔符 不改变原字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">'red,pink,blue'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> str3 <span class=\"token operator\">=</span> <span class=\"token string\">'red&amp;pink&amp;blue'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字符串大小写转换</p>\n<p><code>字符串.toUpperCase()</code> : 将字符串转为大写</p>\n<p><code>字符串.toLowerCase()</code> : 将字符串转为大写</p>\n<p>注：字符串大小比较是按对应字母一个一个比</p>\n</li>\n<li>\n<p>去除字符串左右的空格</p>\n<p><code>字符串.trim()</code></p>\n<p>可用来去除表单只填入空格时造成的 bug</p>\n</li>\n<li>\n<p>类方法</p>\n<p>根据 ASCII 码 返回字符串</p>\n<p><code>String.fromCharCode(num1, ..., numN)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//N</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"简单和复杂数据类型\"><a class=\"卓越科技-\" href=\"#简单和复杂数据类型\">#</a> 简单和复杂数据类型</h3>\n<h4 id=\"简单数据类型-2\"><a class=\"卓越科技-\" href=\"#简单数据类型-2\">#</a> 简单数据类型</h4>\n<p>简单数据类型 (基本数据类型或值类型), 存储时变量中存放的是值本身，因此叫值类型，如 number、boolean、undefined、null。都具有固定的内存大小</p>\n<p>其中 null 的返回类型是 Object , 因此一般可先用来定义对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结果为 object</span></pre></td></tr></table></figure><p>如果有个变量打算存储为对象但没想好放什么属性和行为，那么就可以先设置为 null 类型</p>\n<h4 id=\"复杂数据类型-2\"><a class=\"卓越科技-\" href=\"#复杂数据类型-2\">#</a> 复杂数据类型</h4>\n<blockquote>\n<p>复杂数据类型 (引用类型): 变量中存储的仅仅是地址，如对象及其特殊类型数组和函数</p>\n</blockquote>\n<p>其中字符串不能很好地适合基本类型和引用类型的二分法。因为字符串不是对象，被当做基本类型，而字符串又有任意的长度，所以也可以被认为是引用类型。字符串是通过传值来比较</p>\n<h4 id=\"堆和栈\"><a class=\"卓越科技-\" href=\"#堆和栈\">#</a> 堆和栈</h4>\n<ul>\n<li>\n<p>栈：存放简单数据类型，由操作系统自动分配释放存放函数的参数值、局部变量的值等。简单数据类型直接查找存放在栈中的变量的值 (简单数据&gt; 栈 &gt; 变量 &gt; 值)</p>\n</li>\n<li>\n<p>堆：存放复杂数据类型，一般由程序员分配释放。复杂数据类型通过存放在栈中的变量中的地址找到存放在堆中的值 (复杂数据&gt; 栈 &gt; 变量 &gt; 地址 &gt; 堆 &gt; 值)</p>\n</li>\n</ul>\n<h4 id=\"简单数据类型的传参传值\"><a class=\"卓越科技-\" href=\"#简单数据类型的传参传值\">#</a> 简单数据类型的传参 (传值)</h4>\n<p>函数的形参可以看做一个变量，当把一个变量传给函数形参就等于把变量的值复制一份给形参。所以对函数内变量的修改不会影响外部变量</p>\n<h4 id=\"复杂数据类型的传参传址\"><a class=\"卓越科技-\" href=\"#复杂数据类型的传参传址\">#</a> 复杂数据类型的传参 (传址)</h4>\n<p>函数的形参可以看做一个变量，当把一个变量传给函数形参就等于把变量存放的堆地址复制一份给形参，即形参和实参保存的是同个堆地址，所以操作的是同一个对象。</p>\n<h2 id=\"web-apis\"><a class=\"卓越科技-\" href=\"#web-apis\">#</a> Web APIs</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWs0NDExdzdzVg==\">黑马程序员</span></p>\n</div>\n<ul>\n<li>\n<p>DOM: 文档对象模型 (document object model)</p>\n</li>\n<li>\n<p>BOM: 浏览器对象模型</p>\n</li>\n<li>\n<p><code>API(application programming interafce,应用程序编程接口)</code> : 是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节</p>\n</li>\n<li>\n<p><code>Web API</code> : 浏览器提供的一套 <code>操作浏览器功能</code> 和 <code>页面元素</code> 的 API</p>\n</li>\n</ul>\n<p>可以将 Web 浏览器当做简单操作系统，就可以 web 应用定义为 JavaScript 访问更多浏览器提供的高级服务的 Web 页面</p>\n<p>文档中的 JavaScript 的角色定位：增强用户浏览体验，使信息的获取和传递更容易。而不是降低网页的可访问性。</p>\n<h3 id=\"dom\"><a class=\"卓越科技-\" href=\"#dom\">#</a> DOM</h3>\n<blockquote>\n<p>文档对象模型 (document object model), 处理 HTML 或者 XML 的标准编程接口，通过 DOM 可以改变网页的内容、结构和样式</p>\n</blockquote>\n<ul>\n<li>\n<p>文档：一个 <code>页面就是一个文档</code> ，DOM 中用 <code>document</code>  表示</p>\n</li>\n<li>\n<p>元素:  <code>页面中所有标签都是元素</code> ，DOM 用 <code>element</code>  表示</p>\n</li>\n<li>\n<p>节点：网页中所有内容都是节点 (标签属性文本注释等),DOM 中用 <code>node</code>  表示</p>\n</li>\n</ul>\n<p><code>DOM把以上内容都看作是对象</code></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200428211339.png\" alt=\"\" /></p>\n<h4 id=\"获取页面元素\"><a class=\"卓越科技-\" href=\"#获取页面元素\">#</a> 获取页面元素</h4>\n<ol>\n<li>\n<p>根据 ID 获取</p>\n</li>\n<li>\n<p>根据标签名获取</p>\n</li>\n<li>\n<p>根据 h5 新增属性获取</p>\n</li>\n<li>\n<p>特殊元素获取</p>\n</li>\n<li>\n<p>根据 window 属性获取 (不推荐)</p>\n</li>\n<li>\n<p>利用 HTMLCollection (HTML 集合) 快捷获取</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>根据 ID 获取</p>\n<p><code>document.getElementById(ID名)</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>2019-9-9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;div id=\"time\">2019-9-9&lt;/div> \t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object\t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意点</p>\n<ol>\n<li>\n<p>因为文档页面从上往下加载，所以先得有标签，script 写到标签下面</p>\n</li>\n<li>\n<p>参数 id 是大小写敏感的字符串 一定要加引号</p>\n</li>\n<li>\n<p>返回的是一个文档对象 object (即有众多属性和方法)</p>\n</li>\n<li>\n<p><code>console.dir</code>  打印对象所有的属性和方法</p>\n</li>\n</ol>\n</li>\n<li>\n<p>根据标签名获取</p>\n<p><code>document.getElementsByTagName(标签名)</code></p>\n<p><code>父元素.getElementsByTagName(标签名)</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ol<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, 3: HTMLLIElement, 4: HTMLLIElement…&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lis<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;li>3&lt;/li></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">var</span> ol <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection &#123;0: HTMLOListElement, 1: HTMLOListElement, constructor:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"li\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, constructor: Object&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">var</span> ol <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ol'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection &#123;0: HTMLLIElement, 1: HTMLLIElement, 2: HTMLLIElement, constructor: Object&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>返回的值是伪数组，即所有相应标签的集合，即以伪数组的形式存储 (无论有多少个，即使是 0 个), 单个元素仍为对象，得到的元素是动态的</p>\n</li>\n<li>\n<p>可用遍历方式打印里面具体的元素对象</p>\n</li>\n<li>\n<p>通过父元素获取标签时，父元素必须是具体的单个对象，如果父元素是通过标签名获取，则获取其子元素时应加上索引号。也可以直接通过 ID 获取不加索引号</p>\n</li>\n</ol>\n</li>\n<li>\n<p>H5 新增，返回的是 NodeList 对象</p>\n<p><code>document.getElementsByClassName(标签名)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> box <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTMLCollection &#123;0: HTMLDivElement, constructor: Object&#125;</span></pre></td></tr></table></figure><p>注意</p>\n<ol>\n<li>返回的依旧是伪数组形式</li>\n</ol>\n<br> \n<p><code>document.querySelector(选择器)如(#id,.类名,标签名)</code></p>\n<p>返回指定选择器的 <code>第一个元素</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> firstbox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>firstbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> nav <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#nav'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nav<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:  <code>永远只会返回一个元素对象</code></p>\n<br> \n<p><code>document.querySelectorAll(选择器)</code></p>\n<p>返回选定选择器的所有元素集合</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> allbox <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>allbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lis<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：返回的是伪数组形式 (无论对象元素数量多少)</p>\n</li>\n<li>\n<p>获取特殊元素</p>\n<ol>\n<li>获取 body 元素</li>\n</ol>\n<p><code>document.body</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> bodyEle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bodyEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>获取 html 元素</li>\n</ol>\n<p><code>document.documenElement</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> htmlEle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>htmlEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>获取 head 元素</li>\n</ol>\n<p><code>document.head</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>根据 window 属性获取赋予 id 、name 属性的 html 标签 (不推荐)</p>\n<blockquote>\n<p>如果 HTML 文档中用 id 属性为元素命名，并且 Window 对象没有该名字的属性，那么 Window 对象会创建一个同名属性，该属性指向以该名字命名 id 属性的 html 元素</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;div id=\"one\">&lt;/div> </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>对于 a、iframe、img、form 等标签来说，如果有 name 属性，那么也会有与上面同样的表现。如果有多个相同 name 属性，则具有该名称的隐式全局变量会引用一个伪数组对象</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ii<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ii<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// HTMLCollection(2) [img, img, ii: img] </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 HTMLCollection (HTML 集合) 快捷获取，返回的是 HTMLCollection 对象</p>\n<blockquote>\n<p>HTMLDocument 中定义了一些属性，如 images、forms、links 可以快速获取 img、form、a 等标签</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//HTMLCollection(2) [img, img] \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"事件概述\"><a class=\"卓越科技-\" href=\"#事件概述\">#</a> 事件概述</h4>\n<blockquote>\n<p>可以被 javascript 侦测到的行为</p>\n</blockquote>\n<p>事件三要素</p>\n<ol>\n<li>\n<p>事件源 (可以通过获取对象方式获取)</p>\n</li>\n<li>\n<p>事件类型 (设置事件的触发方式)</p>\n</li>\n<li>\n<p>事件处理程序 (通过函数赋值方式完成)</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点秋香'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：第一句为获取事件源 <code>.onclick</code>  为事件类型 function 及后面为事件处理程序</p>\n<p>事件执行三步骤:</p>\n<ol>\n<li>\n<p>获取事件源</p>\n</li>\n<li>\n<p>绑定事件</p>\n</li>\n<li>\n<p>添加事件处理程序</p>\n</li>\n</ol>\n<h4 id=\"常见鼠标事件\"><a class=\"卓越科技-\" href=\"#常见鼠标事件\">#</a> 常见鼠标事件</h4>\n<table>\n<thead>\n<tr>\n<th>鼠标事件</th>\n<th>触发事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onclick</code></td>\n<td>鼠标点击左键触发</td>\n</tr>\n<tr>\n<td><code>ondblclick</code></td>\n<td>鼠标双击事件</td>\n</tr>\n<tr>\n<td><code>onmouseover</code></td>\n<td>鼠标经过触发</td>\n</tr>\n<tr>\n<td><code>onmouseout</code></td>\n<td>鼠标离开触发</td>\n</tr>\n<tr>\n<td><code>onfocus</code></td>\n<td>获取鼠标焦点触发</td>\n</tr>\n<tr>\n<td><code>onblur</code></td>\n<td>失去鼠标焦点触发</td>\n</tr>\n<tr>\n<td><code>onmousemove</code></td>\n<td>鼠标移动触发</td>\n</tr>\n<tr>\n<td><code>onmouseup</code></td>\n<td>鼠标弹起触发</td>\n</tr>\n<tr>\n<td><code>onmousedown</code></td>\n<td>鼠标按下触发</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"改变元素内容不适用于表单\"><a class=\"卓越科技-\" href=\"#改变元素内容不适用于表单\">#</a> 改变元素内容 (不适用于表单)</h4>\n<ol>\n<li>\n<p><code>innerText</code> : 不识别 html 标签，非标准，会去除空格和换行</p>\n</li>\n<li>\n<p><code>innerHTML</code> : 识别 html 标签，W3C 标准，不会去除空格和换行</p>\n</li>\n<li>\n<p><code>insertAdjacentHTML(位置,目标元素)</code> : 可以实现在目标元素中特定位置插入 <code>字符串</code> <br />\n位置</p>\n<ul>\n<li><code>beforebegin</code> ：元素自身的前面。</li>\n<li><code>afterbegin</code> ：插入元素内部的第一个子节点之前。</li>\n<li><code>beforeend</code> ：插入元素内部的最后一个子节点之后。</li>\n<li><code>afterend</code> ：元素自身的后面。</li>\n</ul>\n</li>\n</ol>\n<p>注：两个属性可读写，可以获取元素内容</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>常用元素属性修改:  <code>src</code> 、 <code>href</code> 、 <code>title</code> 、 <code>alt</code> 、 <code>id</code></p>\n<h4 id=\"改变表单元素内容\"><a class=\"卓越科技-\" href=\"#改变表单元素内容\">#</a> 改变表单元素内容</h4>\n<p><code>input.value</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'haha'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>disabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>表单元素更改只能用 value</p>\n</li>\n<li>\n<p>disabled 实现表单禁用</p>\n</li>\n<li>\n<p>函数中的 this 指向函数的调用者</p>\n</li>\n<li>\n<p>这些都是属性不是样式，不用写  <code>style</code>   <code>img</code>   <code>src</code>  等等</p>\n</li>\n</ol>\n<p>可以通过修改表单 type 类型实现密码明文密文的转换</p>\n<h4 id=\"改变元素对象样式\"><a class=\"卓越科技-\" href=\"#改变元素对象样式\">#</a> 改变元素对象样式</h4>\n<ol>\n<li>\n<p><code>element.style.样式 = '属性值';</code> :  一般用于样式较少或功能简单的情况下使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//div.style 里面的样式用驼峰命名法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'purple'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">'400px'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改后的样式为行内样式 权重比较高</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>利用 js style 修改的样式都得用驼峰命名法 如  <code>backgoroundColor</code> 、 <code>fontSize</code></p>\n</li>\n<li>\n<p>js  <code>修改后的样式都以行内样式生成,权重高</code></p>\n</li>\n<li>\n<p>样式的属性都是在 style 中，所以需要些  <code>xx.style.属性</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>通过 <code>element.className</code>  增加类名从而修改样式 (适用于样式较多，功能复杂的情况使用)</p>\n<p>即在 css 先定义好新的样式在新的类名中，再在 js 中对目标元素设置事件利用  <code>className</code>  更换新的类</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">.change</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> purple<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    test<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将当前类名改为 change 从而改变样式 \t\t</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意:  <code>className 会完全覆盖先前的类名</code></p>\n<p><code>若想同时保留新旧类名 则可以在添加时新旧一起写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'first change'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"获得失去焦点\"><a class=\"卓越科技-\" href=\"#获得失去焦点\">#</a> 获得失去焦点</h4>\n<ul>\n<li>\n<p>示例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>获得焦点 (即点击输入框时)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>input<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfocus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获得焦点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>失去焦点 (取消点击输入框时)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>input<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onblur</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失去焦点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"排他思想-算法\"><a class=\"卓越科技-\" href=\"#排他思想-算法\">#</a> 排他思想 (算法)</h4>\n<blockquote>\n<p>如果有同一组元素， <code>想要某一个元素实现某种样式</code> ，那么就需要排他思想</p>\n</blockquote>\n<p><em>步骤 :</em></p>\n<ol>\n<li>\n<p>先排除其他人的样式</p>\n</li>\n<li>\n<p>再设置自己的样式</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> btns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    btns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 想把所有按钮颜色去掉 \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 再修改当前颜色 \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> btns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            btns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"获取自定义属性\"><a class=\"卓越科技-\" href=\"#获取自定义属性\">#</a> 获取自定义属性</h4>\n<ul>\n<li>\n<p>获取属性一般有两种</p>\n<ol>\n<li>\n<p><code>element.属性</code></p>\n</li>\n<li>\n<p><code>element.getAttribute('属性')</code></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>区别</p>\n<ol>\n<li>\n<p>第一种用于获取 <code>元素本身自带的属性</code></p>\n</li>\n<li>\n<p>第二种一般用于获取通过  <code>setAttribute</code>  自定义的属性 (即程序员自己定义的属性), 通过  <code>setAttribute</code>  设置的属性只能用第二种获取</p>\n</li>\n</ol>\n</li>\n<li>\n<p>设置属性值的方法</p>\n<ol>\n<li>\n<p><code>element.属性 = '属性值';</code></p>\n</li>\n<li>\n<p><code>element.setAttribute('属性','值')</code> ;</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>自定义属性也可以通过第一种设置，但只能用 <code>xxx.属性名</code> 获取</p>\n</li>\n<li>\n<p>移除属性的方法</p>\n<p><code>element.removeAttribute('属性');</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>h5 新增自定义属性方法</p>\n<p><code>data-属性名</code></p>\n<p><code>data-开头的属性必定是自定义属性</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-time</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-list-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>andy<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>获取 data 自定义属性方法有两种:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">data-time</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-list-name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>andy<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol>\n<li>\n<p>element.getAttribute( <code>'data-属性名'</code> )</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-list-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-time'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-index'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置属性值</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>element.dataset.data后面的属性名</code>  或  <code>element.dataset['data后面的属性名']</code></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'listName'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特别注意：对于  <code>data-</code>  后面还有横杠的命名的属性值在利用 dataset 获取时应该用 <code>驼峰命名法</code> ，getAttribute 则不用</p>\n</li>\n</ul>\n<h4 id=\"节点\"><a class=\"卓越科技-\" href=\"#节点\">#</a> 节点</h4>\n<blockquote>\n<p>页面中所有内容都是节点，用 node 表示</p>\n</blockquote>\n<h5 id=\"节点的三个属性\"><a class=\"卓越科技-\" href=\"#节点的三个属性\">#</a> 节点的三个属性</h5>\n<ol>\n<li>\n<p>节点类型 ( <code>nodeType</code> )</p>\n</li>\n<li>\n<p>节点名称 ( <code>nodeName</code> )</p>\n</li>\n<li>\n<p>节点值 ( <code>nodeValue</code> )</p>\n</li>\n</ol>\n<pre><code>元素节点nodeType = 1\n\n属性节点nodeType = 2\n\n文本节点nodeType = 3 (文本节点包含文字、空格、换行等)\n</code></pre>\n<p>操作的主要是元素节点</p>\n<blockquote>\n<p>节点可以划分为不同的层级关系，常见的是父子兄层级节点</p>\n</blockquote>\n<h5 id=\"父子节点操作\"><a class=\"卓越科技-\" href=\"#父子节点操作\">#</a> 父子节点操作</h5>\n<ul>\n<li>\n<p>获取父节点</p>\n<p><code>node.parentNode(获得最近的父节点,如果找不到则返回 NULL )</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> erweima <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.erweima'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>erweima<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>获取子节点</p>\n<p><code>node.childNodes</code> : 返回的是元素节点以及文本节点</p>\n<p><code>node.children</code> : 只返回元素节点 获得的是伪数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>获取第一个和最后一个子节点</p>\n<p><code>node.firstChild</code></p>\n<p><code>node.lastChild</code></p>\n<p>以上都返回包括文本节点在内的所有节点  <code>不常用</code></p>\n<p><code>node.firstElementChild</code></p>\n<p><code>node.lastElementChild</code></p>\n<p>只返回元素节点，但是有兼容性问题</p>\n<p>实际写法</p>\n<p><code>node.children[0] 返回第一个</code></p>\n<p><code>node.children[node.children.length-1] 返回最后一个</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ol<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span>ol<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>获取兄弟节点</p>\n<p><code>node.nextSibling</code> : 下一个兄弟节点</p>\n<p><code>node.previousSibling</code> : 上一个兄弟节点</p>\n<p>以上获取的都是包含 <code>文本节点元素节点(#text)</code>  的兄弟节点</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>nextSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>previousSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>node.nextElementSibling</code> : 下一个兄弟元素节点</p>\n<p><code>node.previousElementSibling</code> : 上一个兄弟元素节点</p>\n<p>以上都只获取为元素节点的兄弟节点 有兼容性问题</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>previousElementSibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>解决方案：自己利用节点类型 nodeType 封装一个函数</p>\n</li>\n<li>\n<p>创建节点</p>\n<p><code>document.createElement(元素名称)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>添加节点 (两种方法)</p>\n<ol>\n<li>\n<p><code>node.appendChild(child);</code> : node 为父节点 child 为新创建的节点 添加到父级最后面</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>node.insertBefore(child,指定位置)</code> :  即将新创建的 child 节点添加到指定元素之前</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> lili <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ul<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>lili<span class=\"token punctuation\">,</span>ul<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>删除节点</p>\n<p><code>node.removeChild()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ul<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>克隆节点</p>\n<p><code>node.cloneNode()</code></p>\n<p>括号里参数如果为 <code>空或者是false</code> , 则是 <code>浅拷贝</code>  则只复制  <code>node 本身</code> 、 <code>不复制里面的子节点</code> <br />\n括号里参数如果为 <code>true</code> , 则是 <code>深拷贝</code>  则复制  <code>node 本身、里面的子节点</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> lili <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// li </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> lili <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;li>1&lt;/li></span></pre></td></tr></table></figure></li>\n<li>\n<p>创建文档碎片</p>\n<p><code>document.createDocumentFragment()</code></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/DocumentFragment\"> <code>DocumentFragments</code> </a> 是 DOM 节点。它们不是主 DOM 树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到 DOM 树。在 DOM 树中，文档片段被其所有的子元素所代替。</p>\n<p>因为文档片段存在于<strong>内存中</strong>，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9SZWZsb3c=\">回流</span>（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p>\n</li>\n<li>\n<p>节点的文本内容</p>\n<p><code>node.textContent</code></p>\n<p>textContent 属性设置或者返回指定节点的文本内容。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Coffee<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>哈哈哈<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tea<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>单击按钮获取列表元素的文本内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myFunction()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">var</span> lst<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tx<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>lst<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>结果: Coffee 哈哈哈 Tea</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>--></span></pre></td></tr></table></figure></li>\n</ul>\n<p>附：阻止链接跳转可以对 a 的 href 设置为 <code>javascript:; 或 javacript:void(0)</code></p>\n<h5 id=\"总结\"><a class=\"卓越科技-\" href=\"#总结\">#</a> 总结</h5>\n<ul>\n<li>\n<p>获取父节点  <code>node.parentNode</code></p>\n</li>\n<li>\n<p>获取子节点  <code>node.children</code></p>\n</li>\n<li>\n<p>获取兄弟节点 <code>node.nextElementSiibling</code>    <code>node.previousElementSibling(兼容性差)</code></p>\n</li>\n<li>\n<p>创建节点  <code>document.createElement(节点类型)</code></p>\n</li>\n<li>\n<p>添加节点 尾部添加  <code>node.appendChild() 某个元素之前添加</code>   <code>node.insertBefore(child,指定元素)</code></p>\n</li>\n<li>\n<p>删除节点  <code>node.removeChild() node为删除目标元素的父元素</code></p>\n</li>\n<li>\n<p>复制节点  <code>node.cloneNode()</code></p>\n</li>\n</ul>\n<h4 id=\"三种动态创建元素区别\"><a class=\"卓越科技-\" href=\"#三种动态创建元素区别\">#</a> 三种动态创建元素区别</h4>\n<ol>\n<li>\n<p><code>document.write()</code></p>\n</li>\n<li>\n<p><code>element.innerHTML()</code>  配合字符串使用</p>\n</li>\n<li>\n<p><code>document.createElement()</code>  配合 append、insertbefore 使用</p>\n</li>\n</ol>\n<p>注意</p>\n<ol>\n<li>\n<p><code>document.wirte</code>  如果是文档流执行完毕写入， <code>会导致页面全部重绘</code></p>\n</li>\n<li>\n<p><code>innerHTML</code>  创建多个元素效率更高 前提是不要拼接字符串 而是通过先创建数组再将数组转换为字符串赋予对象的形式</p>\n</li>\n<li>\n<p><code>createElement()</code>  创建多个元素效率相对 innerHTML 的数组赋值方式较低，但是结构更清晰</p>\n</li>\n</ol>\n<p>总结:  <code>不同浏览器下,采取数组赋值的 innerHTML 效率比 creatElement 高</code></p>\n<h3 id=\"事件高级\"><a class=\"卓越科技-\" href=\"#事件高级\">#</a> 事件高级</h3>\n<h4 id=\"注册事件\"><a class=\"卓越科技-\" href=\"#注册事件\">#</a> 注册事件</h4>\n<blockquote>\n<p>传统方式和监听注册方式</p>\n</blockquote>\n<ol>\n<li>\n<p>传统方式 (最简单的方式，即将函数赋值给目标对象的事件属性，属性名字都以 <code>&quot;on&quot;开头</code> )</p>\n<p><code>变量名.onclick = funciton()&#123;&#125;</code></p>\n<p>特点:  <code>唯一性</code> ，即同个元素同个事件只能设置一个处理函数，如果重复注册则以最新一个 (最后一个) 为准</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btns <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btns<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HI'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>监听注册方式 (推荐 为 W3C 标准 IE9 之前不支持)</p>\n<p><code>变量名.addEventListener('事件触发方式',处理函数,事件流执行顺序参数(布尔值))</code></p>\n<p>特点：用一个元素同一个事件可以注册多个监听器，按注册顺序依次执行</p>\n<p>注意:  <code>事件触发方式</code> 不能带 on , 且因为是字符串必须加引号； <code>处理函数</code> 可以写函数名也可以写整个函数，当事件发生时，会调用该监听函数； <code>事件流执行顺序参数</code> 可选参数，是一个布尔值，默认为 false。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btns<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'22'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>attachEvent 方式 (IE9 之前支持 了解即可)</p>\n<p><code>变量名.attachEvent(事件类型(带on),时间处理函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btns<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>在元素上写事件和 addEventListener() 的区别</code></p>\n<ul>\n<li>\n<p>onclick 添加事件不能绑定多个事件，后面绑定的会覆盖前面的。而 addEventListener 能添加多个事件绑定，按顺序执行。</p>\n</li>\n<li>\n<p>addEventListener 方式，不支持低版本的 IE。(attachEvent 支持 IE)。</p>\n</li>\n<li>\n<p>普通方式绑定事件后，不可以取消。addEventListener 绑定后则可以用 removeEventListener 取消。</p>\n</li>\n<li>\n<p>addEventListener 是 W3C DOM 规范中提供的注册事件监听器的方法。</p>\n</li>\n<li>\n<p>对于传统事件注册记得加 on , 如 onclick , onkeydown 等</p>\n</li>\n</ul>\n<h4 id=\"删除事件\"><a class=\"卓越科技-\" href=\"#删除事件\">#</a> 删除事件</h4>\n<ol>\n<li>\n<p>对于传统方式注册的事件</p>\n<p><code>变量名.事件类型 = null</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>divs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    divs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>对于监听事件注册的事件</p>\n<p><code>变量名.removeEventListener(删除的事件类型,删除的函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>divs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'22'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    divs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>对于 attachEvent 注册的事件 (了解)</p>\n<p><code>变量名.detachEvent(删除的事件类型,删除的函数)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>divs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick'</span><span class=\"token punctuation\">,</span>fn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'33'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    divs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">detachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onclick'</span><span class=\"token punctuation\">,</span>fn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>总结:</p>\n<ul>\n<li>\n<p>注册事件</p>\n<p><code>node.onclick</code></p>\n<p><code>node.addEventListener('事件类型',处理程序,冒泡与否值)</code></p>\n</li>\n<li>\n<p>删除事件</p>\n<p><code>node.onclick = null;</code></p>\n<p><code>node.removeEventListener ('事件类型',处理程序)</code></p>\n</li>\n</ul>\n<h4 id=\"事件流\"><a class=\"卓越科技-\" href=\"#事件流\">#</a> 事件流</h4>\n<blockquote>\n<p>页面中获取接收事件的顺序</p>\n</blockquote>\n<blockquote>\n<p>DOM 事件流：事件发生时会在元素节点之间按照特定顺序传播</p>\n</blockquote>\n<p>DOM 事件流有三个阶段:</p>\n<ol>\n<li>\n<p>捕获阶段</p>\n<p>事件发生时在页面中从 document 往下一级一级传播的过程</p>\n</li>\n<li>\n<p>当前目标阶段</p>\n<p>事件到达设置了该事件的元素时的阶段</p>\n</li>\n<li>\n<p>冒泡阶段</p>\n<p>事件接受后从事件触发节点逐级向上传播到 DOM 最顶层节点的过程</p>\n</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/202004291200905.png\" alt=\"\" /></p>\n<p>注意:</p>\n<ul>\n<li>\n<p>JS 只能执行捕获或者冒泡其中一个阶段</p>\n</li>\n<li>\n<p><code>onclick</code>  和  <code>attachEvent</code>  只能获得冒泡阶段</p>\n</li>\n<li>\n<p><code>addEventListener</code>  第三个参数如果是 true , 则为捕获阶段 (很少用)。如果是 false (默认), 则为冒泡阶段</p>\n</li>\n<li>\n<p>一些事件是没有冒泡的，如 onblur , onfocus , onmouseenter , onmouseleave</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 捕获阶段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> father <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.father'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'father'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 因为是捕获阶段 所以先弹出 father 再弹出 son</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 冒泡阶段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> father <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.father'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'father'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'document'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 因为是冒泡，所以如果点击 father, 则只弹 father。点击 son, 则先弹出 son, 再弹出 father</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"事件对象\"><a class=\"卓越科技-\" href=\"#事件对象\">#</a> 事件对象</h4>\n<blockquote>\n<p>事件的一系列相关数据的集合</p>\n</blockquote>\n<p><code>xxx.onclick = function(event)&#123;&#125;</code></p>\n<p>其中 event 就是事件对象，写到事件的处理函数小括号里，可以任意命名 (一般为 e)</p>\n<p>事件对象只有有了事件才会存在，不需要传递参数，系统自动创建</p>\n<p>存在兼容性问题 ie678 无法识别，只能通过  <code>window.event</code>  获取</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 兼容写法 \t\t\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    e <span class=\"token operator\">=</span> e <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 说明： 如果 e 为真的话 e = e , 否则为假的话 e = window.event \t\t\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当函数参数有事件对象参数 e 以及自定义参数时，自定义参数应该在事件对象之前</p>\n<h4 id=\"常见事件对象的属性和方法\"><a class=\"卓越科技-\" href=\"#常见事件对象的属性和方法\">#</a> 常见事件对象的属性和方法</h4>\n<p><code>e.target</code> : 返回触发事件的对象 (ie678 不兼容)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ul<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 点击 li 触发 返回的是 li \t\t\t</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 绑定事件的是 ul 返回的是 ul \t\t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>this 和 target 的区别为 <code>前者返回的是绑定事件的对象</code> ， <code>后者为触发事件的对象</code> ，即 <code>点击谁之后触发了事件就返回哪个</code> 。</p>\n</li>\n<li>\n<p>对于 ie678 应该用  <code>e.srcElement</code>  (了解)</p>\n</li>\n<li>\n<p>与 this 相似的属性是  <code>e.currentTarget</code>  (了解)</p>\n</li>\n</ol>\n<blockquote>\n<p>返回事件类型</p>\n</blockquote>\n<p><code>e.type</code> : 返回 click mouseover 等，没有 on</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseover'</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseout'</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 返回 click 或 mouseover mouseout</span></pre></td></tr></table></figure><blockquote>\n<p>阻止默认行为 (比如让链接不跳转，让提交按钮不提交)</p>\n</blockquote>\n<ol>\n<li>\n<p>对于监听注册事件</p>\n<p><code>e.preventDefault()</code> // 只适用于高版本浏览器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//dom 标准写法 \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>对于传统注册方式</p>\n<p><code>e.preventDefault()</code></p>\n<p><code>e.returnValue()</code>  适用于 ie678</p>\n<p>return false 没有兼容性问题 但是后面的代码无法执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 普通浏览器 e.preventDefault (); 方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 低版本浏览器 ie678 returnValue 属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  e<span class=\"token punctuation\">.</span>returnValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">//return false 没有兼容性问题 但是后面的代码无法执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>阻止冒泡</p>\n</blockquote>\n<ol>\n<li>\n<p><code>e.stopPropagation(); // ie678不兼容</code></p>\n<p>阻止当前对象执行事件后向上冒泡</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>e.cancelBubble = true; //ie678兼容写法(了解)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>son<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    e<span class=\"token punctuation\">.</span>cancelBubble <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ie678 兼容写法 \t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p>总结</p>\n<ul>\n<li>\n<p><code>e.target</code> : 返回触发了事件的对象</p>\n</li>\n<li>\n<p><code>e.type</code> : 返回事件类型</p>\n</li>\n<li>\n<p><code>e.preventDefault()</code> : 阻止默认行为</p>\n</li>\n<li>\n<p><code>e.stopPropagation()</code> : 阻止当前冒泡</p>\n</li>\n</ul>\n<h4 id=\"事件委托\"><a class=\"卓越科技-\" href=\"#事件委托\">#</a> 事件委托</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 给父节点设置事件 \t\t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ul<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\t\t      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'弹出了一条信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为事件冒泡所以点击 li 后上升到 ul 从而触发事件  \t\t</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>事件调用顺序</p>\n<ul>\n<li>通过设置对象属性或 HTML 属性注册的处理程序一直优先调用</li>\n<li>使用  <code>addEventListener()</code>  注册的处理程序按照它们的注册顺序调用</li>\n<li>使用  <code>attachEvent()</code>  注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序</li>\n</ul>\n<h4 id=\"常用鼠标事件\"><a class=\"卓越科技-\" href=\"#常用鼠标事件\">#</a> 常用鼠标事件</h4>\n<ul>\n<li>\n<p>禁止右键菜单</p>\n<p><code>利用 contextmenu 事件类型中的 e.preventDefault</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'contextmenu'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>禁止选中文字</p>\n<p><code>利用 selectstart 事件类型中的 e.preventDefault</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'selectstart'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>鼠标事件对象</p>\n<p><code>e.clientX(Y)</code> : 鼠标相对于浏览器页面的 xy 坐标 (页面滚动也不影响)</p>\n<p><code>e.pageX(Y)</code> : 鼠标相对于整个页面文档的 xy 坐标</p>\n<p><code>e.screenX(Y)</code> : 鼠标相对于电脑屏幕的 xy 坐标</p>\n<p>注意:  <code>通过此事件对对象位置进行改变时记得加px</code> ！！！</p>\n</li>\n</ul>\n<h4 id=\"常用键盘事件\"><a class=\"卓越科技-\" href=\"#常用键盘事件\">#</a> 常用键盘事件</h4>\n<ul>\n<li>\n<p><code>keyup</code> : 按键弹起时触发</p>\n</li>\n<li>\n<p><code>keydown</code> : 按键按下时触发</p>\n</li>\n<li>\n<p><code>keypress</code> : 按键上下弹起的分界点时触发</p>\n</li>\n</ul>\n<p>注意</p>\n<ol>\n<li>\n<p>对于传统事件注册记得加 on</p>\n</li>\n<li>\n<p><code>keypress</code>  无法识别  <code>ctrl</code> 、 <code>shift</code>  等功能键</p>\n</li>\n<li>\n<p>三个时间执行顺序  <code>keydown -&gt; keypress -&gt; keyup</code></p>\n</li>\n</ol>\n<blockquote>\n<p>键盘事件对象</p>\n</blockquote>\n<p><code>e.keyCode</code> : 返回所按的键的 ASCII 值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keyup'</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">==</span> <span class=\"token number\">65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您按下了a键'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您没有按下a键'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p><code>keyup</code>  和  <code>keydown</code>  的  <code>keyCode</code>  不区分大小写 得到的都是大写的值</p>\n</li>\n<li>\n<p><code>keypress</code>  的  <code>keyCode</code>  区分大小写</p>\n</li>\n<li>\n<p><code>keydown</code>  和  <code>keypress</code>  在文本框里的特点：两个事件触发时，文字还没落入文本框中</p>\n</li>\n</ol>\n<blockquote>\n<p>滚动事件</p>\n</blockquote>\n<p><code>element.onscroll</code> : 元素滚动时发生</p>\n<h3 id=\"bom\"><a class=\"卓越科技-\" href=\"#bom\">#</a> BOM</h3>\n<blockquote>\n<p>Browser Object model 浏览器对象模型，提供了独立于内容而与浏览器窗口进行交互的对象，核心为 window</p>\n</blockquote>\n<p>特点: BOM 由一系列相关的对象组成，并且每个对象提供了很多方法与属性。BOM 缺乏标准，js 语法的标准化组织是 ECMA,DOM 的标准化组织是 W3C,BOM 最初始 Netscape 浏览器标准的一部分</p>\n<blockquote>\n<p>DOM</p>\n</blockquote>\n<ul>\n<li>文档对象</li>\n<li>DOM 就是把 [ <code>文档</code> ] 当做一个 [ <code>对象</code> ] 来看待</li>\n<li>DOM 主要学习的是操作页面元素</li>\n<li>DOM 是 W3C 标准规范</li>\n</ul>\n<blockquote>\n<p>BOM</p>\n</blockquote>\n<ul>\n<li>浏览器对象模型</li>\n<li>把 [ <code>浏览器</code> ] 当作一个 [ <code>对象</code> ] 来看待</li>\n<li>BOM 的顶级对象是 window</li>\n<li>BOM 学习是浏览器窗口交互的一些对象</li>\n<li>BOM 是浏览器厂商在各自浏览器窗口交互的一些对象</li>\n<li>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</li>\n</ul>\n<blockquote>\n<p>BOM 的构成</p>\n</blockquote>\n<p>Window 是浏览器的顶级对象，被 window 属性引用，代表是一个 web 浏览器窗口。它具有双重角色</p>\n<ol>\n<li>\n<p>它是 JS 访问浏览器窗口的一个接口</p>\n</li>\n<li>\n<p>它是全局对象，定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</p>\n</li>\n<li>\n<p>document 是 window 最重要的属性之一，它是 DOM 的顶级对象</p>\n</li>\n</ol>\n<p>调用的时候可以省略 window</p>\n<p>注意: window 有一个特殊属性 <span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span> 命名变量时不要用 name</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429204106.png\" alt=\"\" /></p>\n<h4 id=\"window常见事件\"><a class=\"卓越科技-\" href=\"#window常见事件\">#</a> Window 常见事件</h4>\n<ul>\n<li>\n<p>页面加载事件</p>\n<p><code>window.onload = function()&#123;&#125;</code></p>\n<p><code>window.addEventListener('load',function()&#123;&#125;)</code></p>\n<p>当文档内容 <code>完全加载完成会触发该事件(包括图像、脚本文件、CSS文件等)</code> , 使用这个事件就可将 script 放在任意位置不影响执行</p>\n<p><code>document.addEventListener('DOMContentLoaded',function()&#123;&#125;)</code></p>\n<p>当文档内容 <code>不完全加载完成会触发该事件(不包括图像、flash、CSS文件等)</code> , 速度较上两者 <code>较快</code></p>\n</li>\n<li>\n<p>调整窗口大小事件</p>\n<p><code>window.onresize = function()&#123;&#125;</code></p>\n<p><code>window.addEventListener('resize',function()&#123;&#125;);</code></p>\n<p>当窗口大小发生变化时触发事件，常用于响应式布局</p>\n</li>\n<li>\n<p>屏幕当前宽度</p>\n<ol>\n<li>\n<p><code>window.innerWidth</code></p>\n</li>\n<li>\n<p><code>window.innerHeight</code></p>\n</li>\n</ol>\n</li>\n<li>\n<p>实现屏幕滚动</p>\n<p><code>window.scroll(x,y)</code> : x,y 为横向、纵向滚动的距离 ( <code>不加单位</code> )</p>\n</li>\n<li>\n<p>禁止双击选中文字</p>\n<p><code>window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();</code></p>\n</li>\n<li>\n<p>定时器</p>\n<p><code>window.setTimeout(调用函数,延迟时间);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'111'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'爆炸了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callback()'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> time1 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> time2 <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意:</p>\n<ol>\n<li>\n<p>延迟时间单位为毫秒 可以不写 默认为 0</p>\n</li>\n<li>\n<p>这个调用函数可以直接写函数 也可以写 函数名  也可以 ' 函数名 ()'</p>\n</li>\n<li>\n<p>window 可以省略</p>\n</li>\n<li>\n<p>页面中可能有多个定时器 一般要起标识符</p>\n</li>\n<li>\n<p>因为 setTimeout 是倒计时完再回调函数，所以也叫作回调函数</p>\n</li>\n</ol>\n<p><code>window.setInterval(调用函数,延迟时间);</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：其他都和 setTimeout 相同，但是 setTimeout 只调用函数一次，而 setInterval 是每隔设定间隔时间就调用一次，常用于倒计时</p>\n</li>\n<li>\n<p>清除倒计时</p>\n<p><code>window.clearTimeout(定时器的名字)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'爆炸'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>window.clearInterval(定时器名字)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> begin <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.begin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> stop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.stop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>begin<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>stop<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：函数内定时器赋予名字时最好现在外面建立全局变量，以便清除</p>\n</li>\n</ul>\n<h4 id=\"this指向问题\"><a class=\"卓越科技-\" href=\"#this指向问题\">#</a> this 指向问题</h4>\n<ol>\n<li>\n<p>全局作用域或者普通函数中 this 指向全局对象 window (setTimeout、setInterval 也是)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法调用中指向调用方法者</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 o 因为这个函数是 o 的  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>o<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向 btn </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>构造函数 this 指向构造函数的实例 (谁创建指向谁)</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向 fun ()</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"js的执行队列非常重要\"><a class=\"卓越科技-\" href=\"#js的执行队列非常重要\">#</a> JS 的执行队列 (非常重要)</h4>\n<blockquote>\n<p>JavaScript 的一大特点即 <code>单线程</code> ，即 <code>同一时间只能做一件事</code></p>\n</blockquote>\n<p>JS 有同步和异步</p>\n<ul>\n<li>\n<p>同步：即按顺序执行任务，前一个任务结束再执行另一个</p>\n</li>\n<li>\n<p>异步：执行一件任务的同时可以执行其他任务</p>\n</li>\n</ul>\n<p>JS 执行机制 - 分为 <code>同步任务</code> 和 <code>异步任务</code></p>\n<ul>\n<li>\n<p>同步任务：都放到主线程上执行，形成一个 <code>执行栈</code></p>\n</li>\n<li>\n<p>异步任务: JS 的异步是通过 <code>回调函数</code> 实现的</p>\n</li>\n</ul>\n<p>异步任务三种类型:</p>\n<ol>\n<li>\n<p>普通事件 如: click , resize , readystatechange 等</p>\n</li>\n<li>\n<p>资源加载 如 load , error 等</p>\n</li>\n<li>\n<p>定时器中的回调函数</p>\n</li>\n</ol>\n<p>异步任务的相关回调函数添加到任务队列中 (消息队列)</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429210903.png\" alt=\"\" /></p>\n<p><code>执行过程</code> :</p>\n<ol>\n<li>\n<p>先执行执行栈中的同步任务</p>\n</li>\n<li>\n<p>遇到异步任务触发则将其回调函数放到任务队列中</p>\n</li>\n<li>\n<p><code>等所有同步任务执行完毕后,再回去按序执行任务队列中的回调函数</code></p>\n</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200429211003.png\" alt=\"\" /></p>\n<p>异步进程处理:  <code>用于检测异步任务是否被触发(比如点击,倒计时时间到等),一旦触发,就将其放入任务队列中。执行栈的同步任务全部执行完后,就会到任务队列查看是否有未执行的异步任务,一旦有则将其执行,全部执行完后会不断查看不断执行,形成 事件循环。</code></p>\n<h4 id=\"location对象\"><a class=\"卓越科技-\" href=\"#location对象\">#</a> Location 对象</h4>\n<blockquote>\n<p>window 的 location 属性引用了 Location 对象，用于获取 URL 相关属性</p>\n</blockquote>\n<p><code>URL::统一资源定位符</code></p>\n<pre><code>URL的一般语法格式为: \n\nprotocol://host[:port]/path/[?query]#fragment\n\nhttps://zykjofficial.gitee.io/index.html?name=zykj&amp;age=18#link\n</code></pre>\n<ul>\n<li>\n<p><code>protocol</code> : 协议，http , ftp , maito 等</p>\n</li>\n<li>\n<p><code>host</code> : 主机 (域名)  <code>[www.xxxx.com](http://www.xxxx.com)</code></p>\n</li>\n<li>\n<p><code>port</code> : 端口号 可选，省略时使用方案的默认端口 如 http 的默认端口为 80</p>\n</li>\n<li>\n<p><code>path</code> : 路径 由零个或多个 <code>/</code>  符号隔开的字符串，一般用来表示主机上的一个目录或文件</p>\n</li>\n<li>\n<p><code>query</code> : 参数 以键值对的形式通过 <code>&amp;</code>  符号分隔开</p>\n</li>\n<li>\n<p><code>fragment</code> : 片段， <code>#</code> 后面内容 一般用于链接锚点</p>\n</li>\n</ul>\n<p><code>location 对象的属性</code></p>\n<table>\n<thead>\n<tr>\n<th>location 对象属性</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>location.href</code></td>\n<td>获取或者设置整个 URL</td>\n</tr>\n<tr>\n<td><code>location.host</code></td>\n<td>返回主机 (域名) <span class=\"exturl\" data-url=\"aHR0cDovL3p5a2pvZmZpY2lhbC5naXRlZS5pbw==\">zykjofficial.gitee.io</span></td>\n</tr>\n<tr>\n<td><code>location.port</code></td>\n<td>返回端口号 如果写返回 空字符串</td>\n</tr>\n<tr>\n<td><code>location.pathname</code></td>\n<td>返回路径</td>\n</tr>\n<tr>\n<td><code>location.search</code></td>\n<td>返回参数</td>\n</tr>\n<tr>\n<td><code>location.hash</code></td>\n<td>返回片段 #后面内容 常见于链接 锚点</td>\n</tr>\n</tbody>\n</table>\n<p><code>location另外几个属性</code></p>\n<ul>\n<li>\n<p><code>location.assign</code> : 与 href 一样，实现页面跳转</p>\n</li>\n<li>\n<p><code>location.replace</code> : 实现页面跳转，但是没有后退功能</p>\n</li>\n<li>\n<p><code>location.reload</code> : 刷新页面 等于 f5</p>\n</li>\n<li>\n<p><code>location.reload(true)</code> : 强制刷新</p>\n</li>\n<li>\n<p><code>location = &quot;#xx&quot;</code> : 可以使页面滚动到 id 为 xx 的元素的位置</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//assign 与 href 一样，实现跳转 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 实现跳转 但是不记录历史 没有退回功能</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// location.replace('http://www.baidu.com'); </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 重新加载刷新  等于 f5 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 强制刷新 Ctrl + F5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>last<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#last\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        div<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            location <span class=\"token operator\">=</span> <span class=\"token string\">\"#one\"</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> \t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"navigator对象\"><a class=\"卓越科技-\" href=\"#navigator对象\">#</a> Navigator 对象</h4>\n<blockquote>\n<p>window 的 navigator 属性引用的是 Navigator 对象。最常用的属性为 userAgent , 该属性可以返回有客户机发送服务机的 user-agent 头部的值</p>\n</blockquote>\n<p>下列代码可以判断用户哪个终端打开页面，实现跳转</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断用户哪个终端打开页面，实现跳转 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry| IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 手机端打开页面 \t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 电脑端打开页面 \t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"history对象\"><a class=\"卓越科技-\" href=\"#history对象\">#</a> History 对象</h4>\n<blockquote>\n<p>window 对象给我们提供了一个 history 属性，该属性引用了 History 对象。可以与浏览器历史记录进行交互。该对象包含用户 (在浏览器窗口中) 访问过的 URL</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>history 对象方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>back()</code></td>\n<td>可以后退功能</td>\n</tr>\n<tr>\n<td><code>forward()</code></td>\n<td>前进功能</td>\n</tr>\n<tr>\n<td><code>go(参数)</code></td>\n<td>前进后退功能 参数如果是 1 前进 1 个页面 如果是 - 1 后退 1 个页面</td>\n</tr>\n<tr>\n<td><code>pushState(state, title, url)</code></td>\n<td>向浏览器历史添加了一个状态。pushState () 方法带有三个参数：一个状态对象、一个标题 (现在被忽略了) 以及一个可选的 URL 地址</td>\n</tr>\n<tr>\n<td><code>history.replaceState(state, title, url)</code></td>\n<td>修改当前历史记录条目而并非创建新的条目</td>\n</tr>\n</tbody>\n</table>\n<p><code>history.forward()</code> : 实现前进功能</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>history.back</code> : 实现后退功能</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>history.go(参数)</code> : 实现前进或后退功能</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前进一页     </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后退一页 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>history.pushState()</code> ：向浏览器历史添加了一个状态。pushState () 方法带有三个参数：一个状态对象、一个标题 (现在被忽略了) 以及一个可选的 URL 地址</p>\n<pre><code>history.pushState(state, title, url);\n\nstate object —— 状态对象是一个由pushState()方法创建的、与历史纪录相关的javascript对象。当用户定向到一个新的状态时，会触发\n\npopstate事件。事件的state属性包含了历史纪录的state对象。如果不需要这个对象，此处可以填null\n\ntitle —— 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null\n\nURL —— 这个参数提供了新历史纪录的地址。新URL必须和当前URL在同一个域，否则，pushState()将丢出异常。这个参数可选，如果它没有被特别标注，会被设置为文档的当前URL\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1leGFtcGxlLWVuN2ttNG05cXBjdWwwMGtrb3d0bjRmLmNvbS8xLmh0bWwlRUYlQkMlOEMlRTQlQkQlQkYlRTclOTQlQThwdXNoU3RhdGUlRTYlOTYlQjklRTYlQjMlOTUlRTUlOUMlQTglRTYlQjUlOEYlRTglQTclODglRTglQUUlQjAlRTUlQkQlOTUoaGlzdG9yeSVFNSVBRiVCOSVFOCVCMSVBMSklRTQlQjglQUQlRTYlQjclQkIlRTUlOEElQTAlRTQlQjglODAlRTQlQjglQUElRTYlOTYlQjAlRTglQUUlQjAlRTUlQkQlOTU=\">假定当前网址是 example.com/1.html，使用 pushState 方法在浏览记录 (history 对象) 中添加一个新记录</span></p>\n<pre><code>var stateObj = &#123; foo: 'bar' &#125;;\nhistory.pushState(stateObj, 'page 2', '2.html');\n</code></pre>\n<p>添加上面这个新记录后，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1leGFtcGxlLW93MGxrNDJhZjNiYmY2NTVweDZlcm12MGY2YmlpZnRuOGUuY29tLzIuaHRtbCVFRiVCQyU4QyVFNCVCRCU4NiVFNSVCOSVCNiVFNCVCOCU4RCVFNCVCQyU5QSVFOCVCNyVCMyVFOCVCRCVBQyVFNSU4OCVCMDIuaHRtbCVFRiVCQyU4QyVFNyU5NCU5QSVFOCU4NyVCMyVFNCVCOSU5RiVFNCVCOCU4RCVFNCVCQyU5QSVFNiVBMyU4MCVFNiU5RiVBNTIuaHRtbCVFNiU5OCVBRiVFNSU5MCVBNiVFNSVBRCU5OCVFNSU5QyVBOCVFRiVCQyU4QyVFNSVBRSU4MyVFNSU4RiVBQSVFNiU5OCVBRiVFNiU4OCU5MCVFNCVCOCVCQSVFNiVCNSU4RiVFOCVBNyU4OCVFNSU4RSU4NiVFNSU4RiVCMiVFNCVCOCVBRCVFNyU5QSU4NCVFNiU5QyU4MCVFNiU5NiVCMCVFOCVBRSVCMCVFNSVCRCU5NSVFMyU4MCU4MiVFNSU4MSU4NyVFNSVBNiU4MiVFOCVCRiU5OSVFNiU5NyVCNiVFOCVBRSVCRiVFOSU5NyVBRSVFNCVCQSU4Nmdvb2dsZS5jb20lRUYlQkMlOEMlRTclODQlQjYlRTUlOTAlOEUlRTclODIlQjklRTUlODclQkIlRTQlQkElODYlRTUlODAlOTIlRTklODAlODAlRTYlOEMlODklRTklOTIlQUUlRUYlQkMlOEMlRTklQTElQjUlRTklOUQlQTIlRTclOUElODR1cmwlRTUlQjAlODYlRTYlOTglQkUlRTclQTQlQkEyLmh0bWwlRUYlQkMlOEMlRTQlQkQlODYlRTYlOTglQUYlRTUlODYlODUlRTUlQUUlQjklRTglQkYlOTglRTYlOTglQUYlRTUlOEUlOUYlRTYlOUQlQTUlRTclOUElODQxLmh0bWwlRTMlODAlODIlRTUlODYlOEQlRTclODIlQjklRTUlODclQkIlRTQlQjglODAlRTYlQUMlQTElRTUlODAlOTIlRTklODAlODAlRTYlOEMlODklRTklOTIlQUUlRUYlQkMlOEN1cmwlRTUlQjAlODYlRTYlOTglQkUlRTclQTQlQkExLmh0bWwlRUYlQkMlOEMlRTUlODYlODUlRTUlQUUlQjklRTQlQjglOEQlRTUlOEYlOTg=\">浏览器地址栏立刻显示 example.com/2.html，但并不会跳转到 2.html，甚至也不会检查 2.html 是否存在，它只是成为浏览历史中的最新记录。假如这时访问了 google.com，然后点击了倒退按钮，页面的 url 将显示 2.html，但是内容还是原来的 1.html。再点击一次倒退按钮，url 将显示 1.html，内容不变</span></p>\n<ul>\n<li>\n<p>总之，pushState 方法不会触发页面刷新， <code>只是导致history对象发生变化，地址栏的显示地址发生变化</code></p>\n</li>\n<li>\n<p>如果 pushState 的 url 参数，设置了一个新的锚点值 (即 hash)，并不会触发 hashchange 事件，即使新的 URL 和旧的只在 hash 上有区别</p>\n</li>\n<li>\n<p>如果设置了一个跨域网址，则会报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://twitter.com/hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p><code>history.replaceState</code> : 方法的参数与 pushState 方法一模一样，不同之处在于 replaceState () 方法会修改当前历史记录条目而并非创建新的条目</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1leGFtcGxlLWVuN2ttNG1qbjNhc2xqZHd1MHY4ZW90d2QuY29tL2V4YW1wbGUuaHRtbA==\">假定当前网页是 example.com/example.html</span></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>page<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?page=1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>page<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title 2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?page=2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">replaceState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>page<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'title 3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?page=3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//url 显示为 http://example.com/example.html?page=1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//url 显示为 http://example.com/example.html</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//url 显示为 http://example.com/example.html?page=3</span></pre></td></tr></table></figure><p>注: history 对象一般在实际开发中比较少用，但在一些办公 OA 系统会见到</p>\n<ul>\n<li>\n<p>无干扰的 JavaScript</p>\n<blockquote>\n<p>这种模式强调 JavaScript 自身不应该惹人注意，不应该产生打扰。不应该去干扰用户浏览一个 web 页面，不应该干扰内容作者创建 HTML 标记，或者干扰 Web 设计者创建 HTML 模板或 CSS 样式表</p>\n</blockquote>\n</li>\n<li>\n<p>方法</p>\n<ol>\n<li>分离：保持 JavaScript 代码与 HTML 标记的分离。尽可能让 JavaScript 代码的外部文件成为模块</li>\n<li>降级：必须降低优雅性。JavaScript 模块应该首先确保它所需要的客户端功能在代码所运行的浏览器中是可用的</li>\n<li>不能降低一个 HTML 页面的可访问性.JS 的角色是增加信息的表现力而不是负责信息的表现。为了实现可访问性，应该尽可能支持独立于设备的事件 (onfocus、onchange 等)。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"网页特效-pc端\"><a class=\"卓越科技-\" href=\"#网页特效-pc端\">#</a> 网页特效 - PC 端</h3>\n<h4 id=\"offset系列\"><a class=\"卓越科技-\" href=\"#offset系列\">#</a> offset 系列</h4>\n<blockquote>\n<p>元素偏移量 offset: 可以动态的获取元素的位置、大小等</p>\n</blockquote>\n<h5 id=\"offset系列常用属性\"><a class=\"卓越科技-\" href=\"#offset系列常用属性\">#</a> offset 系列常用属性</h5>\n<table>\n<thead>\n<tr>\n<th>offset 系列属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>elememt.offsetParent</code></td>\n<td>返回作为该元素 <code>带有定位的父级元素 </code> 如果父级都没有定位则返回 body</td>\n</tr>\n<tr>\n<td><code>element.offsetTop</code></td>\n<td>返回元素相对带有定位父元素上方的偏移</td>\n</tr>\n<tr>\n<td><code>element.offsetLeft</code></td>\n<td>返回元素相对带有定位父元素左边框的偏移</td>\n</tr>\n<tr>\n<td><code>element.offsetWidth</code></td>\n<td>返回自身包括 padding、边框、内容区的宽度，返回数值不带单位</td>\n</tr>\n<tr>\n<td><code>element.offsetHeight</code></td>\n<td>返回自身包括 paddling、边框、内容区的高度，返回数值不带单位</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<ol>\n<li>\n<p>返回的数值没有单位</p>\n</li>\n<li>\n<p>offsetParent 返回的不一定是亲父亲，而是最近的 <code>带有定位</code> 的父级元素。parentNode 返回的是亲父亲且不管有没有定位</p>\n</li>\n</ol>\n<h5 id=\"offset与style区别\"><a class=\"卓越科技-\" href=\"#offset与style区别\">#</a> offset 与 style 区别</h5>\n<p><strong>offset</strong></p>\n<ul>\n<li>offset 可以得到任意样式表中的样式值</li>\n<li>offset 系列获得的数值是没有单位的</li>\n<li>offsetWidth 包含 padding + border + width</li>\n<li>offsetWidth 等属性是只读属性，只能获取不能赋值</li>\n<li><code>所以， 我们想要获取元素大小位置,用offset更合适</code></li>\n</ul>\n<p><strong>style</strong></p>\n<ul>\n<li>style 只能得到行内样式表中的样式值</li>\n<li>style.width 获得的是带有单位的字符串</li>\n<li>style.width 获得不包含 padingRaborder 的值</li>\n<li>style.width 是可读写属性，可以获取也可以赋值</li>\n<li>所以， 我们想要给元素更改值，则需要用 style 改变</li>\n</ul>\n<h4 id=\"client系列\"><a class=\"卓越科技-\" href=\"#client系列\">#</a> client 系列</h4>\n<blockquote>\n<p>通过 client 的相关属性可以动态获取该元素的边框大小，元素大小等</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>client</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>element.clientTop</code></td>\n<td>返回元素上边框的大小</td>\n</tr>\n<tr>\n<td><code>element.clientLeft</code></td>\n<td>返回元素左边框的大小</td>\n</tr>\n<tr>\n<td><code>element.clientWidth</code></td>\n<td>返回自身包括 padding, 内容区宽度，不包含边框</td>\n</tr>\n<tr>\n<td><code>element.clientHeight</code></td>\n<td>返回自身包括 padding, 内容区高度，不包含边框</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"事件对象之offsetxy\"><a class=\"卓越科技-\" href=\"#事件对象之offsetxy\">#</a> 事件对象之 offsetX/Y</h4>\n<p>offsetX 规定了事件对象与目标节点的内填充边（padding edge）在 X 轴方向上的偏移量。</p>\n<p>比如在元素内触发点击事件时点击位置距离元素右边距的距离</p>\n<h4 id=\"立即执行函数\"><a class=\"卓越科技-\" href=\"#立即执行函数\">#</a> 立即执行函数</h4>\n<blockquote>\n<p>主要作用：创建一个独立的作用域，避免了命名冲突问题</p>\n</blockquote>\n<p>两种写法</p>\n<ol>\n<li>\n<p><code>(function(形参) &#123;&#125;)(实参)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>(function(形参) &#123;&#125; (实参) )</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"scroll系列\"><a class=\"卓越科技-\" href=\"#scroll系列\">#</a> scroll 系列</h4>\n<blockquote>\n<p>通过 scroll 可以动态获取该元素的大小，滚动距离等</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>scroll</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>element.scrollTop</code></td>\n<td>返回被卷去的上侧距离</td>\n</tr>\n<tr>\n<td><code>element.scrollLeft</code></td>\n<td>返回被卷去的左侧距离</td>\n</tr>\n<tr>\n<td><code>element.scrollWidth</code></td>\n<td>返回自身实际的宽度，不含边框，包含 padding</td>\n</tr>\n<tr>\n<td><code>element.scrollHeight</code></td>\n<td>返回自身实际的高度，不含边框，包含 padding</td>\n</tr>\n</tbody>\n</table>\n<p>页面被卷曲的头部</p>\n<p>页面被卷去的头部兼容性解决方案</p>\n<p>需要注意的是，页面被卷去的头部，有兼容性问题， 因此被卷去的头部通常有如下几种写法:</p>\n<ol>\n<li>\n<p>声明了 DTD , 使用 <code>document.documentElement.scrollTop</code></p>\n</li>\n<li>\n<p>未声明 DTD , 使用 <code>document.body.scrollTop</code></p>\n</li>\n<li>\n<p>新方法 <code>window.pageYoffset</code>  和 window.pageXoffset，IE9 开始支持</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tleft<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>pageXoffset <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollLeft <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollLeft <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\ttop<span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">||</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* 使用的时候 getScroll ().left*/</span></pre></td></tr></table></figure><p>重点是 <code>window.pageYoffset </code> 和 <code>window.pageXoffset</code></p>\n<h4 id=\"三大系列总结\"><a class=\"卓越科技-\" href=\"#三大系列总结\">#</a> 三大系列总结</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200514221416.png\" alt=\"\" /></p>\n<p>用途</p>\n<ul>\n<li>\n<p><code>element.offsetTop(offsetLeft)</code> : 获取元素位置</p>\n</li>\n<li>\n<p><code>element.clientWidth(clientHeight)</code> : 获取元素大小</p>\n</li>\n<li>\n<p><code>element.scrollTop(scrollLeft)</code> : 获取元素滚动距离</p>\n</li>\n<li>\n<p><code>window.pageXOffset(pageYOffset)</code> : 获取页面滚动距离</p>\n</li>\n</ul>\n<p>总结：</p>\n<ul>\n<li>\n<p><code>element.offsetLeft/Top</code> :  获取元素相对于最近的有定位的父元素的坐标，如果没有有定位的父元素，则是文档坐标</p>\n</li>\n<li>\n<p><code>element.scrollTop/Left</code> :  获取元素滚动卷去的距离</p>\n</li>\n<li>\n<p><code>element.offsetWidth/Height</code> :  获取元素的宽度高度（包含边框）</p>\n</li>\n<li>\n<p><code>element.clientWidth/Height</code> : 获取元素的宽度高度（不包含边框）</p>\n</li>\n<li>\n<p><code>element.scrollWidth/Height</code> : 获取元素的内容宽度高度（包括被卷曲的部分）</p>\n</li>\n<li>\n<p><code>e.pageX/Y 获取鼠标的文档坐标</code> :（相对于文档而言）</p>\n</li>\n<li>\n<p><code>e.clientX/Y</code> :  获取鼠标的视口坐标（相对于视口而言）</p>\n</li>\n<li>\n<p><code>e.screenX/Y</code> :  获取鼠标的屏幕坐标（相对于整个浏览器而言）</p>\n</li>\n<li>\n<p><code>window.pageY/XOfffset</code> :  获取页面的滚动距离</p>\n</li>\n</ul>\n<h4 id=\"mouseovermouseenter\"><a class=\"卓越科技-\" href=\"#mouseovermouseenter\">#</a> mouseover/mouseenter</h4>\n<blockquote>\n<p>mouseover 和 mouseenter 的区别</p>\n</blockquote>\n<p>mouseover 会冒泡，mouseenter 不会冒泡 与之对应的 mouseleave 也不会冒泡</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> father <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.father'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> son <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.son'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    father<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseenter'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注：如果是 <code>mouseenter</code>  则经过父盒子本身才会触发， <code>mouseover</code>  经过父盒子和子盒子都会触发</p>\n<h3 id=\"动画函数\"><a class=\"卓越科技-\" href=\"#动画函数\">#</a> 动画函数</h3>\n<p>核心原理：通过定时器 setInterval () 不断移动盒子距离</p>\n<blockquote>\n<p>缓动动画：即动画速度有所变化的动画</p>\n</blockquote>\n<p><code>逐渐变慢实现原理：每次的移动距离都下降（= （目标距离-移动距离）/定值）</code></p>\n<p>每次移动的距离应该取整，如果是正值则往大了取，因为最后面如果往小取会等于 0 停止移动，负值同理</p>\n<p><code>解决多次点击按钮速度变快的方法：每次调用定时器时先清除之前的定时器</code></p>\n<p><code>回调函数写在清除定时器之后</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 缓动动画函数封装 obj 目标对象 target 目标位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 思路:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 让盒子每次移动的距离慢慢变小， 速度就会慢慢落下来。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 核心算法: (目标值 - 现在的位置) / 10 做为每次移动的距离步长</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 停止的条件是：让当前盒子位置等于目标位置就停止定时器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 先清除以前的定时器，只保留当前的个定时器执行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 为每个对象添加一个定时器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置步长 (移动距离) 步长值写到定时器的里面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 把我们步长值改为整数不要出现小数的问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">var</span> step <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">-</span>obj<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">-</span>obj<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">-</span>obj<span class=\"token punctuation\">.</span>offsetLeft<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 停止动画本质是停止定时器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//if(callback) &#123; \t\t\t</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//    callback(); \t\t</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            callback <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这样写更简单  \t\t</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> \t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 匀速动画 \t\t</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// obj.style.left = obj.offsetLeft + 1 + 'px'; \t</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 缓动动画 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 把每次加 1 这个步长值改为一个慢慢变小的值 步长公式: (目标值 - 现在的位置) / 10</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        obj<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>offsetLeft <span class=\"token operator\">+</span> step <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"节流阀\"><a class=\"卓越科技-\" href=\"#节流阀\">#</a> 节流阀</h3>\n<blockquote>\n<p>防止轮播图按钮连续点击过快</p>\n</blockquote>\n<p>当上一个动画执行完毕后再允许执行下一次，让事件无法连续触发</p>\n<p>核心思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数</p>\n<p>即：</p>\n<ol>\n<li>\n<p>先设置一个变量为 true</p>\n</li>\n<li>\n<p>当变量为 true 时执行事件，并将变量改为 false，关闭水龙头</p>\n</li>\n<li>\n<p>利用回调函数在事件结束后将变量改为 true，打开水龙头</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 执行的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"客户端存储\"><a class=\"卓越科技-\" href=\"#客户端存储\">#</a> 客户端存储</h3>\n<blockquote>\n<p>客户端存储的形式</p>\n</blockquote>\n<ol>\n<li>web 存储 (包含 localStorage 和 sessionStorage 两个 API)</li>\n<li>cookie</li>\n<li>IE User Data</li>\n<li>离线 Web 应用</li>\n<li>Web 数据库</li>\n<li>文件系统 API</li>\n</ol>\n<blockquote>\n<p>客户端存储的特性</p>\n</blockquote>\n<p>客户端存储遵循同源策略，因此不同站点的页面是无法互相读取对方存储的数据，而同一站点的不同页面之间是可以互相共享存储数据的</p>\n<p>任何形式的客户端都不应该用来保存密码，商业账号或者其他类似的敏感信息</p>\n<ol>\n<li>\n<p>web 存储</p>\n<p><code>web存储特性</code></p>\n<ul>\n<li>\n<p>数据存储在用户浏览器中</p>\n</li>\n<li>\n<p>设置、读取方便</p>\n</li>\n<li>\n<p>容量较大，sessionStorage 约 5M,localStorage 约 20M</p>\n</li>\n<li>\n<p>只能存储字符串</p>\n</li>\n</ul>\n<p><code>window.localStorage 本地存储</code></p>\n<ul>\n<li>生命周期为永久性的，除非人为删除</li>\n<li>作用域限定在文档源中 (文档源是通过协议、主机、端口号三者确定的), 同源的 localStorage 可以互相读取对方数据，非同源文档则不可以 (只要协议、主机、端口号有一个不同就是非同源文档)</li>\n<li>作用域也受浏览器供应商限制</li>\n<li>键值对形式存储</li>\n</ul>\n<p><code>Window.sessionStorage   临时存储</code></p>\n<ul>\n<li>\n<p>生命周期为关闭窗口或标签页</p>\n</li>\n<li>\n<p>作用域也是限定在同源文档中。此外也被限定在窗口中，即使是同源文档，在不同的浏览器标签页打开也无法共享同个 seesionStorage 数据</p>\n</li>\n<li>\n<p>以键值对的形式存储使用</p>\n</li>\n</ul>\n<p><code>存储API</code></p>\n<ul>\n<li>\n<p>存储数据:  <code>sessionStorage.setItem(key,value)</code></p>\n</li>\n<li>\n<p>获取数据:  <code>sessionStorage.getItem(key)</code></p>\n</li>\n<li>\n<p>删除数据:  <code>sessionStorage.removeItem(key)</code></p>\n</li>\n<li>\n<p>删除所有数据:  <code>sessionStorage.clear()</code></p>\n</li>\n</ul>\n <hr>\n - 存储数据: `localStorage.setItem(key,value)`\n<ul>\n<li>\n<p>获取数据:  <code>localStorage.getItem(key)</code></p>\n</li>\n<li>\n<p>删除数据:  <code>localStorage.removeItem(key)</code></p>\n</li>\n<li>\n<p>删除所有数据:  <code>LocalStorage.clear()</code></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加某个数据 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> val <span class=\"token operator\">=</span> ipt<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unmame'</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pwd'</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获得某个数据 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>get<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\t \t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unmame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 删除指定数据 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>remove<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unmame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 删除所有数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>del<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>cookie (指 web 存储的少量数据)</p>\n<p>特点:</p>\n<ul>\n<li>\n<p>cookie 数据会自动在 Web 浏览器和 Web 服务器之间传输</p>\n</li>\n<li>\n<p>兼容性好</p>\n</li>\n<li>\n<p>所有查询设置删除都要通过 Document 对象的 cookie 属性完成</p>\n</li>\n<li>\n<p>通过 navigator.cookieEnabled 来检查 cookie 是否启用</p>\n</li>\n</ul>\n<p><code>cookie的属性: 有效期和作用域</code></p>\n<blockquote>\n<p>有效期: cookie 的默认有效期很短，浏览器一旦关闭 cookie 保存的数据就丢失了。但是不是和 sessionStorage 相同，cookie 是整个浏览器关掉才会消失，而 sessionStorage 是标签页关掉则销毁该标签页的数据其他不影响。可以通过 max-age 属性 (单位为秒) 设置有效期。</p>\n</blockquote>\n<blockquote>\n<p>作用域: cookie 作用域由文档源和文档路径限制。一个页面的 cookie 可以和文档与其同个目录或者是其子目录的页面共享。</p>\n</blockquote>\n<p>如:  <code>http://www.baidu.com/catalog/index.html</code>  创建了一个 cookie , 那么该 cookie 对  <code>http://www.baidu.com/catalog/order.html</code>  或  <code>http://www.baidu.com/catalog/xxx/index.html</code>  都是可见的。可以通过修改 cookie 的属性 path 来修改 cookie 的路径。</p>\n<p>如:  <code>http://www.baidu.com/catalog/xxx/index.html</code>  创建了 cookie, 如果把 path 改为 &quot;/catalog&quot;, 那么该 cookie 对  <code>http://www.baidu.com/catalog/widget/index.html</code>  也是可见的</p>\n<p><code>cookie的API</code></p>\n<ul>\n<li>\n<p>保存 cookie: 将 cookie 属性值设置为 name = value 格式的字符串</p>\n<p>如:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"version = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>lastModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>注意: cookie 中的值不允许包含分号逗号空白符，所以要在存储前对数据进行编码。相应的，读取时也要对获取的数据解码</p>\n<p>同样可以设置 cookie 的 path、domain、secure 等属性，只需将以下字符串形式追加在 cookie 值后面:</p>\n<p><code>;path = path</code></p>\n<p><code>;domian = domain</code></p>\n<p><code>;secure</code></p>\n<p>如果要改变新 cookie 的值，就需要用相同的名字路径和域但是不同的值来设置 cookie 的值，如:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"version = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 更改 version 的值</span></pre></td></tr></table></figure><p>要删除 cookie, 就需要用相同的名字路径和域但是任意一个非空的值再次设置 cookie</p>\n<ul>\n<li>读取 cookie: 利用 <code>document.cookie</code>  读取，返回值为字符串，一般会先用 split 分开，然后解码，再利用 <code>JSON.parse()方</code> 法还原成 json 对象</li>\n</ul>\n</li>\n<li>\n<p>IE userData (通过在 document 元素后面附加一个专属的 &quot;DHTML 行为&quot; 实现客户端存储)</p>\n<p>步骤:</p>\n<ol>\n<li>\n<p>对元素附加 userData 行为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>behavior <span class=\"token operator\">=</span> <span class=\"token string\">\"url('#default#userData')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此时的元素拥有 save () , load () 方法，接下来就可以通过元素的属性来访问这些名 / 值对形式的数据</p>\n</li>\n<li>\n<p>通过 getAttribute、setAttribute 存储获取 userData 数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存储 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myindex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 读取 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myindex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>离线 Web 应用 (允许 Web 应用将应用程序自身本地保存到用户的浏览器中)</p>\n<blockquote>\n<p>是将应用程序自身保存起来 —— 应用程序所需运行的所有文件 (HTML、CSS、JavaScript / 图片等), 不会随着用户清楚浏览器缓存而被清除</p>\n</blockquote>\n<p>基本步骤：首先要准备一个清单：包含了所有应用程序依赖的所有 URL 列表，然后通过 html 标签中设置 manifest 属性指向该清单文件即可</p>\n<p>清单文件以 <code>.appcache</code>  作为文件扩展名。首行内容必须为 &quot;CACHE MANIFEST&quot;</p>\n<pre><code>CACHE MANIFEST\n\n //以下是文件清单 \nmyapp.html \nmyapp.js \nmyapp.css \nimages/background.png\n</code></pre>\n<p>复杂的清单</p>\n<p>清单文件中可以使用特殊的区域头来标识该头信息之后清单项的类型</p>\n<p>上面都属于 <code>&quot;CACHE:&quot;</code>  区域，也是默认的区域</p>\n<p>此外还有两种</p>\n<ul>\n<li>\n<p><code>&quot;NETWORK&quot;</code> : 该区域标识了该 URL 中的资源从不缓存，都是从网络获取</p>\n</li>\n<li>\n<p><code>&quot;FALLBACK&quot;</code> : 该区域中清单项每行都包含两个 URL , 第一个 URL 是一个前缀，任何能够匹配到该前缀的 URL 都不会缓存起来，但是可能的话，它们会从网络中载入。第二个 URL 是指需要加载和存储在缓存中的资源。如果从网络中载入这样一个 URL 失败的话。就会使用第二个 URL 指定的缓存资源来代替，从缓存中获取。</p>\n<pre><code>CHCHE MANIFEST \n\nCACHE:   \n\tmyapp.html   \n\tmyapp.css    \n\tmyapp.js     \n\nFALLBACK:    \n\tvideo/ offline_help.html         \n\nNETWORK:    \n\tcgi / \n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>缓存的更新</p>\n</blockquote>\n<p>在线的状态下，浏览器会异步检查清单文件是否有更新。但只是检查清单文件，而不是检查清单文件里的资源是否有更新。想更新资源文件需要手动修改</p>\n<p>想要卸载 APP 应用，则要在服务器端删除清单文件，使得请求该文件的时候返回 404 无法找到的错误，同时，修改 HTML 文件 manifest 属性以便他们与该清单列表 &quot;断开连接&quot;</p>\n<h3 id=\"h5新增api\"><a class=\"卓越科技-\" href=\"#h5新增api\">#</a> H5 新增 API</h3>\n<div class=\"note info flat\">\n<p>这里的知识需要 jquery</p>\n</div>\n<h4 id=\"检测网络连接状态\"><a class=\"卓越科技-\" href=\"#检测网络连接状态\">#</a> 检测网络连接状态</h4>\n<h5 id=\"网络连接事件\"><a class=\"卓越科技-\" href=\"#网络连接事件\">#</a> 网络连接事件</h5>\n<p><code>online 当网络连接时触发</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"online\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".tips\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网络已经连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeOut</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h5 id=\"网路断开事件\"><a class=\"卓越科技-\" href=\"#网路断开事件\">#</a> 网路断开事件</h5>\n<p><code>offline 网络断开时触发</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"offline\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".tips\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网络已经断开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeIn</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeOut</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"全屏显示\"><a class=\"卓越科技-\" href=\"#全屏显示\">#</a> 全屏显示</h4>\n<blockquote>\n<p>全屏显示可以是任意元素，存在兼容性问题，包括高版本浏览器</p>\n</blockquote>\n<h5 id=\"请求全屏事件\"><a class=\"卓越科技-\" href=\"#请求全屏事件\">#</a> 请求全屏事件</h5>\n<blockquote>\n<p>不同浏览器需要添加不同前缀</p>\n</blockquote>\n<p><code>xx.RequestFullScreen()</code></p>\n<p><code>xxx.webkitRequestFullScreen()</code></p>\n<p><code>xxx.mozRequestFullScreen()</code>  等等</p>\n<p><code>ms的screen必须为小写</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>requestFullScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    img<span class=\"token punctuation\">.</span><span class=\"token function\">requestFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>webkitRequestFullScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    img<span class=\"token punctuation\">.</span><span class=\"token function\">webkitRequestFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>mozRequestFullScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    img<span class=\"token punctuation\">.</span><span class=\"token function\">mozRequestFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>msRequestFullscreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      <span class=\"token comment\">//ms 的 screen 的 s 必须小写  即 img.msRequestFullscreen ();</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    img<span class=\"token punctuation\">.</span><span class=\"token function\">msRequestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"取消全屏\"><a class=\"卓越科技-\" href=\"#取消全屏\">#</a> 取消全屏</h5>\n<blockquote>\n<p>跟元素没有关系，一般是用在 document 上，也要加浏览器前缀</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">CancelFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">webkitCancelFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">webkitCancelFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"检测是否全屏\"><a class=\"卓越科技-\" href=\"#检测是否全屏\">#</a> 检测是否全屏</h5>\n<blockquote>\n<p>也是加在 document 上，也要加前缀</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">IsFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">webkitIsFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">webkitIsFullScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"文件读取\"><a class=\"卓越科技-\" href=\"#文件读取\">#</a> 文件读取</h4>\n<h5 id=\"filereader对象\"><a class=\"卓越科技-\" href=\"#filereader对象\">#</a> FileReader 对象</h5>\n<blockquote>\n<p>FileReader 对象：允许 web 应用程序异步读取存储在用户计算机上的文件，比如一个 input 元素上选择文件后返回的对象</p>\n</blockquote>\n<h5 id=\"属性\"><a class=\"卓越科技-\" href=\"#属性\">#</a> 属性</h5>\n<ul>\n<li><code>FileReader.result</code> : 用于读取文件的内容，仅在文件读取操作完成后有效，数据的格式取决于使用哪个方法 (以下) 来启动读取操作</li>\n</ul>\n<h5 id=\"方法\"><a class=\"卓越科技-\" href=\"#方法\">#</a> 方法</h5>\n<ul>\n<li>\n<p><code>FileReader.readAsDataURL(目标文件)</code> : 读取指定的文件的内容，返回 data:URL 格式的字符串 (地址) 存放在 result 属性中</p>\n</li>\n<li>\n<p><code>FileReader.readAsText(目标文件)</code> : 读取指定文件的内容，以字符串格式返回文件内容到 result 属性中</p>\n</li>\n</ul>\n<h5 id=\"事件处理\"><a class=\"卓越科技-\" href=\"#事件处理\">#</a> 事件处理</h5>\n<p><code>FileReader.onload</code> : 该事件在读取完成时触发</p>\n<p>file 类型 input 表单中有一个属性 files, 以伪数组形式保存上传的文件信息，可以用 filereader 对象读取</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以用 onchange 事件处理来检测 file 表单是否上传了文件</p>\n<h4 id=\"video标签\"><a class=\"卓越科技-\" href=\"#video标签\">#</a> video 标签</h4>\n<p>属性</p>\n<ul>\n<li>\n<p><code>video.duration</code> : 返回当前音频 / 视频的长度</p>\n</li>\n<li>\n<p><code>currentTime</code> : 返回或设置当前音频 / 视频的播放进度</p>\n</li>\n</ul>\n<p>事件</p>\n<ul>\n<li>\n<p><code>video.oncanplay</code> : 当前视频 / 音频可以播放时触发</p>\n</li>\n<li>\n<p><code>video.onended</code> : 当前视频 / 音频播放结束时触发</p>\n</li>\n<li>\n<p><code>video.ontimeupdate</code> : 当前视频 / 音频播放位置改变时触发 通常与 currentTime 属性一起使用</p>\n</li>\n</ul>\n<h2 id=\"图解\"><a class=\"卓越科技-\" href=\"#图解\">#</a> 图解</h2>\n<div class=\"note info \">\n<p>思维导图来自: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vamluc2V4aWFvemhpbWEvaml1amluL3RyZWUvbWFzdGVyL01pbmRtYXA=\">https://gitee.com/jinsexiaozhima/jiujin/tree/master/Mindmap</span> 侵删！！！<br>更多文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vdXNlci8xNjI2OTMyOTQyMjI0Mzk4L3Bvc3Rz\">https://juejin.im/user/1626932942224398/posts</span>\n</p>\n</div>\n<h3 id=\"基础篇\"><a class=\"卓越科技-\" href=\"#基础篇\">#</a> 基础篇</h3>\n<h4 id=\"前端发展史\"><a class=\"卓越科技-\" href=\"#前端发展史\">#</a> 前端发展史</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/1%E3%80%81%E5%89%8D%E7%AB%AF%E5%8F%91%E5%B1%95%E5%8F%B2.png\" alt=\"\" /></p>\n<h4 id=\"认识浏览器\"><a class=\"卓越科技-\" href=\"#认识浏览器\">#</a> 认识浏览器</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/2%E3%80%81%E8%AE%A4%E8%AF%86%E6%B5%8F%E8%A7%88%E5%99%A8.png\" alt=\"\" /></p>\n<h4 id=\"js-基础知识\"><a class=\"卓越科技-\" href=\"#js-基础知识\">#</a> JS 基础知识</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/3%E3%80%81JS%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png\" alt=\"\" /></p>\n<h4 id=\"三类输出方式\"><a class=\"卓越科技-\" href=\"#三类输出方式\">#</a> 三类输出方式</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/4%E3%80%81%E4%B8%89%E7%B1%BB%E8%BE%93%E5%87%BA%E6%96%B9%E5%BC%8F.png\" alt=\"\" /></p>\n<h4 id=\"number数据类型\"><a class=\"卓越科技-\" href=\"#number数据类型\">#</a> number 数据类型</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/5%E3%80%81number%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"\" /></p>\n<h4 id=\"string数据类型\"><a class=\"卓越科技-\" href=\"#string数据类型\">#</a> string 数据类型</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/6%E3%80%81string%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"\" /></p>\n<h4 id=\"boolean数据类型\"><a class=\"卓越科技-\" href=\"#boolean数据类型\">#</a> boolean 数据类型</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/7%E3%80%81boolean%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"\" /></p>\n<h4 id=\"object数据类型\"><a class=\"卓越科技-\" href=\"#object数据类型\">#</a> object 数据类型</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/8%E3%80%81object%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png\" alt=\"\" /></p>\n<h4 id=\"条件判断里的相互转换规则\"><a class=\"卓越科技-\" href=\"#条件判断里的相互转换规则\">#</a> 条件判断里的相互转换规则</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/9%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E9%87%8C%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99.png\" alt=\"\" /></p>\n<h4 id=\"数据类型之间的区别堆栈内存\"><a class=\"卓越科技-\" href=\"#数据类型之间的区别堆栈内存\">#</a> 数据类型之间的区别 (堆栈内存)</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/10%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB(%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98).png\" alt=\"\" /></p>\n<h4 id=\"js中三种常见的判断及判断中常用的散知识\"><a class=\"卓越科技-\" href=\"#js中三种常见的判断及判断中常用的散知识\">#</a> JS 中三种常见的判断及判断中常用的散知识</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/11%E3%80%81JS%E4%B8%AD%E4%B8%89%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%A4%E6%96%AD%E5%8F%8A%E5%88%A4%E6%96%AD%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%A3%E7%9F%A5%E8%AF%86.png\" alt=\"\" /></p>\n<h4 id=\"js中三种常见的判断及判断中常用的散知识-2\"><a class=\"卓越科技-\" href=\"#js中三种常见的判断及判断中常用的散知识-2\">#</a> JS 中三种常见的判断及判断中常用的散知识</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/12%E3%80%81JS%E4%B8%AD%E7%9A%84for%E5%BE%AA%E7%8E%AF.png\" alt=\"\" /></p>\n<h4 id=\"函数基础知识全\"><a class=\"卓越科技-\" href=\"#函数基础知识全\">#</a> 函数基础知识（全）</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vamluc2V4aWFvemhpbWEvaml1amluL3Jhdy9tYXN0ZXIvTWluZG1hcC8lRTUlOEUlOUYlRTclOTQlOUZKUyVFNyVBRiU4Ny8xJUUzJTgwJTgxJUU1JTlGJUJBJUU3JUExJTgwJUU3JUFGJTg3LzEzJUUzJTgwJTgxJUU1JTg3JUJEJUU2JTk1JUIwJUU1JTlGJUJBJUU3JUExJTgwJUU3JTlGJUE1JUU4JUFGJTg2JUVGJUJDJTg4JUU1JTg1JUE4JUVGJUJDJTg5LnBuZw==\">https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/ 原生 JS 篇 / 1、基础篇 / 13、函数基础知识（全）.png</span></p>\n<h4 id=\"数组的基础知识\"><a class=\"卓越科技-\" href=\"#数组的基础知识\">#</a> 数组的基础知识</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/14%E3%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.png\" alt=\"\" /></p>\n<h4 id=\"数组中的常用方法\"><a class=\"卓越科技-\" href=\"#数组中的常用方法\">#</a> 数组中的常用方法</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/15%E3%80%81%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png\" alt=\"\" /></p>\n<h4 id=\"数组常用方法补充reduce-filter-flat\"><a class=\"卓越科技-\" href=\"#数组常用方法补充reduce-filter-flat\">#</a> 数组常用方法补充 reduce、filter、flat</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/16%E3%80%81%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%A1%A5%E5%85%85reduce%E3%80%81filter%E3%80%81flat.png\" alt=\"\" /></p>\n<h4 id=\"math的常用方法\"><a class=\"卓越科技-\" href=\"#math的常用方法\">#</a> Math 的常用方法</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/17%E3%80%81Math%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png\" alt=\"\" /></p>\n<h4 id=\"字符串中的常用方法\"><a class=\"卓越科技-\" href=\"#字符串中的常用方法\">#</a> 字符串中的常用方法</h4>\n<p><img data-src=\"https://gitee.com/jinsexiaozhima/jiujin/raw/master/Mindmap/%E5%8E%9F%E7%94%9FJS%E7%AF%87/1%E3%80%81%E5%9F%BA%E7%A1%80%E7%AF%87/18%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png\" alt=\"\" /></p>\n",
            "tags": [
                "Web教程",
                "JavaScript"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/238675c9/",
            "url": "https://shoka.zykjofficial.top/posts/238675c9/",
            "title": "CSS学习",
            "date_published": "2020-04-24T01:13:26.000Z",
            "content_html": "<h2 id=\"css学习\"><a class=\"卓越科技-\" href=\"#css学习\">#</a> CSS 学习</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBFNDExcTdGVT9wPTYw\">黑马程序员</span></p>\n</div>\n<h3 id=\"css样式规则\"><a class=\"卓越科技-\" href=\"#css样式规则\">#</a> CSS 样式规则</h3>\n<p>格式:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">选择器</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">属性</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">属性</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>规则:</p>\n<ul>\n<li>\n<p>选择器用于指定 CSS 样式作用的 Html 对象，花括号内是具体的样式</p>\n</li>\n<li>\n<p>属性和属性值以 &quot;键值对&quot; 的形式出现</p>\n</li>\n<li>\n<p>属性是对指定的对象设置的样式属性，例如字体大小，文本颜色等</p>\n</li>\n<li>\n<p>属性和属性值之间用英文 &quot;:&quot; 链接 不是等号</p>\n</li>\n<li>\n<p>多个键值对之间用英文 &quot;:&quot; 区分</p>\n</li>\n</ul>\n<h3 id=\"字体设置\"><a class=\"卓越科技-\" href=\"#字体设置\">#</a> 字体设置</h3>\n<ul>\n<li>\n<p>CSS Unicode 字体</p>\n<pre><code>微软雅黑 \\5FAE\\8F6F\\96C5\\9ED1\n\n宋体 \\5B8B\\4F53\n</code></pre>\n<p>尽量只写 unicode 字体 写宋体和微软雅黑</p>\n</li>\n<li>\n<p>CSS 中注释方式:  <code>/*这里是注释内容*/ </code></p>\n</li>\n<li>\n<p>设置字体样式 (font-family)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置字体字号 (font-size)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"xxpx\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>字体字号常用技巧:</p>\n<ol>\n<li>\n<p>网页中正文普遍使用 <code>14px</code></p>\n</li>\n<li>\n<p>若有设置多个字体，则字体之间应用 <code>英文逗号隔开</code></p>\n</li>\n<li>\n<p><code>中文字体需要加英文双引号</code> ，英文字体不需要，且 <code>英文字体应在中文字体之前</code></p>\n</li>\n<li>\n<p>若字体中包含 <code>空格、π、$</code>  等符号，无论是英文还是中文字体都 <code>必须加引号</code></p>\n</li>\n<li>\n<p>尽量使用系统默认字体</p>\n</li>\n</ol>\n</li>\n<li>\n<p>设置字体粗细 (font-weight)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>属性值:<br />\n <code>normal(即400)、bold(即700)、bolder、lighter、100-900之间100的整倍数</code></p>\n</li>\n<li>\n<p>设置字体风格 (font-style)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">font-style</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>属性值:<br />\n <code>normal,italic(斜体)</code></p>\n</li>\n<li>\n<p>字体综合设置</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">选择器</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> font-style font-weight font-size/line-height font-family<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>注意 :</em></p>\n<p><code>不能更换顺序，以空格隔开</code></p>\n<p><code>不需要设置的属性可以忽略</code></p>\n</li>\n</ul>\n<h3 id=\"选择器\"><a class=\"卓越科技-\" href=\"#选择器\">#</a> 选择器</h3>\n<h4 id=\"标签选择器\"><a class=\"卓越科技-\" href=\"#标签选择器\">#</a> 标签选择器</h4>\n<p>格式:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">标签名</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">属性1</span><span class=\"token punctuation\">:</span> 属性值1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">属性2</span><span class=\"token punctuation\">:</span> 属性值2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">属性3</span><span class=\"token punctuation\">:</span> 属性值3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"类选择器\"><a class=\"卓越科技-\" href=\"#类选择器\">#</a> 类选择器</h4>\n<p>格式:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.类名</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">属性1</span><span class=\"token punctuation\">:</span> 属性值1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">属性2</span><span class=\"token punctuation\">:</span> 属性值2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">属性3</span><span class=\"token punctuation\">:</span> 属性值3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>标签调用时用 <code>class=&quot;类名&quot;</code>  即可</p>\n<p><code>命名规范</code> :</p>\n<ul>\n<li>长名称或词组可以使用中横线来为选择器命名</li>\n<li>不建议使用 &quot;_&quot; 下划线命名 css 选择器</li>\n<li>不要纯数字、中文等命名，尽量使用英文字母</li>\n</ul>\n<h4 id=\"多类名选择器\"><a class=\"卓越科技-\" href=\"#多类名选择器\">#</a> 多类名选择器</h4>\n<p>即一个标签带多个类名，从而实现灵活自由搭配</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font20 blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>A<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font14 blue<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>B<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font20 orange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>C<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font14 orange<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>D<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意:</p>\n<ul>\n<li>样式显示效果跟 Html 中的 <code>类名先后顺序无关</code></li>\n<li>各个类名中间用 <code>空格</code> 隔开</li>\n</ul>\n<h4 id=\"交集选择器\"><a class=\"卓越科技-\" href=\"#交集选择器\">#</a> 交集选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">标签名.类名</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"并集选择器\"><a class=\"卓越科技-\" href=\"#并集选择器\">#</a> 并集选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 一般上下写 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">标签名,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>标签名,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>标签名</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"id选择器\"><a class=\"卓越科技-\" href=\"#id选择器\">#</a> id 选择器</h4>\n<p>语法格式:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#id名</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>xx</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id名<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>xx</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>id 与类选择器区别:  <code>一个id只能用于一个标签</code> ， <code>类可以用于多个标签</code> 。</p>\n<h4 id=\"链接伪类选择器\"><a class=\"卓越科技-\" href=\"#链接伪类选择器\">#</a> 链接伪类选择器</h4>\n<p>语法格式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:link</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 设置未点击链接时链接的样式 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">:visited</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 设置点击链接后链接的样式 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">:hover</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 设置鼠标移动到链接时的样式 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token selector\">:active</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 设置鼠标点击链接且不松开时的样式 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：必须按照以上 <code>lvha</code>  的顺序 (link visited hover active)</p>\n<p>一般工作不需要用到 active 和 visited ，所以有以下便捷写法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">a</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">a:hover</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结构伪类选择器\"><a class=\"卓越科技-\" href=\"#结构伪类选择器\">#</a> 结构伪类选择器</h4>\n<blockquote>\n<p>原理：先找到 XX 元素的父元素，再找这个父元素的第指定个元素，如果不与 xx 元素相同则无视。即是相对于父元素的结构伪类</p>\n</blockquote>\n<p>注意:  <code>n是从0到指定的元素个数</code></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 选择 xx 元素中的第一个子元素 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">xx:first-child</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 选择 xx 元素中的最后一个子元素 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">xx:last-child</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 选择 xx 元素中的第 y 个子元素 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">xx:nth-child(y)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 选择所有子元素 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">xx:nth-child(n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* 选择所有第偶数个子元素 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">xx:nth-child(even)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/* 选择所有第奇数个子元素 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">xx:nth-child(odd)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/* 选择所有第偶数个子元素 */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token selector\">xx:nth-child(2n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/* 选择所有第奇数个子元素 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token selector\">xx:nth-child(2n+1)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/* 与上面相同，但是是倒数 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token selector\">xx:nth-last-child</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/* 选择前 y 个 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token selector\">xx:nth-child(-n+y)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/* 只认定 xx 元素同级元素中所有 xx 元素。即所有 xx 元素中的第 n 个 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token selector\">xx:nth-of-type(n)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/* 倒数 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token selector\">xx:nth-last-of-type()</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"兄弟伪类选择器\"><a class=\"卓越科技-\" href=\"#兄弟伪类选择器\">#</a> 兄弟伪类选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">xx + yy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 选择在 xx 后面的 yy 元素 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">xx ~ yy</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* 选择 xx 之前的 yy 元素 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"伪元素选择器\"><a class=\"卓越科技-\" href=\"#伪元素选择器\">#</a> 伪元素选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 选中 x 标签中文档的第一个字 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">x::first-letter</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 选中 x 标签中文档的第一行 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">x::first-line</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 使选中的文字发生实时变化 (只能改变显示样式不能改变内容大小)*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">x::selection</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 在 x 文档的开头添加文字 xx*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">x::before</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* 在 x 文档的结尾添加文字 XX*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">x::after</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>伪元素的本质</em></p>\n<ul>\n<li>伪元素本质为 <code>行内元素</code> ，改为块级元素 (或者浮动、定位) 后可以设置宽高，伪元素不占位置。设置 <code>:before</code>  和 <code>:after</code>  时 <code>必须设置content属性</code> ，否则伪元素不起作用</li>\n</ul>\n<h4 id=\"后代选择器\"><a class=\"卓越科技-\" href=\"#后代选择器\">#</a> 后代选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">父标签 子孙标签</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以选择父标签内的所有对应子标签、孙标签、重孙标签。</p>\n<h4 id=\"子元素选择器\"><a class=\"卓越科技-\" href=\"#子元素选择器\">#</a> 子元素选择器</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">父标签 > 字标签</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>只能选择父标签的亲生儿子标签。</strong></p>\n<h4 id=\"属性选择器\"><a class=\"卓越科技-\" href=\"#属性选择器\">#</a> 属性选择器</h4>\n<blockquote>\n<p>选取标签带有某些特殊属性的选择器我们成为属性选择器</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E[attr]</td>\n<td>存在 attr 属性即可</td>\n</tr>\n<tr>\n<td>E[attr=ya]</td>\n<td>属性值完全等于 val</td>\n</tr>\n<tr>\n<td>E[attr*=val]</td>\n<td>属性值里包含 val 字符并且在 &quot;任意&quot; 位置</td>\n</tr>\n<tr>\n<td>E[attr^=val]</td>\n<td>属性值里包含 val 字符并且在 &quot;开始&quot; 位置</td>\n</tr>\n<tr>\n<td>E[attr$=val]</td>\n<td>属性值里包含 val 字符并且在 &quot;结束&quot; 位置</td>\n</tr>\n</tbody>\n</table>\n<p>当然、直接通过 <code>[attr]</code>  获取也是可以的、比如获取自定义属性</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 注意：选择的是 title 对应的元素 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">[title]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>获取到拥有该属性的元素</code></p>\n<h4 id=\"状态选择器\"><a class=\"卓越科技-\" href=\"#状态选择器\">#</a> 状态选择器</h4>\n<table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:empty</code></td>\n<td>p:empty</td>\n<td>选择没有子元素的每个  <code>&lt;p&gt; </code> 元素 (包括文本节点)。</td>\n</tr>\n<tr>\n<td><code>:target</code></td>\n<td>#news:target</td>\n<td>选择当前活动的 #news 元素。</td>\n</tr>\n<tr>\n<td><code>:enabled</code></td>\n<td>input:enabled</td>\n<td>选择每个启用的 <code> &lt;input&gt;</code>  元素。</td>\n</tr>\n<tr>\n<td><code>:disabled</code></td>\n<td>input:disabled</td>\n<td>选择每个禁用的 <code> &lt;input&gt;</code>  元素</td>\n</tr>\n<tr>\n<td><code>:checked</code></td>\n<td>input:checked</td>\n<td>选择每个被选中的  <code>&lt;input&gt;</code>  元素。</td>\n</tr>\n<tr>\n<td><code>:not(selector)</code></td>\n<td>:not(p)</td>\n<td>选择非  <code>&lt;p&gt;</code>  元素的每个元素。</td>\n</tr>\n</tbody>\n</table>\n<p>注意:</p>\n<ul 样式;=\"\">\n<li>\n<p>not () 括号里可以是类名 id 名属性等等</p>\n</li>\n<li>\n<p>target 样式：可以为锚点目标元素添加样式，当目标元素被触发为当前锚点链接的目标时，调用此样式</p>\n<p>语法 目标链接 :target</p>\n</li>\n</ul>\n<h3 id=\"颜色\"><a class=\"卓越科技-\" href=\"#颜色\">#</a> 颜色</h3>\n<blockquote>\n<p>CSS 颜色三种表达方式</p>\n</blockquote>\n<ul>\n<li>\n<p>直接用名字表示: color: red</p>\n</li>\n<li>\n<p>用 16 进制代码表示: color: #ffb100</p>\n</li>\n<li>\n<p>用 rgb 代码表示 rgb (192,255,252) ，分别代表红绿蓝，16 进制数</p>\n</li>\n<li>\n<p>rgba (x,x,x,x) 最后一个数值可以设置半透明度</p>\n</li>\n<li>\n<p>hsl (颜色，饱和度，亮度); 颜色  <code>0~360</code>   饱和度、亮度  <code>0%~100%</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/2020042123428.png\" alt=\"\" /></p>\n<h3 id=\"行高对齐和首行缩进\"><a class=\"卓越科技-\" href=\"#行高对齐和首行缩进\">#</a> 行高对齐和首行缩进</h3>\n<ul>\n<li>\n<p>行间距:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> xxpx<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>首行缩进:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-indent</span><span class=\"token punctuation\">:</span> xxpx<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>字间距:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span> xxpx<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"英文大小写转换\"><a class=\"卓越科技-\" href=\"#英文大小写转换\">#</a> 英文大小写转换</h3>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-transform</span><span class=\"token punctuation\">:</span> capitalize | uppercase | lowercase | none</pre></td></tr></table></figure><ul>\n<li><code>capitalize</code> : 首字母转大写</li>\n<li><code>uppercase</code> : 转换成大写</li>\n<li><code>lowercase</code> : 转换成小写</li>\n</ul>\n<h3 id=\"文字阴影\"><a class=\"卓越科技-\" href=\"#文字阴影\">#</a> 文字阴影</h3>\n<pre><code>text-shadow: 水平位置(px) 垂直位置(px) 模糊距离(px) 阴影颜色(rgba);\n</code></pre>\n<h3 id=\"css书写规范\"><a class=\"卓越科技-\" href=\"#css书写规范\">#</a> CSS 书写规范</h3>\n<ul>\n<li>\n<p>选择器与花括号之间必有空格</p>\n</li>\n<li>\n<p>属性名与冒号之间不允许有空格，冒号后必须有空格</p>\n</li>\n<li>\n<p>属性值后必须加分号</p>\n</li>\n<li>\n<p>当选择器有多个并行标签时，应上下逗号分开</p>\n</li>\n<li>\n<p>选择器的嵌套尽量不超三层</p>\n</li>\n<li>\n<p>不同属性应另起一行</p>\n</li>\n</ul>\n<h3 id=\"css样式表\"><a class=\"卓越科技-\" href=\"#css样式表\">#</a> CSS 样式表</h3>\n<h4 id=\"内部样式表\"><a class=\"卓越科技-\" href=\"#内部样式表\">#</a> 内部样式表</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">选择器</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">属性1</span><span class=\"token punctuation\">:</span> 属性值1<span class=\"token punctuation\">;</span><span class=\"token property\">属性2</span><span class=\"token punctuation\">:</span> 属性值2<span class=\"token punctuation\">;</span><span class=\"token property\">属性3</span><span class=\"token punctuation\">:</span> 属性值3<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"行内样式表\"><a class=\"卓越科技-\" href=\"#行内样式表\">#</a> 行内样式表</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">属性1</span><span class=\"token punctuation\">:</span> 属性值1<span class=\"token punctuation\">;</span> <span class=\"token property\">属性2</span><span class=\"token punctuation\">:</span> 属性值2<span class=\"token punctuation\">;</span> <span class=\"token property\">属性3</span><span class=\"token punctuation\">:</span> 属性值3<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"外部样式表\"><a class=\"卓越科技-\" href=\"#外部样式表\">#</a> 外部样式表</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 是个单标签 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css的路径<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>总结:  <code>推荐使用外部样式表</code></p>\n<h3 id=\"标签显示类型\"><a class=\"卓越科技-\" href=\"#标签显示类型\">#</a> 标签显示类型</h3>\n<h4 id=\"块级标签\"><a class=\"卓越科技-\" href=\"#块级标签\">#</a> 块级标签</h4>\n<p><code>display: block 此元素将显示为块级元素，此元素前后会带有换行符。</code></p>\n<p>如  <code>&lt;h1&gt;</code>   <code>&lt;p&gt;</code>   <code>&lt;div&gt;</code>   <code> &lt;ul&gt;</code>   <code>&lt;ol&gt;</code>   <code>&lt;li&gt;</code>  等</p>\n<p><em>块级元素特点 :</em></p>\n<ul>\n<li>总是从新行开始</li>\n<li>高度、行高、外边距以及内边距都可以控制</li>\n<li>宽度默认是容器的 100%</li>\n<li>可以容纳内联元素和其他块元素</li>\n</ul>\n<h4 id=\"行内元素\"><a class=\"卓越科技-\" href=\"#行内元素\">#</a> 行内元素</h4>\n<p><code>display: inline 默认。此元素会被显示为内联元素，元素前后没有换行符。</code></p>\n<p>如  <code>&lt;a&gt;</code>   <code>&lt;strong&gt;</code>   <code>&lt;b&gt;</code>   <code>&lt;em&gt;</code>   <code>&lt;i&gt;</code>   <code>&lt;del&gt;</code>   <code>&lt;s&gt;</code>   <code>&lt;ins&gt;</code>   <code>&lt;u&gt;</code>   <code>&lt;span&gt;</code>  等</p>\n<p><em>特点 :</em></p>\n<ul>\n<li>和相邻行内元素在一行上</li>\n<li>高宽无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效</li>\n<li>默认宽度是它本身内容的宽度</li>\n<li>行内元素只能容纳文本或其他行内元素</li>\n</ul>\n<p><em>注意 :</em></p>\n<ul>\n<li>文字标签里不能放块级元素。链接里不能再放链接</li>\n</ul>\n<h4 id=\"行内块元素\"><a class=\"卓越科技-\" href=\"#行内块元素\">#</a> 行内块元素</h4>\n<p><code>display: inline-block 行内块元素。</code></p>\n<p>如 <code>&lt;img/&gt;</code>   <code>&lt;input/&gt;</code>   <code>&lt;td&gt;</code>  等</p>\n<p><em>特点 :</em></p>\n<ul>\n<li>和相邻行内元素在一行上，但是之间会有空白缝隙</li>\n<li>默认宽度就是它本身内容的宽度</li>\n<li>高度，行高，外边距以及内边距都可以控制</li>\n</ul>\n<h3 id=\"背景图设置\"><a class=\"卓越科技-\" href=\"#背景图设置\">#</a> 背景图设置</h3>\n<ul>\n<li>\n<p>背景图地址</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>图片地址<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置背景颜色</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>设置平铺方式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> repeat<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有 <code>no-repeat(全平铺)</code> 、 <code>repeat-x(x轴方向平铺)</code> 、 <code>repeat-y(y轴方向平铺)</code> 、 <code>space(图片不缩放并增加空隙后平铺)</code> 、 <code>round(图片缩放后使其紧贴平铺)</code>  选项.</p>\n</li>\n</ul>\n<h4 id=\"设置背景图位置\"><a class=\"卓越科技-\" href=\"#设置背景图位置\">#</a> 设置背景图位置</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> x轴方向像素 y轴方向像素<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 第一个值是水平位置，第二个值是垂直位置 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background-posiiton</span><span class=\"token punctuation\">:</span> 方位词 方位词<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* (无先后顺序之分) top bottom left right center; */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 方位词+y像素<span class=\"token punctuation\">(</span>x像素+方位词<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"背景图平铺开始位置\"><a class=\"卓越科技-\" href=\"#背景图平铺开始位置\">#</a> 背景图平铺开始位置</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-origin</span><span class=\"token punctuation\">:</span> border-box/padding-box/content-box<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>即从border、padding、content开始平铺<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background-clip</span><span class=\"token punctuation\">:</span> border-box/padding-box/content-box/text <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>即分别只显示border及以内、padding及以内、content的内容、背景被裁剪成文字的前景色<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"背景附着\"><a class=\"卓越科技-\" href=\"#背景附着\">#</a> 背景附着</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-attachment</span><span class=\"token punctuation\">:</span> scroll/fixed<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 前者为默认随对象内容滚动，后者为背景图像固定 */</span></pre></td></tr></table></figure><ul>\n<li>\n<p>背景简写:  <code>background: color  url  平铺方式  滚动方式  位置;</code>   <code>(尽量采用此顺序)</code></p>\n</li>\n<li>\n<p>背景半透明：在颜色设置中采用 <code>rgba( x，x，x，0.x )</code>  最后为透明度数值</p>\n</li>\n</ul>\n<h4 id=\"背景缩放\"><a class=\"卓越科技-\" href=\"#背景缩放\">#</a> 背景缩放</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> xxpx xxpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> xx% xx%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> contain<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 自动调整缩放比例保证图片完整显示 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 自动调整缩放比例保证图片填充满背景区域 */</span></pre></td></tr></table></figure><h4 id=\"多背景图片\"><a class=\"卓越科技-\" href=\"#多背景图片\">#</a> 多背景图片</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>xxxx<span class=\"token punctuation\">)</span></span>...<span class=\"token punctuation\">,</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>xxx<span class=\"token punctuation\">)</span></span>...<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 不同图片以逗号隔开 */</span></pre></td></tr></table></figure><h3 id=\"凹陷文字效果\"><a class=\"卓越科技-\" href=\"#凹陷文字效果\">#</a> 凹陷文字效果</h3>\n<ul>\n<li>\n<p>突出效果:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div:first-child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 2px 2px 2px #000<span class=\"token punctuation\">,</span> -1px -1px 1px #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><style>\n.tuchu{\n      text-shadow: 2px 2px 2px #000, -1px -1px 1px #fff;\n}\n</style>\n<div>\n  <p class=\"tuchu\">突出效果的文字</p>\n</div>\n</li>\n<li>\n<p>凹陷效果:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div:last-child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 1px 1px 1px #fff<span class=\"token punctuation\">,</span> -2px -2px 2px #000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><style>\n  .aoxian{\n        text-shadow: 1px 1px 1px #fff, -2px -2px 2px #000;\n  }\n  </style>\n  <div>\n    <p class=\"aoxian\">凹陷效果的文字</p>\n  </div>\n</li>\n<li>\n<p>小技巧:  <code>将行距设置为盒子高度即可使文本垂直居中 line-height: 盒子高度</code></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 不设置下划线 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 设置下划线 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> overline<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 设置上划线 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> line-through<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 设置穿过文本的一条线 */</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"css三大特性\"><a class=\"卓越科技-\" href=\"#css三大特性\">#</a> CSS 三大特性</h3>\n<h4 id=\"层叠性\"><a class=\"卓越科技-\" href=\"#层叠性\">#</a> 层叠性</h4>\n<blockquote>\n<p>当同个标签设置样式属性不同值出现冲突时，则依照就近原则以最后的样式属性为准。</p>\n</blockquote>\n<h4 id=\"继承性\"><a class=\"卓越科技-\" href=\"#继承性\">#</a> 继承性</h4>\n<blockquote>\n<p>子元素能继承父元素的样式</p>\n</blockquote>\n<h4 id=\"优先级\"><a class=\"卓越科技-\" href=\"#优先级\">#</a> 优先级</h4>\n<blockquote>\n<p>!important &gt; 行内样式 &gt; id 选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符 &gt; 继承<br />\n优先级高的规则会忽视层叠性，忽视就近原则来定义样式。比如定义了！important，即使行内样式离得近，最终生效的还是！important 标注的属性</p>\n</blockquote>\n<h4 id=\"css-speciality-权重值\"><a class=\"卓越科技-\" href=\"#css-speciality-权重值\">#</a> CSS Speciality 权重值</h4>\n<ol>\n<li>\n<p>继承或 * 的贡献值 0,0,0,0</p>\n</li>\n<li>\n<p>每个元素标签的贡献值 0,0,0,1</p>\n</li>\n<li>\n<p>类、伪类、元素选择器的贡献值 0,0,1,0</p>\n</li>\n<li>\n<p>id 选择器的贡献值 0,1,0,0</p>\n</li>\n<li>\n<p>行内样式贡献值 1,0,0,0</p>\n</li>\n<li>\n<p>!important 的贡献值 ∞ 无穷大</p>\n</li>\n</ol>\n<p>注意:</p>\n<ul>\n<li>\n<p>权重可以叠加 如: div ul li 的贡献值为 0,0,0,3</p>\n</li>\n<li>\n<p>数位之间没有进制</p>\n</li>\n<li>\n<p>继承的权重为 0</p>\n</li>\n</ul>\n<p>总结优先级:</p>\n<ul>\n<li>使用了 <code>!important</code>  声明的规则。</li>\n<li>内嵌在 HTML 元素的 style 属性里面的声明。</li>\n<li>使用了 ID 选择器的规则。</li>\n<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>\n<li>使用了元素选择器的规则。</li>\n<li>只包含一个通用选择器的规则。</li>\n<li>同一类选择器则遵循就近原则。</li>\n</ul>\n<h3 id=\"css盒子模型\"><a class=\"卓越科技-\" href=\"#css盒子模型\">#</a> CSS 盒子模型</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200422110217.png\" alt=\"\" /></p>\n<h4 id=\"盒子边框\"><a class=\"卓越科技-\" href=\"#盒子边框\">#</a> 盒子边框</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> 设置边框颜色</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 设置边框厚度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> 设置边框类型</pre></td></tr></table></figure><p><code>style</code>  属性值有:</p>\n<ul>\n<li>实线  <code>solid</code></li>\n<li>虚线  <code>dashed</code></li>\n<li>点线  <code>dotted</code></li>\n<li>双实线  <code>double</code></li>\n</ul>\n<h4 id=\"不同方向边框的写法\"><a class=\"卓越科技-\" href=\"#不同方向边框的写法\">#</a> 不同方向边框的写法</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">border-top</span><span class=\"token punctuation\">(</span>left、right、bottom<span class=\"token punctuation\">)</span><span class=\"token function\">-width</span><span class=\"token punctuation\">(</span>color、style<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"边框综合写法\"><a class=\"卓越科技-\" href=\"#边框综合写法\">#</a> 边框综合写法</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> width style color</pre></td></tr></table></figure><h4 id=\"合并细线表格\"><a class=\"卓越科技-\" href=\"#合并细线表格\">#</a> 合并细线表格</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">border-collapse</span><span class=\"token punctuation\">:</span> collapse</pre></td></tr></table></figure><h4 id=\"圆角矩形\"><a class=\"卓越科技-\" href=\"#圆角矩形\">#</a> 圆角矩形</h4>\n<pre><code>border-radius: xxpx(xx%)  /*设置四个角*/\n\nborder-radius: xx xx     /*设置左上右下  左下右上*/\n\nborder-radius: XX XX XX /*设置左上 左下右上 右下*/\n\nborder-radius: xx xx xx xx   /*左上 右上 右下 左下*/\n\nborder-radius: xx/xx     /*设置每个角的水平/垂直方向*/\n\nborder-方位词-方位词-radius: xxpx; /*如broder-top-right-radius*/\n\nborder-radius: x1 x3 x5 x7/x2 x4 x6 x8;   /*x1x2为左上 x3x4右上 以此类推*/  \n</code></pre>\n<h4 id=\"边框图片\"><a class=\"卓越科技-\" href=\"#边框图片\">#</a> 边框图片</h4>\n<pre><code>border-image-source: url();\n\nborder-image-slice: xx fill; /*图片切片，不需加单位,即将图片四个边xx像素的宽度作为边框 fill则是将整个图片填充 */\n\nborder-image-width: xxpx; /*设置边框背景图宽度 但是不影响内容放置*/\n\nborder-image-outset: 0; /*边框扩展，一般为0*/\n\nborder-image-repeat: repeat/round; /*(前者直接平铺/后者缩放后平铺)*/\n</code></pre>\n<ul>\n<li>简写: border-image:  <code>source</code>   <code>slice</code>   <code>width</code>   <code>outset</code>   <code>repeat|initial|inherit</code> ;</li>\n</ul>\n<h4 id=\"盒子内边距\"><a class=\"卓越科技-\" href=\"#盒子内边距\">#</a> 盒子内边距</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> xx     <span class=\"token comment\">/* 设置四个边距 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> xx xx    <span class=\"token comment\">/* 设置上下 左右边距 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> xx xx xx   <span class=\"token comment\">/* 设置 上 左右 下边距 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> xx xx xx xx   <span class=\"token comment\">/* 设置上 右 下 左 边距 */</span></pre></td></tr></table></figure><h4 id=\"清除内外边距\"><a class=\"卓越科技-\" href=\"#清除内外边距\">#</a> 清除内外边距</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>行内元素只有左右内外边距没有上下内外边距，尽量不要给行内元素指定上下内外边距</strong></p>\n<h4 id=\"外边距合并的问题\"><a class=\"卓越科技-\" href=\"#外边距合并的问题\">#</a> 外边距合并的问题</h4>\n<blockquote>\n<p>垂直相邻的块元素，若上面的元素有 margin-bottom，下面的块元素有 margin-top，则他们之间的外边距之和不是两者相加而是两者较大者。这种现象被称为相邻块元素垂直外边距的合并</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200426162303.png\" alt=\"\" /></p>\n<p>解决方法：只设置一个盒子的外边距即可</p>\n<h4 id=\"嵌套块元素的合并\"><a class=\"卓越科技-\" href=\"#嵌套块元素的合并\">#</a> 嵌套块元素的合并</h4>\n<blockquote>\n<p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距合并，合并结果为两者中较大者。</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200426162553.png\" alt=\"\" /></p>\n<p>解决方法:</p>\n<ul>\n<li>为父元素定义 1 像素的边距或内边距</li>\n<li>可以为父元素添加 <code>overflow: hidden</code></li>\n</ul>\n<h4 id=\"盒子尺寸计算\"><a class=\"卓越科技-\" href=\"#盒子尺寸计算\">#</a> 盒子尺寸计算</h4>\n<blockquote>\n<p>外盒尺寸 = width (height) + padding + border + margin<br />\n 内盒尺寸 = width (height) + padding + border</p>\n</blockquote>\n<p>注意:</p>\n<ul>\n<li>width 和 height 对行内元素无效</li>\n<li>要考虑上下两个盒子的外边距合并</li>\n<li>若盒子没有指定高度或宽度 (或继承了父元素的高度或宽度)，则 padding 不会影响整体高度或宽度</li>\n</ul>\n<h4 id=\"盒子模型布局稳定性\"><a class=\"卓越科技-\" href=\"#盒子模型布局稳定性\">#</a> 盒子模型布局稳定性</h4>\n<blockquote>\n<p>使用优先级: width &gt; padding &gt; margin</p>\n</blockquote>\n<p>原因:</p>\n<ul>\n<li>\n<p>margin 会有外边距合并，还有 IE6 下面 margin 加倍的 bug</p>\n</li>\n<li>\n<p>padding 会影响盒子大小，需要进行加减计算</p>\n</li>\n<li>\n<p>width 没有问题，常用宽度剩余法 高度剩余法来做</p>\n</li>\n</ul>\n<h4 id=\"css3盒模型\"><a class=\"卓越科技-\" href=\"#css3盒模型\">#</a> CSS3 盒模型</h4>\n<ul>\n<li>\n<p><code>box-sizing: content-box</code> <br />\n 盒子大小为 width + padding + border 为默认值</p>\n</li>\n<li>\n<p><code>box-sizing: border-box</code> <br />\n 盒子大小为 width 即 padding 和 border 包含到了 width 里面 如果为这个值，则设置 padding 时不用重新计算</p>\n</li>\n</ul>\n<h4 id=\"盒子阴影\"><a class=\"卓越科技-\" href=\"#盒子阴影\">#</a> 盒子阴影</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 10px 10px 10px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0 <span class=\"token punctuation\">,</span>0 <span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span> .3<span class=\"token punctuation\">)</span> inset    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 分别设置 水平距离 垂直距离 模糊距离 阴影大小 颜色 内阴影 / 外阴影 */</span></pre></td></tr></table></figure><h3 id=\"文档流\"><a class=\"卓越科技-\" href=\"#文档流\">#</a> 文档流</h3>\n<h4 id=\"类型\"><a class=\"卓越科技-\" href=\"#类型\">#</a> 类型</h4>\n<ul>\n<li>\n<p>普通流：网页内标签正常地从上到下从左到右的排序，如块级元素独占一行，行内元素会依照顺序依次前后排列。</p>\n</li>\n<li>\n<p>浮动：使元素脱离文档流，按照指定的方向发生移动，遇到父级的边界或者是相邻的浮动元素就会停止。</p>\n</li>\n<li>\n<p>定位：定位同浮动一样是脱离文档流的布局方式，但定位是完全脱离文档流，浮动是不完全脱离文档流。所以它可以完全由设计者确定其位置。通过定位可以实现盒子的覆盖，但是又不影响被覆盖盒子的位置。</p>\n</li>\n</ul>\n<h4 id=\"浮动\"><a class=\"卓越科技-\" href=\"#浮动\">#</a> 浮动</h4>\n<blockquote>\n<p>指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p>\n</blockquote>\n<ul>\n<li>\n<p>语法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">选择器</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>属性值:  <code>left</code> 、 <code>right</code> 、 <code>none</code></p>\n<p>使用浮动首先要添加标准流父盒，从而防止布局失真</p>\n</li>\n</ul>\n<p><em>浮动特性</em></p>\n<ul>\n<li>\n<p>父盒内的盒子设置浮动后会就近对齐父盒子，但不会遮盖 padding 和 margin</p>\n</li>\n<li>\n<p>兄弟盒子中第一个盒子如果浮动，第二个盒子设置浮动后会与其顶部对齐。若第一个盒子不浮动，第二个盒子设置浮动后顶部会与其底部对齐<br />\n元素 (包括块级和行内) 添加浮动后，都会具有行内块元素的特性</p>\n</li>\n</ul>\n<p><em>总结: float ==&gt; 浮 漏 特</em></p>\n<ul>\n<li>\n<p><code>浮</code> ：加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面</p>\n</li>\n<li>\n<p><code>漏</code> ：加了浮动的盒子，不占位置的，他浮起来了，他原来的位置漏给了标准流的盒子</p>\n</li>\n<li>\n<p><code>特</code> ：特别注意要和标准流父级搭配使用。</p>\n</li>\n</ul>\n<h4 id=\"清除浮动\"><a class=\"卓越科技-\" href=\"#清除浮动\">#</a> 清除浮动</h4>\n<blockquote>\n<p>在一般情况下，考虑到子盒子的内容变化，父盒子都不方便设置高度。子盒子没有浮动时会自动撑开父盒子。如果子盒子浮动，则父盒子高度会变为 0，导致其他盒子占据位置。</p>\n</blockquote>\n<blockquote>\n<p>清除浮动就是解决没有设置高度的父盒子在子盒子浮动后高度变为 0 的现象</p>\n</blockquote>\n<h4 id=\"解决方法\"><a class=\"卓越科技-\" href=\"#解决方法\">#</a> 解决方法</h4>\n<ol>\n<li>\n<p>在父盒子中添加 overflow 除了 visible 以外的属性值 (如 hidden、auto 或 scroll)</p>\n<p>也相当于堵上一堵墙</p>\n<p>优点：简单</p>\n<p>缺点：溢出隐藏</p>\n</li>\n<li>\n<p>额外标签法：父盒子内最后一个浮动盒子的后面添加空标签，且将该标签的 clear 属性值设置为 both</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clear</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>清除浮动的影响：相当于设置一堵墙，防止浮动盒子影响外部</p>\n<p>优点：通俗易懂，书写方便</p>\n<p>缺点：添加了无意义的标签</p>\n</li>\n<li>\n<p><code>用 after 伪元素清除浮动(推荐)</code></p>\n<p>父盒子类名添加 clearfix</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clearfix:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* 兼容 IE 老版本 */</span></pre></td></tr></table></figure><p>优点：结构语义化正确</p>\n<p>缺点: IE6-7 不支持: after 兼容性问题</p>\n</li>\n<li>\n<p><code>用 before 和 after 双伪元素清除浮动(推荐)</code></p>\n<p>父盒子类名添加 clearfix</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.clearfix:before,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.clearfix:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">.clearfix:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    *<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优点：结构语义化正确</p>\n<p>缺点: IE6-7 不支持: after 兼容性问题</p>\n</li>\n</ol>\n<h3 id=\"定位\"><a class=\"卓越科技-\" href=\"#定位\">#</a> 定位</h3>\n<h4 id=\"边偏移\"><a class=\"卓越科技-\" href=\"#边偏移\">#</a> 边偏移</h4>\n<pre><code>top bottom left right\n</code></pre>\n<h4 id=\"定位模式\"><a class=\"卓越科技-\" href=\"#定位模式\">#</a> 定位模式</h4>\n<p>语法:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> 属性值<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>属性值:</p>\n<ul>\n<li>静态定位  <code>static</code></li>\n<li>相对定位  <code>relative</code></li>\n<li>绝对定位  <code>absolute</code></li>\n<li>固定定位  <code>fixed</code></li>\n</ul>\n<h4 id=\"static定位\"><a class=\"卓越科技-\" href=\"#static定位\">#</a> Static 定位</h4>\n<blockquote>\n<p>默认，该定位下无法使用边偏移属性</p>\n</blockquote>\n<h4 id=\"relative定位\"><a class=\"卓越科技-\" href=\"#relative定位\">#</a> Relative 定位</h4>\n<blockquote>\n<p>定位后可通过边偏移改变位置，是以自身左上角为基准。 <code>不脱标，依旧是标准流，原先位置保留</code></p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90cnkvdHJ5LnBocD9maWxlbmFtZT10cnljc3NfcG9zaXRpb25fcmVsYXRpdmU=\">Relative 定位演示</span></p>\n<h4 id=\"absolute定位\"><a class=\"卓越科技-\" href=\"#absolute定位\">#</a> Absolute 定位</h4>\n<blockquote>\n<p>可通过边偏移改变位置， <code>完全脱标不占位置</code> 。</p>\n</blockquote>\n<blockquote>\n<p>子盒子设置为 absolute 后，父盒子必须定位为任何定位类型，子盒子才能以父盒子为基准设置边偏移改变位置，否则会乱跑</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90cnkvdHJ5LnBocD9maWxlbmFtZT10cnljc3NfcG9zaXRpb25fYWJzb2x1dGU=\">Absolute 定位演示</span></p>\n<ul>\n<li>\n<p><code>子绝父相</code> ：一般子盒子设置为绝对定位后，父盒子要设置为相对定位较好</p>\n</li>\n<li>\n<p>水平 / 垂直居中：盒子设置绝对定位后，margin 中的 auto 无效 (具体数值有效)</p>\n</li>\n<li>\n<p>要居中一般是以: left:50%(父容器宽度的一半), 然后走外边距负的一半 margin-left:(自己宽度的一半) 即可</p>\n</li>\n</ul>\n<p>如:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -xxpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> -xxpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>或者 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 父盒子宽度一半减去子盒子宽度一半<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 父盒子高度一半减去子盒子高度一半<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"fixed定位\"><a class=\"卓越科技-\" href=\"#fixed定位\">#</a> Fixed 定位</h4>\n<ul>\n<li>固定定位的元素跟父亲没有任何关系，只认浏览器</li>\n<li>完全脱标，不占位置，不随着滚动条移动</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90cnkvdHJ5LnBocD9maWxlbmFtZT10cnljc3NfcG9zaXRpb25fZml4ZWQ=\">Fixed 定位演示</span></p>\n<p><em>叠加次序</em></p>\n<ul>\n<li>index: 正整数、负整数、0</li>\n</ul>\n<p><em>注意 :</em></p>\n<ul>\n<li>\n<p>index 默认属性值为 0，取值越大，定位元素在层叠元素中越居上</p>\n</li>\n<li>\n<p>如果取值相同，则按顺序后来居上</p>\n</li>\n<li>\n<p>后面数字不能家单位</p>\n</li>\n<li>\n<p>只有相对定位绝对定位固定定位有这个属性。</p>\n</li>\n</ul>\n<p><em>定位总结 :</em></p>\n<table>\n<thead>\n<tr>\n<th>定位模式</th>\n<th>是否脱标占有位置</th>\n<th>是否可以使用边偏移</th>\n<th>移动位置基准</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>静态  <code>static</code></td>\n<td>不脱标，正常模式</td>\n<td>不可以</td>\n<td>正常模式</td>\n</tr>\n<tr>\n<td>相对定位  <code>relative</code></td>\n<td>不脱标，占有位置</td>\n<td>可以</td>\n<td>相对自身位置移动</td>\n</tr>\n<tr>\n<td>绝对定位  <code>absolute</code></td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于定位父级移动位置</td>\n</tr>\n<tr>\n<td>固定定位  <code>fixed</code></td>\n<td>完全脱标，不占有位置</td>\n<td>可以</td>\n<td>相对于浏览器移动位置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"固定绝对定位模式转换\"><a class=\"卓越科技-\" href=\"#固定绝对定位模式转换\">#</a> 固定绝对定位模式转换</h4>\n<blockquote>\n<p>跟浮动一样，元素添加了绝对定位和固定定位之后，元素都会变成行内块模式</p>\n</blockquote>\n<blockquote>\n<p>也就是；如果行内元素添加了绝对定位和固定定位后，可以不用转换模式，直接添加高度宽度。</p>\n</blockquote>\n<h3 id=\"display和visibility的使用\"><a class=\"卓越科技-\" href=\"#display和visibility的使用\">#</a> display 和 visibility 的使用</h3>\n<blockquote>\n<p>display: 设置或检索对象是否及如何显示</p>\n</blockquote>\n<ul>\n<li>\n<p>display: none 隐藏对象</p>\n</li>\n<li>\n<p>display: block 除了转换为块级元素之外还有显示元素的意思</p>\n</li>\n<li>\n<p>特点：隐藏之后，不再保留位置</p>\n</li>\n</ul>\n<blockquote>\n<p>visibility: 设置或检索是否显示对象</p>\n</blockquote>\n<ul>\n<li>\n<p>visible: 对象可视</p>\n</li>\n<li>\n<p>hidden: 对象隐藏</p>\n</li>\n<li>\n<p>特点：隐藏之后，继续保留原有位置</p>\n</li>\n</ul>\n<blockquote>\n<p>overflow: 溢出</p>\n</blockquote>\n<p>属性值</p>\n<ul>\n<li>\n<p><code>visible</code> : 不剪切内容也不添加滚动条 (默认)</p>\n</li>\n<li>\n<p><code>auto</code> : 超出自动显示滚动条，不超出不显示滚动条</p>\n</li>\n<li>\n<p><code>hidden</code> : 不显示超出对象内容的尺寸，超出的部分隐藏掉</p>\n</li>\n<li>\n<p><code>scroll</code> : 不管超出内容否，总是显示滚动条</p>\n</li>\n</ul>\n<h3 id=\"css高级技巧\"><a class=\"卓越科技-\" href=\"#css高级技巧\">#</a> CSS 高级技巧</h3>\n<h4 id=\"鼠标样式\"><a class=\"卓越科技-\" href=\"#鼠标样式\">#</a> 鼠标样式</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">;</span>    小白<span class=\"token punctuation\">(</span>默认<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span>    小手</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">;</span>   文本\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> move<span class=\"token punctuation\">;</span>   移动</pre></td></tr></table></figure><h4 id=\"取消轮廓线\"><a class=\"卓越科技-\" href=\"#取消轮廓线\">#</a> 取消轮廓线</h4>\n<p>语法:</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">outline</span> <span class=\"token punctuation\">:</span> color style width<span class=\"token selector\">;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例子: </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> #00FF00 dotted thick<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>取消轮廓线设置为  <code>none</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2Nzc3JlZi9wcl9vdXRsaW5lLmFzcA==\">详解教程</span></p>\n<h4 id=\"防止拖拽文本\"><a class=\"卓越科技-\" href=\"#防止拖拽文本\">#</a> 防止拖拽文本</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">textarea</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token property\">resize</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"行内块和文字对齐\"><a class=\"卓越科技-\" href=\"#行内块和文字对齐\">#</a> 行内块和文字对齐</h4>\n<p><code>vertical-align</code> : 实现行内元素和行内块元素的对齐，对于块级元素无效</p>\n<p>属性值:</p>\n<ul>\n<li>\n<p><code>top</code> 、 <code>middle</code> 、 <code>bottom</code> 、 <code>baseline(默认)</code></p>\n</li>\n<li>\n<p>一般选用 middle</p>\n</li>\n<li>\n<p>注意：一些低版本浏览器中盒子内的图片可能底部出现缝隙</p>\n</li>\n</ul>\n<h4 id=\"去除图片底侧缝隙\"><a class=\"卓越科技-\" href=\"#去除图片底侧缝隙\">#</a> 去除图片底侧缝隙</h4>\n<ul>\n<li>将图片转为块级元素  <code>display: block</code></li>\n<li>将图片顶部对齐或者中线对齐  <code>vertical-align: top(middle)</code></li>\n</ul>\n<h4 id=\"文本相关\"><a class=\"卓越科技-\" href=\"#文本相关\">#</a> 文本相关</h4>\n<h5 id=\"word-break用法\"><a class=\"卓越科技-\" href=\"#word-break用法\">#</a> word-break 用法</h5>\n<ul>\n<li>\n<p><code>word-break: normal</code>      默认方式</p>\n</li>\n<li>\n<p><code>word-break: break-all</code>   允许单词中换行</p>\n</li>\n<li>\n<p><code>word-break: keep-all</code>  只能在半角空格或连字符处换行</p>\n</li>\n</ul>\n<h5 id=\"word-wrap用法\"><a class=\"卓越科技-\" href=\"#word-wrap用法\">#</a> word-wrap 用法</h5>\n<ul>\n<li>\n<p><code>word-wrap: normal</code> \t只在允许的断字点换行 (浏览器保持默认处理)</p>\n</li>\n<li>\n<p><code>word-wrap: break-word</code> \t在长单词或 URL 地址内部进行换行</p>\n</li>\n</ul>\n<h5 id=\"white-space用法\"><a class=\"卓越科技-\" href=\"#white-space用法\">#</a> white-space 用法</h5>\n<ul>\n<li>\n<p><code>white-space: normal</code>   默认处理方式</p>\n</li>\n<li>\n<p><code>white-space: nowrap</code>  强制在同一行显示所有文本，直到文本结束或遇到 br 才换行</p>\n</li>\n</ul>\n<h5 id=\"text-overflow使用\"><a class=\"卓越科技-\" href=\"#text-overflow使用\">#</a> text-overflow 使用</h5>\n<ul>\n<li>\n<p><code>text-overflow: clip</code>    不显示省略标记，而是简单的裁切</p>\n</li>\n<li>\n<p><code>text-overflow: ellipsis</code>  当对象文本溢出时显示省略标记</p>\n</li>\n</ul>\n<p>注意:  <code>必须先使用white-space: nowrap和overflow: hidden两个属性后才能使用这个</code></p>\n<h3 id=\"精灵技术\"><a class=\"卓越科技-\" href=\"#精灵技术\">#</a> 精灵技术</h3>\n<blockquote>\n<p>即将所有背景图通过一张图来显示<br />\n先设置对应元素的宽高，再设置 background-position, 注意此处应为负值</p>\n</blockquote>\n<h3 id=\"字体图标\"><a class=\"卓越科技-\" href=\"#字体图标\">#</a> 字体图标</h3>\n<p>网站: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9pY29tb29uLmlvLw==\">icomoon.io</span></p>\n<p>将下载后的 icomoon 文件夹中的 font 文件夹放到与 html 文件同个文件夹中，然后声明 (打开 style.css 文件复制 @font-face 属性)，声明后打开 icomoon 文件夹中的 Html 文件复制 <code>小空格</code> 或者 <code>对应的编码</code> 到目标元素中，再设置 font-family。</p>\n<p>追加字体文件要利用 icomoon 文件夹中的 selection 文件</p>\n<h3 id=\"滑动门技术\"><a class=\"卓越科技-\" href=\"#滑动门技术\">#</a> 滑动门技术</h3>\n<p>固定语法:</p>\n<ul>\n<li>\n<p>a 里面包含 span</p>\n</li>\n<li>\n<p>不能设置宽度</p>\n</li>\n<li>\n<p>a 负责左边框，span 负责右边框且背景图位置应设置为 right</p>\n</li>\n<li>\n<p>记得转换为块元素或行内块元素</p>\n</li>\n</ul>\n<h3 id=\"裁剪路径\"><a class=\"卓越科技-\" href=\"#裁剪路径\">#</a> 裁剪路径</h3>\n<h4 id=\"简介\"><a class=\"卓越科技-\" href=\"#简介\">#</a> 简介</h4>\n<blockquote>\n<p>clip-path CSS 属性可以创建一个只有元素的部分区域可以显示的剪切区域。区域内的部分显示，区域外的隐藏。剪切区域是被引用内嵌的 URL 定义的路径或者外部 svg 的路径，或者作为一个形状。clip-path 属性代替了现在已经弃用的剪切 clip 属性。</p>\n</blockquote>\n<h4 id=\"基本语法\"><a class=\"卓越科技-\" href=\"#基本语法\">#</a> 基本语法</h4>\n<pre><code>clip-source | basic-shape | geometry-box | none\n</code></pre>\n<h4 id=\"属性说明\"><a class=\"卓越科技-\" href=\"#属性说明\">#</a> 属性说明</h4>\n<p><code>clip-source = url</code> <br />\n <code>basic-shape = inset | circle | ellipse | polygon</code> <br />\n <code>geometry-box = shape-box | fill-box | stroke-box | view-box</code></p>\n<h4 id=\"语法详解\"><a class=\"卓越科技-\" href=\"#语法详解\">#</a> 语法详解</h4>\n<ul>\n<li>\n<p>基本图形：inset</p>\n<blockquote>\n<p>inset () : 定义一个矩形 。注意，定义矩形不是 rect，而是 inset。</p>\n</blockquote>\n<ol>\n<li>\n<p>语法:  <code>inset( &lt;length-percentage&gt;&#123;1,4&#125; [ round &lt;border-radius&gt; ]? )</code></p>\n</li>\n<li>\n<p>说明:  <code>inset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,round radius（可选，圆角）</code></p>\n</li>\n<li>\n<p>示例</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">inset</span><span class=\"token punctuation\">(</span>5% 20% 15% 10%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure> <style>\n     .insetbox{\n         background: orange;\n         clip-path: inset(5% 20% 15% 10%);\n         -webkit-clip-path: inset(5% 20% 15% 10%);\n         width:100px;\n         height: 100px;\n         background:orange;\n     }\n </style>\n <div class=\"insetbox\"></div>\n</li>\n</ol>\n</li>\n<li>\n<p>基本图形：circle</p>\n<blockquote>\n<p>circle () : 定义一个圆 。</p>\n</blockquote>\n<ol>\n<li>\n<p>语法:  <code>circle( [ &lt;shape-radius&gt; ]? [ at &lt;position&gt; ]? )</code></p>\n</li>\n<li>\n<p>说明:  <code>circle()可以传人2个可选参数；</code></p>\n<ul>\n<li>圆的半径，默认元素宽高中短的那个为直径，支持百分比</li>\n<li>圆心位置，默认为元素中心点</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span>50% at 50% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><style>\n    .circlebox {\n      background: orange;\n      clip-path: circle(50% at 50% 50%);\n      -webkit-clip-path: circle(50% at 50% 50%);\n      height: 100px;\n      width: 100px;\n    }\n </style>\n <div class=\"circlebox\"></div> \n</li>\n</ol>\n</li>\n<li>\n<p>基本图形：ellipse</p>\n<blockquote>\n<p>ellipse () : 定义一个椭圆 。</p>\n</blockquote>\n<ol>\n<li>\n<p>语法:  <code>ellipse( [ &lt;shape-radius&gt;&#123;2&#125; ]? [ at &lt;position&gt; ]? )</code></p>\n</li>\n<li>\n<p>说明:  <code>ellipse()可以传人3个可选参数;</code></p>\n<ul>\n<li>椭圆的 X 轴半径，默认是宽度的一半，支持百分比</li>\n<li>椭圆的 Y 轴半径，默认是高度的一半，支持百分比</li>\n<li>椭圆中心位置，默认是元素的中心点</li>\n</ul>\n</li>\n<li>\n<p>示例</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>25% 40% at 50% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure> <style>\n   .ellipsebox {\n     background: orange;\n     clip-path: ellipse(25% 40% at 50% 50%);\n     -webkit-clip-path: ellipse(25% 40% at 50% 50%);\n     height: 100px;\n     width: 100px;\n   }\n </style>\n  <div class=\"ellipsebox\"></div> \n</li>\n</ol>\n</li>\n<li>\n<p>基本图形：polygon</p>\n<blockquote>\n<p>polygon () : 定义一个多边形 。</p>\n</blockquote>\n<ol>\n<li>\n<p>语法:  <code>polygon( &lt;fill-rule&gt;? , [ &lt;length-percentage&gt; &lt;length-percentage&gt; ]# )</code></p>\n</li>\n<li>\n<p>说明:  <code>&lt;fill-rule&gt;</code>  可选，表示填充规则用来确定该多边形的内部。可能的值有 nonzero 和 evenodd, 默认值是 nonzero 后面的每对参数表示多边形的顶点坐标（X,Y），也就是连接点</p>\n</li>\n<li>\n<p>示例</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0<span class=\"token punctuation\">,</span>100% 50%<span class=\"token punctuation\">,</span>0 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure> <style>\n   .polygonbox {\n     background: orange;\n     clip-path: polygon(50% 0,100% 50%,0 100%); \n     -webkit-clip-path: polygon(50% 0,100% 50%,0 100%); \n     height: 100px;\n     width: 100px;\n   }\n </style>\n  <div class=\"polygonbox\"></div>         \n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"多边形裁剪\"><a class=\"卓越科技-\" href=\"#多边形裁剪\">#</a> 多边形裁剪</h4>\n<ul>\n<li>\n<p>三角形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 0% 100%<span class=\"token punctuation\">,</span> 100% 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>菱形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 100% 50%<span class=\"token punctuation\">,</span> 50% 100%<span class=\"token punctuation\">,</span> 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>梯形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>20% 0%<span class=\"token punctuation\">,</span> 80% 0%<span class=\"token punctuation\">,</span> 100% 100%<span class=\"token punctuation\">,</span> 0% 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>平行四边形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>25% 0%<span class=\"token punctuation\">,</span> 100% 0%<span class=\"token punctuation\">,</span> 75% 100%<span class=\"token punctuation\">,</span> 0% 100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>五边形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 100% 38%<span class=\"token punctuation\">,</span> 82% 100%<span class=\"token punctuation\">,</span> 18% 100%<span class=\"token punctuation\">,</span> 0% 38%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>六边形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 100% 25%<span class=\"token punctuation\">,</span> 100% 75%<span class=\"token punctuation\">,</span> 50% 100%<span class=\"token punctuation\">,</span> 0% 75%<span class=\"token punctuation\">,</span> 0% 25%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>七边形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 90% 20%<span class=\"token punctuation\">,</span> 100% 60%<span class=\"token punctuation\">,</span> 75% 100%<span class=\"token punctuation\">,</span> 25% 100%<span class=\"token punctuation\">,</span> 0% 60%<span class=\"token punctuation\">,</span> 10% 20%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>八边形</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>30% 0%<span class=\"token punctuation\">,</span> 70% 0%<span class=\"token punctuation\">,</span> 100% 30%<span class=\"token punctuation\">,</span> 100% 70%<span class=\"token punctuation\">,</span> 70% 100%<span class=\"token punctuation\">,</span> 30% 100%<span class=\"token punctuation\">,</span> 0% 70%<span class=\"token punctuation\">,</span> 0% 30%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>特殊图形裁剪</p>\n</blockquote>\n<ul>\n<li>\n<p>斜角</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>20% 0%<span class=\"token punctuation\">,</span> 80% 0%<span class=\"token punctuation\">,</span> 100% 20%<span class=\"token punctuation\">,</span> 100% 80%<span class=\"token punctuation\">,</span> 80% 100%<span class=\"token punctuation\">,</span> 20% 100%<span class=\"token punctuation\">,</span> 0% 80%<span class=\"token punctuation\">,</span> 0% 20%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>槽口</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>0% 15%<span class=\"token punctuation\">,</span> 15% 15%<span class=\"token punctuation\">,</span> 15% 0%<span class=\"token punctuation\">,</span> 85% 0%<span class=\"token punctuation\">,</span> 85% 15%<span class=\"token punctuation\">,</span> 100% 15%<span class=\"token punctuation\">,</span> 100% 85%<span class=\"token punctuation\">,</span> 85% 85%<span class=\"token punctuation\">,</span> 85% 100%<span class=\"token punctuation\">,</span> 15% 100%<span class=\"token punctuation\">,</span> 15% 85%<span class=\"token punctuation\">,</span> 0% 85%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>左箭头</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>40% 0%<span class=\"token punctuation\">,</span> 40% 20%<span class=\"token punctuation\">,</span> 100% 20%<span class=\"token punctuation\">,</span> 100% 80%<span class=\"token punctuation\">,</span> 40% 80%<span class=\"token punctuation\">,</span> 40% 100%<span class=\"token punctuation\">,</span> 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>s</pre></td></tr></table></figure></li>\n<li>\n<p>右箭头</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>0% 20%<span class=\"token punctuation\">,</span> 60% 20%<span class=\"token punctuation\">,</span> 60% 0%<span class=\"token punctuation\">,</span> 100% 50%<span class=\"token punctuation\">,</span> 60% 100%<span class=\"token punctuation\">,</span> 60% 80%<span class=\"token punctuation\">,</span> 0% 80%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>星星</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>50% 0%<span class=\"token punctuation\">,</span> 61% 35%<span class=\"token punctuation\">,</span> 98% 35%<span class=\"token punctuation\">,</span> 68% 57%<span class=\"token punctuation\">,</span> 79% 91%<span class=\"token punctuation\">,</span> 50% 70%<span class=\"token punctuation\">,</span> 21% 91%<span class=\"token punctuation\">,</span> 32% 57%<span class=\"token punctuation\">,</span> 2% 35%<span class=\"token punctuation\">,</span> 39% 35%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>十字架</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>10% 25%<span class=\"token punctuation\">,</span> 35% 25%<span class=\"token punctuation\">,</span> 35% 0%<span class=\"token punctuation\">,</span> 65% 0%<span class=\"token punctuation\">,</span> 65% 25%<span class=\"token punctuation\">,</span> 90% 25%<span class=\"token punctuation\">,</span> 90% 50%<span class=\"token punctuation\">,</span> 65% 50%<span class=\"token punctuation\">,</span> 65% 100%<span class=\"token punctuation\">,</span> 35% 100%<span class=\"token punctuation\">,</span> 35% 50%<span class=\"token punctuation\">,</span> 10% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>叉号</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>20% 0%<span class=\"token punctuation\">,</span> 0% 20%<span class=\"token punctuation\">,</span> 30% 50%<span class=\"token punctuation\">,</span> 0% 80%<span class=\"token punctuation\">,</span> 20% 100%<span class=\"token punctuation\">,</span> 50% 70%<span class=\"token punctuation\">,</span> 80% 100%<span class=\"token punctuation\">,</span> 100% 80%<span class=\"token punctuation\">,</span> 70% 50%<span class=\"token punctuation\">,</span> 100% 20%<span class=\"token punctuation\">,</span> 80% 0%<span class=\"token punctuation\">,</span> 50% 30%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>对话框</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span>0% 0%<span class=\"token punctuation\">,</span> 100% 0%<span class=\"token punctuation\">,</span> 100% 75%<span class=\"token punctuation\">,</span> 75% 75%<span class=\"token punctuation\">,</span> 75% 100%<span class=\"token punctuation\">,</span> 50% 75%<span class=\"token punctuation\">,</span> 0% 75%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2d3d效果\"><a class=\"卓越科技-\" href=\"#2d3d效果\">#</a> 2D/3D 效果</h3>\n<blockquote>\n<p>3D: 近大远小</p>\n</blockquote>\n<h4 id=\"web坐标轴\"><a class=\"卓越科技-\" href=\"#web坐标轴\">#</a> web 坐标轴</h4>\n<blockquote>\n<p>左右是 x 轴负、正方向<br />\n上下是 y 轴负、正方向<br />\n朝外朝内是 z 轴正负方向</p>\n</blockquote>\n<p><code>transform-style</code> : 指定嵌套元素如何在 3d 空间中呈现 (写给父级，作用于子元素)<br />\n 属性值:</p>\n<ul>\n<li>\n<p>flat (默认值): 所有子元素在 2D 平面呈现</p>\n</li>\n<li>\n<p>preserve-3d: 表示所有子元素在 3D 空间中呈现</p>\n</li>\n</ul>\n<h4 id=\"过渡效果\"><a class=\"卓越科技-\" href=\"#过渡效果\">#</a> 过渡效果</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 变化的属性 过渡时间 时间曲线 开始时间</pre></td></tr></table></figure><ul>\n<li>\n<p>变化的属性：所有属性过渡效果一样时可以用 all 代表，不相同则需逗号隔开重写</p>\n</li>\n<li>\n<p>过渡时间: s 为单位，必须写，包括 0</p>\n</li>\n<li>\n<p>时间曲线:  <code>linear 匀速</code>   <code>ease 变慢</code>   <code>ease-in 加速</code>   <code>ease-out 减速</code>   <code>ease-in-out 先加速后减速</code></p>\n</li>\n<li>\n<p>开始时间: s 为单位，必写</p>\n</li>\n<li>\n<p>transition 要写在变化的元素内而不是元素的 hover 内</p>\n</li>\n</ul>\n<h4 id=\"移动\"><a class=\"卓越科技-\" href=\"#移动\">#</a> 移动</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>xxpx xxpx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> 第一个为x轴方向移动距离<span class=\"token punctuation\">,</span>第2个为y轴方向移动距离</pre></td></tr></table></figure><p><code>盒子居中新方法</code> : left、top (浏览器一般长度) 然后 transform: translate (- 盒子一半宽度，- 盒子一半长度)  <code>transform: translate(-50%,-50%);</code></p>\n<p>注意：</p>\n<ul>\n<li>\n<p>translate 如果用百分比则是以元素本身长宽为基准</p>\n</li>\n<li>\n<p>translate  <code>对于行内元素是无效的</code></p>\n</li>\n<li>\n<p>translate 先移动、后翻转效果更好</p>\n</li>\n</ul>\n<hr/>\n<ul>\n<li>\n<p>translateX: 沿 x 轴移动</p>\n</li>\n<li>\n<p>translateY: 沿 y 轴移动</p>\n</li>\n<li>\n<p>translateZ: 沿 Z 轴移动 (一般用 px 单位)</p>\n</li>\n<li>\n<p>translate3d (x 方向的偏移，y 方向的偏移，z 方向的偏移)</p>\n</li>\n</ul>\n<h4 id=\"缩放\"><a class=\"卓越科技-\" href=\"#缩放\">#</a> 缩放</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>任何正整数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    0-0.99是缩小 大于1是放大倍数、放大1倍</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>任何正整数<span class=\"token punctuation\">,</span>任何正整数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  0-0.99是缩小 大于1是放大倍数、放大1倍</pre></td></tr></table></figure><ul>\n<li>\n<p>scale 缩放最大的优势：可以设置转换中心点缩放的，而且不影响其他盒子</p>\n</li>\n<li>\n<p>scale3d (x 方向的缩放，y 方向的缩放，z 方向的缩放)</p>\n</li>\n</ul>\n<h4 id=\"旋转\"><a class=\"卓越科技-\" href=\"#旋转\">#</a> 旋转</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>xxdeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> deg是度数单位</pre></td></tr></table></figure><ul>\n<li>\n<p>rotateX: 绕 x 轴旋转</p>\n</li>\n<li>\n<p>rotateY: 绕 y 轴旋转</p>\n</li>\n<li>\n<p>rotateZ: 绕 z 轴旋转</p>\n</li>\n<li>\n<p>rotate3d (x 方向向量，y 方向向量，z 方向向量，旋转角度)  xyz 代表旋转轴矢量 rotate3d (1,0,0,45deg);</p>\n</li>\n</ul>\n<p>改变旋转中心:</p>\n<ul>\n<li>transform-origin: xxpx xxpx 或者 方位词 方位词；(ps: 方位词 - top right bottom left) (写在 <code>变化元素标签</code> 内，而不是动作内)</li>\n</ul>\n<h4 id=\"倾斜\"><a class=\"卓越科技-\" href=\"#倾斜\">#</a> 倾斜</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>xxdeg xxdeg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>属性:</p>\n<ul>\n<li>\n<p>第一个为 x 轴方向倾斜，正值向右负值向左</p>\n</li>\n<li>\n<p>第二个为 y 轴倾斜方向，正值向上负值向下</p>\n</li>\n</ul>\n<h4 id=\"透视\"><a class=\"卓越科技-\" href=\"#透视\">#</a> 透视</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> xxpx<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>perspective 写在被观察元素的父盒子上</code></p>\n</li>\n<li>\n<p>perspective 代表着观察者眼睛到屏幕的距离，赋予 3d 效果</p>\n</li>\n<li>\n<p><code>数值越小透视效果越好</code>   <code>数值越大透视效果越差</code>  值越小元素越大</p>\n</li>\n<li>\n<p>perspective-origin: xxpx  xxpx; 设置观察的角度</p>\n</li>\n</ul>\n<h3 id=\"动画\"><a class=\"卓越科技-\" href=\"#动画\">#</a> 动画</h3>\n<h4 id=\"引用动画\"><a class=\"卓越科技-\" href=\"#引用动画\">#</a> 引用动画</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> 动画名称<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> 持续时间<span class=\"token punctuation\">(</span>duration<span class=\"token punctuation\">)</span> 运动曲线<span class=\"token punctuation\">(</span>timing-function<span class=\"token punctuation\">)</span> 何时开始<span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span> 播放次数<span class=\"token punctuation\">(</span>iteration-count<span class=\"token punctuation\">)</span> 是否反向<span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span> 动画起始或者结束的状态<span class=\"token punctuation\">(</span>fill-mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>动画名称(name) 持续时间(duration) 必须写</code></li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200514100150.png\" alt=\"\" /></p>\n<p><code>animation-fill-mode: 设置动画结束的状态</code></p>\n<p>属性值:</p>\n<ul>\n<li>forward: 动画结束时保持状态 backward 动画结束时不保持状态，在设置了动画延时的前提下，如果动画有初始状态，那么会立刻进行到初始状态</li>\n<li>both: 会保留动画结束的初始状态，在设置了动画延时的前提下，如果动画有初始状态，那么会立刻进行到初始状态</li>\n</ul>\n<p><code>animation-play-state: running(paused)设置动画播放状态</code>   <code>[上面图片中的写错了、是running和paused]</code></p>\n<ul>\n<li>动画持续时间还有个属性值为 steps (n) 就是将动画分为 n 步执行</li>\n<li>布局时为了防止浏览器缩小时两个元素重叠，可以将两个元素先定位到相反的位置，然后再用 translate 移动到目的位置</li>\n<li>实现打字动画效果，可以先将完整文字图片的宽度改为 0，再利用 transform 将宽度改回来，并用 steps 分步执行</li>\n<li>如果需要添加多个动画，用 <code>逗号隔开</code>   <code>animation: move 0.5s,fly 0.5s</code></li>\n</ul>\n<p><code>transition-timing-function</code> : 属性规定过渡效果的速度曲线。</p>\n<table>\n<thead>\n<tr>\n<th>linear</th>\n<th>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier (0,0,1,1)）。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ease</td>\n<td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier (0.25,0.1,0.25,1)）。</td>\n</tr>\n<tr>\n<td>ease-in</td>\n<td>规定以慢速开始的过渡效果（等于 cubic-bezier (0.42,0,1,1)）。</td>\n</tr>\n<tr>\n<td>ease-out</td>\n<td>规定以慢速结束的过渡效果（等于 cubic-bezier (0,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td>ease-in-out</td>\n<td>规定以慢速开始和结束的过渡效果（等于 cubic-bezier (0.42,0,0.58,1)）。</td>\n</tr>\n<tr>\n<td>cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td>\n<td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"定义动画\"><a class=\"卓越科技-\" href=\"#定义动画\">#</a> 定义动画</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> 动画名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">from</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">或者</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">百分数</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">百分数</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\">百分数</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>from to 等同于 0% 100%</p>\n</li>\n<li>\n<p>时间曲线同 transition</p>\n</li>\n<li>\n<p>播放次数: <code>infinite 无限次播放</code></p>\n</li>\n</ul>\n<p>方向:</p>\n<ul>\n<li><code>normal</code>  正常方向</li>\n<li><code>reverse</code>  反方向</li>\n<li><code>alternate</code>  先正常后反方向，不断交替</li>\n<li><code>alternate-reverse</code> :  先反方向再正常，不断交替</li>\n</ul>\n<h3 id=\"多列布局\"><a class=\"卓越科技-\" href=\"#多列布局\">#</a> 多列布局</h3>\n<ul>\n<li>\n<p>column-count: 设置分成的列数</p>\n</li>\n<li>\n<p>column-rule: 宽度 线条样式 颜色；设置列之间的样式</p>\n</li>\n<li>\n<p>column-gap: xxpx;  设置列之间的距离</p>\n</li>\n<li>\n<p>column-width: 设置每一列的宽度  如果设置宽度比当前列数所默认的宽度小，则不改变，如果比较大，则取其值并铺满整个浏览器；</p>\n</li>\n<li>\n<p>column-span: 设置某个元素跨越的列数，只有 1 和 all 两个选项；</p>\n</li>\n</ul>\n<h3 id=\"bfc块级格式化上下文\"><a class=\"卓越科技-\" href=\"#bfc块级格式化上下文\">#</a> BFC (块级格式化上下文)</h3>\n<blockquote>\n<p>是一个独立的渲染区域，只有 Block-Level Box  参与，它规定了内部的 Block-Level Box 如何布局，并且与这个区域外部毫不相干</p>\n</blockquote>\n<p>具有 BFC 条件的元素模式: block、list-item、table</p>\n<p>触发 BFC 的属性:</p>\n<ul>\n<li>float 属性不为 none</li>\n<li>position 为 absolute 或 fixed</li>\n<li>display 为 inline-block、table-cell、table-caption、flex、inline-flex</li>\n<li>overflow 不为 visible</li>\n</ul>\n<h4 id=\"bfc特性\"><a class=\"卓越科技-\" href=\"#bfc特性\">#</a> BFC 特性</h4>\n<ul>\n<li>BFC 中，盒子从顶端垂直的一个接一个排列</li>\n<li>属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠</li>\n<li>BFC 中，每一个盒子的左外边缘会触碰到容器的左边缘</li>\n<li>BFC 的区域不会与浮动盒子产生交集，而是紧贴浮动边缘 (用于产生浮动盒子旁边的自适应盒子)</li>\n<li>计算 BFC 的高度时，自然也会检测浮动的盒子高度 (用于清除浮动)</li>\n</ul>\n<h4 id=\"作用\"><a class=\"卓越科技-\" href=\"#作用\">#</a> 作用</h4>\n<ul>\n<li>\n<p>清除浮动<br />\n给父盒子激活 BFC 就可以</p>\n</li>\n<li>\n<p>解决外边距合并<br />\n用另一个 BFC 盒子将两个盒子中的一个包起来，即可解决</p>\n</li>\n<li>\n<p>产生浮动盒子旁的自适应盒子<br />\n将新盒子激活 BFC，就不会跑到浮动盒子下面，而是与其紧贴</p>\n</li>\n</ul>\n<h3 id=\"渐进增强\"><a class=\"卓越科技-\" href=\"#渐进增强\">#</a> 渐进增强</h3>\n<blockquote>\n<p>构建网站时先满足低版本再考虑高版本</p>\n</blockquote>\n<h3 id=\"优雅降级-与上者相反\"><a class=\"卓越科技-\" href=\"#优雅降级-与上者相反\">#</a> 优雅降级：与上者相反</h3>\n<h3 id=\"浏览器前缀\"><a class=\"卓越科技-\" href=\"#浏览器前缀\">#</a> 浏览器前缀</h3>\n<ul>\n<li>\n<p>-webkit-: chrome ，safari，android，browser</p>\n</li>\n<li>\n<p>-moz-: firefox</p>\n</li>\n<li>\n<p>-o-: opera</p>\n</li>\n<li>\n<p>-ms-: ie，edge</p>\n</li>\n<li>\n<p>-khtml-: konqueror</p>\n</li>\n</ul>\n<h3 id=\"背景颜色渐变\"><a class=\"卓越科技-\" href=\"#背景颜色渐变\">#</a> 背景颜色渐变</h3>\n<blockquote>\n<p>因为兼容性问题严重，所以需要加浏览器前缀</p>\n</blockquote>\n<p>线性渐变:</p>\n<ul>\n<li>\n<p>background:  <code>-浏览器前缀-linear-gradient(渐变起始位置， 起始颜色， 结束颜色);</code></p>\n</li>\n<li>\n<p>background:  <code>-浏览器前缀-linear-gradient(渐变起始位置， 起始颜色 百分比， 结束颜色 百分比);用渐变起始位置就需要加浏览器前缀</code></p>\n</li>\n<li>\n<p>background:  <code>linear-gradient(point/angle,颜色 位置，颜色 位置 颜色 位置....)</code></p>\n</li>\n<li>\n<p>point:  <code>to left(从右到左),to right,to top,to bottom(默认值)</code></p>\n</li>\n<li>\n<p>angle:  <code>对应上面为270deg，90deg，0deg，180deg</code></p>\n</li>\n<li>\n<p>用  <code>point/angle</code>  就不用加浏览器前缀</p>\n</li>\n</ul>\n<p>径向渐变</p>\n<ul>\n<li>\n<p>background:  <code>radial-gradient(形状 大小 发散位置，颜色 位置，颜色 位置，颜色 位置，。。。);</code></p>\n</li>\n<li>\n<p>形状:  <code>默认为ellipse(即自动适配当前形状)，circle(圆形)</code></p>\n</li>\n<li>\n<p>大小:  <code>closest-corner、closest-side、farthest-corner、farthest-side</code></p>\n</li>\n<li>\n<p>发散位置:  <code>at xxpx xxpx 或 at 方位词 方位词(默认在正中心)</code></p>\n</li>\n</ul>\n<p>重复渐变</p>\n<ul>\n<li>repeating-radial(linear)-gradient:  <code>属性值同上</code></li>\n</ul>\n<h3 id=\"三大标签优化\"><a class=\"卓越科技-\" href=\"#三大标签优化\">#</a> 三大标签优化</h3>\n<h4 id=\"title\"><a class=\"卓越科技-\" href=\"#title\">#</a> Title</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>长度: google (35 中文) baidu (28 个中文)</p>\n<p>最先出现的词语的权重越高</p>\n<p>建议：首页标题：网站名 (产品名)- 网站的介绍</p>\n<h4 id=\"description\"><a class=\"卓越科技-\" href=\"#description\">#</a> Description</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>内容<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>搜索结构的部分摘要，即简要说明我们的网站是做什么的</p>\n<p>注意：不要超过 120 个汉字，用英文逗号</p>\n<h4 id=\"keyword\"><a class=\"卓越科技-\" href=\"#keyword\">#</a> Keyword</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keyword<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>内容<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>页面关键词，搜索引擎关注点之一，限制在 6-8 个关键词左右</p>\n<h3 id=\"移动端\"><a class=\"卓越科技-\" href=\"#移动端\">#</a> 移动端</h3>\n<p>国内大部分浏览器内核都是根据 Webkit 修改过来的内核</p>\n<p>总结：兼容移动主流浏览器，处理 webkit 内核浏览器即可</p>\n<h4 id=\"视口\"><a class=\"卓越科技-\" href=\"#视口\">#</a> 视口</h4>\n<ol>\n<li>\n<p>布局视口 (layout viewport)</p>\n<p>一般浏览器都默认设置了一个布局视口，用于解决早期的 PC 端页面在手机上显示的问题</p>\n<p>一般为 980px  <code>document.documentElement.clientWidth</code></p>\n</li>\n<li>\n<p>视觉视口</p>\n</li>\n</ol>\n<p>​\t用户正在看到的网站的区域</p>\n<ol start=\"3\">\n<li>\n<p>理想视口</p>\n<p>设备有多宽，屏幕就有多宽</p>\n<p><code>meta</code>  视口标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0,user-scalable=no,maximum-scale=1.0,minimum-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>分别代表  <code>宽度</code> 、 <code>初始缩放比</code> 、 <code>用户是否可以缩放</code> 、 <code>最大缩放</code> 、 <code>最小缩放</code></p>\n</li>\n</ol>\n<h4 id=\"物理像素物理像素比\"><a class=\"卓越科技-\" href=\"#物理像素物理像素比\">#</a> 物理像素 &amp; 物理像素比</h4>\n<blockquote>\n<p>物理像素点：指的是屏幕显示的最小颗粒，是物理真实存在的</p>\n</blockquote>\n<p>注意:</p>\n<ul>\n<li>\n<p>开发时写的 1px 不一定等于 1 个物理像素</p>\n</li>\n<li>\n<p>pc 端: 1px = 1 物理像素</p>\n</li>\n<li>\n<p>移动端 1px = 1、2、3 物理像素等等 (2 最常见)</p>\n</li>\n<li>\n<p>物理像素比:  px 能显示的物理像素点的个数</p>\n</li>\n<li>\n<p>pc 和移动端中，1px 的大小都是一样的，但是 1px 包含的像素点不同，pc 中图片是满足 pc 的，但到了移动端后增在物理像素点层面上扩大了两倍，导致模糊，所以只有选择 pc 端上放大两倍的图片，并设置高宽确保大小一致，物理像素点层面上扩大两倍仍是 pc 端原图大小，不会变模糊。</p>\n</li>\n</ul>\n<h4 id=\"二倍图\"><a class=\"卓越科技-\" href=\"#二倍图\">#</a> 二倍图</h4>\n<p>对于  <code>50px*50px</code>  的图片，在手机屏打开会被放大，导致模糊</p>\n<p>所以可以用 <code>100px*100px</code>  的图片，然后大小改为  <code>50*50</code>  即可</p>\n<p>即在将图片在所需要的大小基础放大两倍并在属性设置中将大小设置为目标大小</p>\n<h4 id=\"方案\"><a class=\"卓越科技-\" href=\"#方案\">#</a> 方案</h4>\n<h5 id=\"移动端开发主流方案\"><a class=\"卓越科技-\" href=\"#移动端开发主流方案\">#</a> 移动端开发主流方案</h5>\n<ol>\n<li>\n<p>单独制作移动端页面 (主流，包括流式布局、flex 弹性布局、less + rem + 媒体查询布局、混合布局)</p>\n</li>\n<li>\n<p>响应式页面 (只制作一个页面，根据设备不同自适应，包括媒体响应和 bootstrap)</p>\n</li>\n</ol>\n<h5 id=\"移动端技术解决方案\"><a class=\"卓越科技-\" href=\"#移动端技术解决方案\">#</a> 移动端技术解决方案</h5>\n<p>浏览器私有前缀只需要考虑添加 webkit，因为移动端浏览器以 webkit 为主，对 h5 和 css3 支持性好</p>\n<p>CSS 初始化选择  <code>normalize.css</code></p>\n<p>pc 端如果需要完全兼容，就用传统 CSS 盒模型 (content-box)</p>\n<p>如果不考虑，则用 CSS3 盒子模型 (border-box)</p>\n<p>特殊样式:</p>\n<ul>\n<li>\n<p><code>-webkit-box-sizing: border-box</code></p>\n</li>\n<li>\n<p><code>-webkit-tap-highlight-color: transparent; </code>    取消点击链接时的背景色</p>\n</li>\n<li>\n<p><code>-webkit-appearance: none; </code>   ios 中取消样式后才能对按钮和输入框的样式进行设置</p>\n</li>\n<li>\n<p><code>-webkit-touch-callout: none;</code>       取消长按链接或图片时出现的菜单列表</p>\n</li>\n</ul>\n<h4 id=\"流式布局百分比布局\"><a class=\"卓越科技-\" href=\"#流式布局百分比布局\">#</a> 流式布局 (百分比布局)</h4>\n<p>移动端一般采用流式布局 (百分比布局)</p>\n<ol>\n<li>\n<p>高度定死，宽度自适应</p>\n</li>\n<li>\n<p>对于大的轮播图等，宽度 100% 自适应</p>\n</li>\n<li>\n<p>对于小图标挥着文本，一般都是固定宽高大小</p>\n</li>\n</ol>\n<p>流式布局的缺点：对于大屏幕来说，用户体验并不是特别好，有些布局元素会显得很长</p>\n<p>使用： 即将盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不收固定像素的限制，内容向两侧填充</p>\n<p>重点：应设置  <code>max-width(max-height)</code> 、 <code>min-width(min-height)</code>  两个属性</p>\n<h4 id=\"rem布局\"><a class=\"卓越科技-\" href=\"#rem布局\">#</a> rem 布局</h4>\n<p><code>em</code> : 相对于父元素字体大小倍数的单位</p>\n<p>例:</p>\n<pre><code>div &#123;\n  font-size: 50px;\n&#125;\na &#123;\n  font-size: 2em\n&#125;    \n/*\n若div字体大小为50px   \na字体大小设置为2em则a字体大小为100px\n*/\n</code></pre>\n<p><code>rem</code> : 相对于 html 元素 (根元素) 的字体大小倍数的单位</p>\n<p>例:</p>\n<pre><code>html 字体大小为 50px \n其子元素div字体大小为 2rem \n则div字体大小为 100px\n</code></pre>\n<p><code>vw / vh</code> : 把屏幕分为 100 份，1vw 等于屏幕宽的 1%</p>\n<hr/>\n<p>注意：要给 body 重置一下 <code>font-size: 16px;</code></p>\n<p>rem 布局的本质是等比缩放</p>\n<h4 id=\"less\"><a class=\"卓越科技-\" href=\"#less\">#</a> less</h4>\n<blockquote>\n<p>css 弊端: 1. 冗余度高 2. 维护成本高 3. 没有很好的计算能力</p>\n</blockquote>\n<p>less: 是一门 css 扩展语言，也成为 css 预处理器</p>\n<p>引入了变量，mixin (混入)、运算以及函数等功能</p>\n<ul>\n<li>\n<p>less 变量定义:  <code>@变量名: 值；</code>  值可以是任意 css 属性值，如：尺寸大小 <code>@num: 100px</code></p>\n<p>注意:</p>\n<ol>\n<li>大小写区分</li>\n<li>不能以数字开头</li>\n<li>不能有特殊符号</li>\n</ol>\n</li>\n<li>\n<p>less 变量引用，直接 <code>@变量名</code> 即可</p>\n</li>\n<li>\n<p>less 嵌套</p>\n<p>子元素样式直接写到父元素嵌套里</p>\n<p>如果是伪类、交集选择器、伪元素选择器等父元素子元素之间有特殊符号的，则需要加上 <code>&amp;</code></p>\n<p>例</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">a</span><span class=\"token punctuation\">&#123;</span>xxxx<span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* 代表 div a &#123;&#125;;*/</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">&amp;hover</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">/* 代表 div:hover*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>less 运算</p>\n<p>less 可以使用 <code>+ -  * /</code>  运算符号</p>\n<p><code>~</code>  可以避免编译</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> ~<span class=\"token string\">'calc(300px -30px)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>300px -30px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>颜色大小都可以运算  <code>#010203 *2 结果为 #020406</code></p>\n<p>运算符左右必须空格隔开</p>\n<p><code>两个数参与运算，只有一个有单位，则结果单位与其相同</code></p>\n<p><code>两个数参与运算，量个数都有单位且不一样，则结果与第一个数的单位相同</code></p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\">@num<span class=\"token punctuation\">:</span> 100px</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10em <span class=\"token operator\">+</span> <span class=\"token variable\">@num</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果为：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 110em </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注: less 中可以用 @import 引入其他 less 文件 如  <code>@import:url(xxxx.less);</code></p>\n</li>\n<li>\n<p>函数</p>\n<p><code>round() 四舍五入</code>   <code>例: round(3.52px) 为 4px</code></p>\n<p><code>percentage() 百分比</code>   <code>例 percentage(0.2) 为 20%</code></p>\n<p><code>sqrt() 开平方</code></p>\n<p>简单的自定义函数</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\">@function sun<span class=\"token punctuation\">(</span>$n,$m<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">@return</span> $n <span class=\"token operator\">+</span> $m</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>混入</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.show</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token mixin-usage function\">.show</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*np</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.show &#123; display:block; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.box &#123; width: 100px; display:block; &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.show1()</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token selector\">.box1</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token mixin-usage function\">.show1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.box1 &#123; width: 100px; display:block; &#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">.show2(<span class=\"token variable\">@color</span>)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">;</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@color</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token selector\">.box2</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span> <span class=\"token mixin-usage function\">.show1</span><span class=\"token punctuation\">(</span>blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.box2 &#123; width: 100px; display:block; color:blue &#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>命名空间</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#nm()</span><span class=\"token punctuation\">&#123;</span> <span class=\"token selector\">.show</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token operator\">-</span>block<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.box3</span><span class=\"token punctuation\">&#123;</span> #nm.show <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.box3&#123; display: inline-block; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>继承</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.line</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.box4</span><span class=\"token punctuation\">&#123;</span> &amp;<span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>.line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">.box5</span><span class=\"token punctuation\">&#123;</span> &amp;<span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>.line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.line</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.bo4</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.box5&#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  display: inline;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>合并</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box6</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">background+</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./1.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">background+</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./2.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">transform+_</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">transform+_</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.box6&#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   background: url(./1.png),url(./1.png);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   transform: scale(1) rotate(30deg);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>媒体查询</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box7</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token atrule\">@media all and <span class=\"token punctuation\">(</span> min-width<span class=\"token punctuation\">:</span> 768px <span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@media all and ( min-width: 768px )&#123;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    .box7&#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      width: 600px;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &#125;  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n<li>\n<p>循环</p>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">@cout<span class=\"token punctuation\">:</span></span> 5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token selector\">.get(<span class=\"token variable\">@cn</span>) when (<span class=\"token variable\">@cn</span> > 4)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px <span class=\"token operator\">+</span> <span class=\"token variable\">@cn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">.box8</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token mixin-usage function\">.get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.box8&#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  width: 105px;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"rem适配方案目的\"><a class=\"卓越科技-\" href=\"#rem适配方案目的\">#</a> rem 适配方案 (目的)</h4>\n<blockquote>\n<p>让一些不能等比自适应的元素，达到当设备尺寸发生改变时，等比例适配当前设备</p>\n</blockquote>\n<p><code>js方法动态修改</code></p>\n<p>我们以 iphone6 的宽度 375 为原型</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fontsize <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> <span class=\"token number\">3.75</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> fontsize <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一个快速 px 转换 rem 插件 VSCODE 中搜索  <code>px to rem</code>  右键配置、设置 1rem 等于多少 px、css 中通过 <code>ALt+z</code>  进行转换</p>\n<p><code>rem适配方案原理</code></p>\n<p>使用媒体查询根据不同设备按比例设置 html 的字体大小，然后页面元素使用 rem 做尺寸单位，当 html 字体大小变化元素尺寸也会发生变化，从而达到等比例缩放的适配</p>\n<p><code>实际开发适配方案步骤</code></p>\n<p>先利用媒体查询，按照初始设计稿的宽度与 html 字体大小的比例，动态的根据当前的尺寸设置 html 的字体大小。然后在 css 中，元素的长宽位置等取值按同等比例换算为 rem 单位的值</p>\n<p><code>rem适配方案技术使用(市场主流)</code></p>\n<p>技术方案 1:</p>\n<ul>\n<li>\n<p>利用 less 和媒体查询和 rem</p>\n</li>\n<li>\n<p>先用 less 写媒体查询，设置各种屏幕尺寸下的 html 为大小。然后再写样式 less ，样式中的元素一般以 750/10 或 750/15 为准</p>\n</li>\n</ul>\n<p>技术方案 2:</p>\n<ul>\n<li>\n<p>flexible.js 和 rem (利用 flexible.js 省略了媒体查询的步骤)</p>\n</li>\n<li>\n<p>不用写媒体查询，直接引入 flexible.js，里面直接划分 10 份。注意在具体样式文件中补充媒体查询设置屏幕宽度大于 750 时 html 文字大小按 750 处理</p>\n</li>\n<li>\n<p>常见屏幕尺寸</p>\n</li>\n</ul>\n<p><code>320px</code>   <code>360px</code>   <code>375px</code>   <code>384px</code>   <code>400px</code>   <code>414px</code>   <code>424px</code>   <code>480px</code>   <code>540px</code>   <code>720px</code>   <code>750px</code></p>\n<h4 id=\"flex布局\"><a class=\"卓越科技-\" href=\"#flex布局\">#</a> flex 布局</h4>\n<blockquote>\n<p>父盒子设置 flex 后，子元素的 <code>float</code> ， <code>clear</code> ， <code>vertical-align</code>  失效</p>\n</blockquote>\n<p>采用 flex 的元素，称为 flex 容器，其子元素称为 flex 项目</p>\n<ul>\n<li>\n<p>父盒子先设置  <code>display: flex</code></p>\n</li>\n<li>\n<p>子盒子再设置 flex: 所占份数 (没有单位) 默认为 0  可以写百分比 (相对于父盒子)</p>\n<p><code>当某一子盒子设置宽度后则无法进行缩放，其余盒子的缩放是在该盒子之外的区域划分</code></p>\n</li>\n<li>\n<p>flex-direction: column (垂直方向) row (水平方向，默认) column-reverse  row-reverse</p>\n</li>\n<li>\n<p>justify-content: 调整主轴 ( <code>即flex-direction设置的方向</code> ) 对齐</p>\n<p>属性值:</p>\n<ol>\n<li><code>flex-start</code> : 子元素从父元素开头排列</li>\n<li><code>flex-end</code> : 子元素从容器尾部开始排列</li>\n<li><code>center</code> : 子元素在父容器中间显示</li>\n<li><code>space-between</code> : 盒子之间加间距</li>\n<li><code>space-around</code> : 盒子添加左右间距</li>\n</ol>\n</li>\n<li>\n<p><code>align-items</code> : 调整侧轴方向的对齐方式 (即非 flex-direction 设置的方向)</p>\n<p>属性值</p>\n<ol>\n<li><code>center</code> : 垂直居中</li>\n<li><code>flex-start</code> : 顶部对齐</li>\n<li><code>flex-end</code> : 底部对齐</li>\n<li><code>stretch</code> : 拉伸使其高度与父盒子相同</li>\n</ol>\n</li>\n<li>\n<p><code>align-self</code> : 调整单个元素在侧轴方向上的对齐方式</p>\n</li>\n<li>\n<p><code>align-content</code> : 设置多行盒子垂直部分 (单行下没有效果，多了 space 两个属性)</p>\n<p>必须先写 <code>flex-flow: row wrap;</code></p>\n<p>属性值:</p>\n<ol>\n<li>\n<p><code>center</code> : 垂直居中</p>\n</li>\n<li>\n<p><code>flex-start</code> : 顶部对齐</p>\n</li>\n<li>\n<p><code>flex-end</code> : 底部对齐</p>\n</li>\n<li>\n<p><code>space-around</code> : 盒子添加左右间距</p>\n</li>\n<li>\n<p><code>space-between</code> : 盒子之间加间距</p>\n</li>\n<li>\n<p><code>stretch</code> : 拉伸使其高度与父盒子相同</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>flex-wrap</code> : 设置多出的盒子显示方式</p>\n<p>属性值:</p>\n<ol>\n<li>\n<p><code>wrap</code> : 换行显示</p>\n</li>\n<li>\n<p><code>nowrap</code> : 不换行压缩显示 (默认)</p>\n</li>\n<li>\n<p><code>wap-reverse</code> : 反向换行显示</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>flex-flow flex-dircetion</code>  和  <code>flex-wrap</code>  的简写</p>\n<p><code>flex-flow: flex-direction   flex-wrap</code></p>\n</li>\n<li>\n<p><code>flex-grow</code> : 设置多余空间的分配比例 默认值为 1</p>\n</li>\n<li>\n<p><code>flex-shrink</code> : 设置缺乏的空间的分配比例，即减去按比例分配缺少的空间的数值。默认值为 0；</p>\n</li>\n<li>\n<p>order 属性  用来控制子项目的排列顺序，数字越小拍的越前越大拍得越后，可以用负整数</p>\n<p>order: 整数</p>\n</li>\n<li>\n<p>常见 flex 布局思路</p>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/20200502203818.png\" alt=\"\" /></p>\n<h4 id=\"响应式布局\"><a class=\"卓越科技-\" href=\"#响应式布局\">#</a> 响应式布局</h4>\n<h5 id=\"媒体查询media-query\"><a class=\"卓越科技-\" href=\"#媒体查询media-query\">#</a> 媒体查询 (media query)</h5>\n<p>利用媒体查询，即 media queries , 可以针对不同的媒体类型定义不同的样式，从而实现响应式布局</p>\n<p><code>媒体类型</code></p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>all</code></td>\n<td>用于所有设备。</td>\n</tr>\n<tr>\n<td><code>print</code></td>\n<td>用于打印机和打印预览。</td>\n</tr>\n<tr>\n<td><code>screen</code></td>\n<td>用于电脑屏幕，平板电脑，智能手机等。</td>\n</tr>\n<tr>\n<td><code>speech</code></td>\n<td>应用于屏幕阅读器等发声设备。</td>\n</tr>\n</tbody>\n</table>\n<p>利用  <code>@media</code>  查询，可以针对不同的媒体类型定义不同的样式</p>\n<p><code>@media</code>  可以针对不同的屏幕尺寸设置不同的样式</p>\n<p>语法:</p>\n<p><code>@media mediatype and|only|not (media feature) &#123;css-code;&#125;</code></p>\n<p>注意:</p>\n<ol>\n<li>\n<p><code>@media</code>  开头不可或缺</p>\n</li>\n<li>\n<p>media feature 媒体特性 必须有小括号包含</p>\n</li>\n</ol>\n<ul>\n<li>\n<p><code>mediatype查询类型</code> ：将不同的终端设备划分不同的类型，称为媒体类型，包括:</p>\n<p><code>all 用于所有设备</code></p>\n<p><code>print 用于打印架和打印预览</code></p>\n<p><code>screen 用于电脑屏幕、平板电脑、智能手机等(最常用)</code></p>\n</li>\n<li>\n<p>关键字：将媒体类型或多个媒体类型特性连接到一起作为媒体查询的条件</p>\n<p><code>and</code> : 连接多个媒体特性</p>\n<p><code>not</code> : 排除某个媒体特性</p>\n<p><code>only</code> : 指定某个特定的媒体类型</p>\n</li>\n<li>\n<p>媒体特性：根据不同媒体类型的媒体特性来展示不同的风格</p>\n<p><code>width</code> : 当指定 mediatype 宽度为某个值时，css-code 样式起效</p>\n<p><code>max-width</code> : 当指定 mediatype 宽度小于这个值时，css-code 样式起效</p>\n<p><code>min-width</code> : 但指定 mediatype 宽度大于这个值时，样式起效</p>\n</li>\n<li>\n<p>利用 rem + 媒体查询 来实现元素样式动态变化</p>\n<p>即利用媒体查询设置 html 字体大小随浏览器宽度变化，再在具体元素样式中设置样式宽高度为 xxrem，即可实现元素样式动态变化</p>\n</li>\n<li>\n<p>引入资源</p>\n<p>即利用媒体查询 在 link 中判断设备的尺寸，然后引用不同的 css 文件</p>\n<p>语法规范:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;link=\"stylesheet\" media=\"media type and|not|only (media features)\" href=\"xx.css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>例如：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;link=\"stylesheet\" media=\"all and (min-width: 768px)\" href=\"xx.css\"></pre></td></tr></table></figure><p>注意不需要 @media</p>\n</li>\n</ul>\n<blockquote>\n<p>利用媒体查询针对不同宽度的设备进行布局和样式的设置，从而设配不同设备的目的</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>设备划分</th>\n<th>尺寸区间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>超小屏幕 (手机)</td>\n<td><code>&lt; 768px</code></td>\n</tr>\n<tr>\n<td>小屏设备 (平板)</td>\n<td><code>&gt;= 768px ~ &lt; 992px</code></td>\n</tr>\n<tr>\n<td>中等屏幕 (桌面显示器)</td>\n<td><code>&gt;= 992px ~ &lt; 1200px</code></td>\n</tr>\n<tr>\n<td>宽屏设备 (大桌面显示器)</td>\n<td><code>&gt;= 1200px</code></td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"响应式布局容器\"><a class=\"卓越科技-\" href=\"#响应式布局容器\">#</a> 响应式布局容器</h5>\n<blockquote>\n<p>响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果</p>\n</blockquote>\n<p>原理：不同屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化</p>\n<p>平时我们的响应式尺寸划分</p>\n<ul>\n<li>超小屏幕 (手机，小于 768px) : 设置宽度为 100%</li>\n<li>小屏幕 (平板，大于等于 768px) ; 设置宽度为 750px</li>\n<li>中等屏幕 (桌面显示器，大于等于 992px) : 宽度设置为 970px</li>\n<li>大屏幕 (大桌面显示器，大于等于 1200px) : 宽度设置为 170px</li>\n</ul>\n<h4 id=\"postcss\"><a class=\"卓越科技-\" href=\"#postcss\">#</a> PostCSS</h4>\n<blockquote>\n<p>PostCSS 本身是一个功能比较单一的工具。它提供了一种方式用 JavaScript 代码来处理 CSS。利用 PostCSS 可以实现 - - 些 T 程化的操作，如：自动添加浏览器前缀，代码合并，代码压缩等。<br />\n官方网址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wb3N0Y3NzLm9yZy8=\">https://postcss.org/</span></p>\n</blockquote>\n<p>安装:</p>\n<ol>\n<li>安装 node 环境</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> postcss-cli -g</pre></td></tr></table></figure><ol start=\"2\">\n<li><code>-o 、 -w</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># postcss 转换前的文件位置 -o 转换后的文件位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>postcss src/demo.css -o dist/demo.css</pre></td></tr></table></figure><ol start=\"3\">\n<li><code>postcss.config.js</code>   在转换前的位置下创建</li>\n</ol>\n<p>常见插件:</p>\n<p>需要 <code>npm install 插件名</code></p>\n<ul>\n<li>\n<p>autoprefixer  <code>添加浏览器前缀</code></p>\n<p>编辑  <code>postcss.config.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> autoprefixer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">autoprefixer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      browsers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">' > 0% '</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 所有浏览器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>postcss-import  <code>多文件css合并</code></p>\n<p>编辑  <code>postcss.config.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> postcssImport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-import'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   postcssImport</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>cssnano  <code>压缩css</code></p>\n<p>编辑  <code>postcss.config.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cssnano <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   cssnano</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>postcss-cssnext  <code>浏览器兼容性处理</code></p>\n<p>编辑  <code>postcss.config.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> cssnext <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'postcss-cssnext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   cssnext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>stylelint  <code>语法检测</code></p>\n<p>查阅官网使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWxpbnQuaW8vdXNlci1ndWlkZS9ydWxlcw==\">https://stylelint.io/user-guide/rules</span></p>\n</li>\n<li>\n<p>postcss-sprites  <code>精灵图合并</code></p>\n</li>\n</ul>\n<h3 id=\"css新特性\"><a class=\"卓越科技-\" href=\"#css新特性\">#</a> CSS 新特性</h3>\n<h4 id=\"自定义属性\"><a class=\"卓越科技-\" href=\"#自定义属性\">#</a> 自定义属性</h4>\n<blockquote>\n<p>CSS 自定义属性 (也称为 &quot;CSS 变量”) , 在目前所有的现代浏览器中都得到了支持。</p>\n</blockquote>\n<ul>\n<li>\n<p>定义与使用</p>\n<p><code>:root</code>  声明、 <code>--属性名</code> 定义属性名、 <code>var(变量名)</code>  使用变量名</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">#box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>计算</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">--number</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">#box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">/* 没有单位可以通过 calc 计算并且乘 1px */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--number<span class=\"token punctuation\">)</span> * 1px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>默认值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">/* 因为 --number 不存在、所以默认 100px */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--number<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>作用域</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">#box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">--color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/* 就近 显示蓝色 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"shapes\"><a class=\"卓越科技-\" href=\"#shapes\">#</a> shapes</h4>\n<blockquote>\n<p>CSS Shapes 布局可以实现不规则的文字环绕效果，需要和浮动配合使用。</p>\n</blockquote>\n<ul>\n<li>\n<p>shape-outside  <code>围绕方式</code></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">shape-outside</span><span class=\"token punctuation\">:</span> margin-box | padding-box | content-box</pre></td></tr></table></figure></li>\n<li>\n<p>clip-path  <code>裁剪图形</code></p>\n</li>\n<li>\n<p>shape-margin  <code>边距</code></p>\n</li>\n</ul>\n<h4 id=\"scrollbar\"><a class=\"卓越科技-\" href=\"#scrollbar\">#</a> scrollbar</h4>\n<blockquote>\n<p>CSS scrollbar 用于实现自定义滚动条样式。</p>\n</blockquote>\n<p>滚动条组成部分</p>\n<p>图解: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvOTQwODg0LzIwMTgwOC85NDA4ODQtMjAxODA4MTYxNTI2MjA2MjEtMTMwMDA5NzMyNi5wbmc=\">https://images2018.cnblogs.com/blog/940884/201808/940884-20180816152620621-1300097326.png</span></p>\n<ol>\n<li>\n<p><code>::-webkit-scrollbar</code>  滚动条整体部分</p>\n</li>\n<li>\n<p><code>::-webkit-scrollbar-thumb</code>  滚动条里面的小方块，能向上向下移动（或向左向右移动）</p>\n</li>\n<li>\n<p><code>::-webkit-scrollbar-track</code>  滚动条的轨道（里面装有 Thumb）</p>\n</li>\n<li>\n<p><code>::-webkit-scrollbar-button</code>  滚动条的轨道的两端按钮，由于通过点击微调小方块的位置。</p>\n</li>\n<li>\n<p><code>::-webkit-scrollbar-track-piece</code>  内层轨道，滚动条中间部分</p>\n</li>\n<li>\n<p><code>::-webkit-scrollbar-corner</code>  边角，即垂直滚动条和水平滚动条相交的地方</p>\n</li>\n<li>\n<p><code>::-webkit-resizer</code>  两个滚动条的交汇处上用于拖动调整元素大小的小控件</p>\n</li>\n</ol>\n<h4 id=\"scroll-snap\"><a class=\"卓越科技-\" href=\"#scroll-snap\">#</a> Scroll snap</h4>\n<blockquote>\n<p>CSS Scroll Snap (CSS 滚动捕捉) 允许你在用户完成滚动后多锁定特定的元素或位置。</p>\n</blockquote>\n<ul>\n<li>\n<p><code>scroll-snap-type</code> :</p>\n<p>属性</p>\n<pre><code>x\nmandatory\n</code></pre>\n</li>\n<li>\n<p><code>scroll-snap-align</code></p>\n<p>属性</p>\n<pre><code>start\ncenter\nend\n</code></pre>\n</li>\n</ul>\n<h2 id=\"案例\"><a class=\"卓越科技-\" href=\"#案例\">#</a> 案例</h2>\n<p><a href=\"/case/Spotlight_effect.html\">纯 CSS 实现的聚光灯效果</a><br />\n<a href=\"/case/Gradient_label.html\">渐变色标签 过渡效果</a></p>\n<h2 id=\"图解\"><a class=\"卓越科技-\" href=\"#图解\">#</a> 图解</h2>\n<blockquote>\n<p>图片来自 B 站的一位 UP 主</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/head.png\" alt=\"\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/cssselector.png\" alt=\"\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/flexbox.png\" alt=\"\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/grid.png\" alt=\"\" /></p>\n",
            "tags": [
                "Web教程",
                "CSS"
            ]
        },
        {
            "id": "https://shoka.zykjofficial.top/posts/9b6eaec3/",
            "url": "https://shoka.zykjofficial.top/posts/9b6eaec3/",
            "title": "HTML学习",
            "date_published": "2020-04-22T11:19:17.000Z",
            "content_html": "<h2 id=\"html学习\"><a class=\"卓越科技-\" href=\"#html学习\">#</a> HTML 学习</h2>\n<div class=\"note danger\">\n<p>本教程里的资料来源于网友的资料，自己整理以供学习。视频学习：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXBFNDExcTdGVQ==\">黑马程序员</span></p>\n</div>\n<h3 id=\"什么是html\"><a class=\"卓越科技-\" href=\"#什么是html\">#</a> 什么是 HTML?</h3>\n<div class=\"note info\">\n<p>HTML：超文本标签语言、注意：H5 并不是新语言，而是 Html 语言的第五个版本</p>\n</div>\n<p><strong>支持：</strong></p>\n<ul>\n<li>所有主流浏览器都支持 H5 (Chrome，Firefox，Safari ...)</li>\n<li>IE9 (部分支持）及以上支持 H5，但是 IE8 (完全不支持) 及以下不支持 H5</li>\n</ul>\n<p><strong>增加了新特性:</strong></p>\n<ul>\n<li>语义特性 (aside、nav、header、footer...)</li>\n<li>本地存储特性 (localStorage、sessionStorage)</li>\n<li>网页多媒体 (video、audio）</li>\n<li>二维三维 (transform)</li>\n<li>特效</li>\n</ul>\n<h4 id=\"html的基本骨架\"><a class=\"卓越科技-\" href=\"#html的基本骨架\">#</a> HTML 的基本骨架</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 根标签 / 根节点 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 用于存放 title、meta、base、style、script、link--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 标题标签 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 主体标签 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><div class=\"note success\">\n<p>vscode 快速生成 html 骨架：</p>\n</div>\n<ul>\n<li>! 后 tab</li>\n<li>* 快速生成必备插件：emmet</li>\n</ul>\n<h4 id=\"其他\"><a class=\"卓越科技-\" href=\"#其他\">#</a> 其他</h4>\n<p><code>&lt;!DOCTYPE xxx&gt;（DTD）</code> ：文件类型定义，用于告诉浏览器该用什么规范解析文件，必须写在 HTML 文档第一行、如：<!DOCTYPE html>说明使用的是 H5 版本</p>\n<p><code>严格模式</code> ：又称标准模式，指浏览器按照 W3C 标准解析代码</p>\n<p><code>混杂模式</code> ：又称怪异模式或兼容模式，值浏览器按照自己的方式解析代码</p>\n<p><code>如何区分？</code> ：看 DTD，如果文档包含严格的 DOCTYPE，那么一般以严格模式呈现。(严格 DTD-- 严格模式); 如果包含过渡 DTD 和 URI (统一资源标识符) 的 DOCTYPE，也以严格模式呈现。但有过渡 DTD 而没有 URI 会导致页面以混杂模式呈现。(有 URI 的过渡 DTD—— 严格模式；没有 URI 的过渡 DTD—— 混杂模式);DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现 (DTD 不存在或者格式不正确 —— 混杂模式);HTML5 没有 DTD，没有严格模式与混杂模式的区别；<strong>区分意义</strong>：如果只有严格模式，那么旧网站会受到影响，如果只有混杂模式，那么就会回到浏览器大战的混乱，每个浏览器都有自己的解析模式</p>\n<p><code>严格模式与混杂模式的解析不同点：</code></p>\n<ul>\n<li>严格模式设置元素的宽高指的是元素内容的宽度和高度，而在混杂模式则包括了 padding 和 margin</li>\n<li>严格模式无法设置行内元素的高宽。混杂模式则可以</li>\n<li><code>margin：0 auto 在IE会失效</code></li>\n</ul>\n<p><code>html标签的lang属性：</code> 用来定义当前文档显示的语言，<strong>en 为英语</strong>，<strong>zh-CN 为中文</strong></p>\n<h4 id=\"字符集\"><a class=\"卓越科技-\" href=\"#字符集\">#</a> 字符集</h4>\n<ul>\n<li>UTF-8：包含全世界所有国家需要用到的字符</li>\n<li>GB2312：简体中文</li>\n<li>BIG5：繁体中文</li>\n<li>GBK：包含全部中文字符</li>\n</ul>\n<p><strong><em>H5 中字符集写法</em></strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>标签的语义化</code> ：即用合适的标签标记对应的内容，内容与标签的含义相近。比如说导航栏用 nav 标签，文章段落用 p 标签等等。标签语义化的好处在于使 Html 结构更清晰，便于阅读和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTAlOUMlRTclQjQlQTIlRTUlQkMlOTUlRTYlOTMlOEUlRTQlQkMlOTglRTUlOEMlOTYv\"> SEO</span>，有利于团队开发</p>\n<p><code>遵循的原则</code> ：先确定语义的 Html，再选合适的 CSS</p>\n<h3 id=\"html标签\"><a class=\"卓越科技-\" href=\"#html标签\">#</a> HTML 标签</h3>\n<h4 id=\"标签\"><a class=\"卓越科技-\" href=\"#标签\">#</a> 标签</h4>\n<h5 id=\"标签分类\"><a class=\"卓越科技-\" href=\"#标签分类\">#</a> 标签分类</h5>\n<ul>\n<li>双标签  <code>&lt;标签名&gt;内容&lt;/标签名&gt;</code> :  <code>div</code> 、 <code>p</code> 、 <code>span</code>  等</li>\n<li>单标签  <code>&lt;标签名/&gt;</code> :  <code>br</code> 、 <code>input</code> 、 <code>img</code>  等</li>\n</ul>\n<h5 id=\"标签关系\"><a class=\"卓越科技-\" href=\"#标签关系\">#</a> 标签关系</h5>\n<ul>\n<li>嵌套关系：如 Html 是所有标签的父标签</li>\n<li>并列关系：如 head 和 body 标签</li>\n<li>注：如果两个标签是嵌套关系，子元素最好缩进一个 Tab 的身位。若是并列关系，最好上下对齐。</li>\n</ul>\n<h5 id=\"标签类型\"><a class=\"卓越科技-\" href=\"#标签类型\">#</a> 标签类型</h5>\n<p>一、排版标签</p>\n<ol>\n<li>\n<p>标题标签：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>标题一共六级选<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>文字加粗一行显<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>从大到小依次减<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>从重到轻随之变<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>语法规范书写后<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span>具体效果刷新见<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>文字大小 h1-h5 逐渐变小</p>\n</li>\n<li>\n<p>段落标签：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> 文本内容 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure> <p>文本内容</p>\n</li>\n<li>\n<p>水平线标签：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span>(单标签) 增加一条线 hr=horizon</pre></td></tr></table></figure> <hr />\n</li>\n<li>\n<p>换行标签：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>break</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>break</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>div span 标签：</p>\n<pre><code>网页布局的两个主要盒子  div=division\n  \n&lt;div&gt;&lt;/div&gt;\n&lt;span&gt;&lt;/span&gt;\n</code></pre>\n</li>\n</ol>\n<p>二、文本格式化标签</p>\n<ol>\n<li>\n<p>字体加粗</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong> 字体加粗 </strong></p>\n<p><b>字体加粗</b></p>\n</li>\n<li>\n<p>字体倾斜</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><em> 字体倾斜 </em><br />\n<i> 字体倾斜 </i></p>\n</li>\n<li>\n<p>字体加删除线</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><del> 字体加删除线 </del></p>\n</li>\n<li>\n<p>字体加下划线</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ins</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><ins> 字体加下划线 </ins></p>\n</li>\n<li>\n<p>其他</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sup</span><span class=\"token punctuation\">></span></span>定义上标<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sup</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>sub</span><span class=\"token punctuation\">></span></span>定义下标<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>sub</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>small</span><span class=\"token punctuation\">></span></span>变小字号<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>small</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>big</span><span class=\"token punctuation\">></span></span>变大字号<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>big</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>123<sup>定义上标</sup><br />\n123<sub>定义下标</sub><br />\n<small>变小字号</small><br />\n<big>变大字号</big></p>\n</li>\n</ol>\n<h5 id=\"标签属性\"><a class=\"卓越科技-\" href=\"#标签属性\">#</a> 标签属性</h5>\n<p>基本语法格式</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span> <span class=\"token attr-name\">属性1</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>属性值<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">属性2</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>属性值2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">...</span><span class=\"token punctuation\">></span></span>内容<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>标签名</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>示例：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在上面的语法中:</p>\n<ul>\n<li>标签可以拥有多个属性，必须写在开始标签中，位于标签名后面</li>\n<li>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</li>\n<li>任何标签的属性都有默认值，省略该属性则取默认值</li>\n<li>采取  <code>键值对 </code> 的格式 key=&quot;value&quot; 的格式</li>\n</ul>\n<h4 id=\"图像标签\"><a class=\"卓越科技-\" href=\"#图像标签\">#</a> 图像标签</h4>\n<ul>\n<li>\n<p>基本语法格式</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图像URL(图像路径)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./public/img.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure>  <img data-src=\"https://cdn.jsdelivr.net/gh/zykjofficial/zykjimg/img/index.jpg\" />\n</li>\n<li>\n<p>标记属性</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">属性值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">src</td>\n<td style=\"text-align:center\">URL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">alt</td>\n<td style=\"text-align:center\">文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">width</td>\n<td style=\"text-align:center\">像素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">height</td>\n<td style=\"text-align:center\">像素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">border</td>\n<td style=\"text-align:center\">像素</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"链接标签\"><a class=\"卓越科技-\" href=\"#链接标签\">#</a> 链接标签</h4>\n<p>基本语法格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>跳转目标<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>目标窗口的弹出方式<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>文本或图像<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96eWtqb2ZmaWNpYWwuZ2l0ZWUuaW8v\">点击跳转到我的博客</span></p>\n<p><code>href</code> ：用于指定链接目标的 url 地址，当为标签应用 href 属性值时，它就具有了超链接的功能</p>\n<p><code>target</code> ：用于指定链接页面打开方式，有 _self 和 _blank 两种取值，其中 self 为默认值 (在当前页面打开)，blank 为在新窗口中打开方式。</p>\n<p><code>即如果想要对元素添加点击链接功能，则需要对其加上链接标签即a标签</code></p>\n<p><em>注意 :</em></p>\n<ul>\n<li>\n<p>外部链接：需要添加 http://</p>\n</li>\n<li>\n<p>内部链接：直接链接内部页面名称即可 比如 <code>&lt;a href=&quot;index.html&quot;&gt;首页&lt;/a&gt;</code></p>\n</li>\n<li>\n<p>如果没有确定链接目标，通常将链接标签的 href 属性值定义为”#”，表示该链接暂时为一个空链接</p>\n</li>\n<li>\n<p>除了文本，图像表格音频视频等都可以添加超链接<br />\n如： <code>&lt;a href=&quot;img标签.html&quot; target=&quot;blank&quot;&gt; &lt;img src=&quot;C:\\photo.jpg&quot;&gt; &lt;/a&gt;</code></p>\n</li>\n</ul>\n<h4 id=\"锚点定位\"><a class=\"卓越科技-\" href=\"#锚点定位\">#</a> 锚点定位</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#id=uu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>xxx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 记得添加 #和 \"\" 号！非常重要！--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>标签名</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>uu</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>标签名</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><a href=\"#HTML学习\">点我跳转到开头</a></p>\n<h4 id=\"base标签\"><a class=\"卓越科技-\" href=\"#base标签\">#</a> Base 标签</h4>\n<p>在 head 中添加 <code>&lt;base target=&quot;_blank&quot; /&gt;</code>  可实现所有链接都以新窗口打开，同理 <code>_blank</code>  改为 <code>_self</code>  则实现所有链接都以自身窗口打开<br />\n若想实现其中某个链接以不同方式打开，则对其单独设置 target 属性即可。</p>\n<h4 id=\"特殊字符代码\"><a class=\"卓越科技-\" href=\"#特殊字符代码\">#</a> 特殊字符代码</h4>\n<p>都要记得加 “&amp;”</p>\n<p>注意： <code>实体名称对大小写敏感！</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">显示结果</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">实体名称</th>\n<th style=\"text-align:left\">实体编号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">空格</td>\n<td style=\"text-align:left\"><code>&amp;nbsp; </code></td>\n<td style=\"text-align:left\"><code>&amp;#160;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;</td>\n<td style=\"text-align:left\">小于号</td>\n<td style=\"text-align:left\"><code>&amp;lt; </code></td>\n<td style=\"text-align:left\"><code>&amp;#60;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&gt;</td>\n<td style=\"text-align:left\">大于号</td>\n<td style=\"text-align:left\"><code>&amp;gt; </code></td>\n<td style=\"text-align:left\"><code>&amp;#62;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&amp;</td>\n<td style=\"text-align:left\">和号</td>\n<td style=\"text-align:left\"><code>&amp;amp;</code></td>\n<td style=\"text-align:left\"><code>&amp;#38;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&quot;</td>\n<td style=\"text-align:left\">引号</td>\n<td style=\"text-align:left\"><code>&amp;quot;</code></td>\n<td style=\"text-align:left\"><code>&amp;#34;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">'</td>\n<td style=\"text-align:left\">撇号</td>\n<td style=\"text-align:left\"><code>&amp;apos; (IE不支持)</code></td>\n<td style=\"text-align:left\"><code>&amp;#39;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">￠</td>\n<td style=\"text-align:left\">分（cent）</td>\n<td style=\"text-align:left\"><code>&amp;cent; </code></td>\n<td style=\"text-align:left\"><code>&amp;#162;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">£</td>\n<td style=\"text-align:left\">镑（pound）</td>\n<td style=\"text-align:left\"><code>&amp;pound; </code></td>\n<td style=\"text-align:left\"><code>&amp;#163;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">¥</td>\n<td style=\"text-align:left\">元（yen）</td>\n<td style=\"text-align:left\"><code>&amp;yen;  </code></td>\n<td style=\"text-align:left\"><code>&amp;#165;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">€</td>\n<td style=\"text-align:left\">欧元（euro）</td>\n<td style=\"text-align:left\"><code>&amp;euro; </code></td>\n<td style=\"text-align:left\"><code>&amp;#8364;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">§</td>\n<td style=\"text-align:left\">小节</td>\n<td style=\"text-align:left\"><code>&amp;sect;</code></td>\n<td style=\"text-align:left\"><code>&amp;#167;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">©</td>\n<td style=\"text-align:left\">版权（copyright）</td>\n<td style=\"text-align:left\"><code>&amp;copy; </code></td>\n<td style=\"text-align:left\"><code>&amp;#169;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">®</td>\n<td style=\"text-align:left\">注册商标</td>\n<td style=\"text-align:left\"><code>&amp;reg; </code></td>\n<td style=\"text-align:left\"><code>&amp;#174;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">™</td>\n<td style=\"text-align:left\">商标</td>\n<td style=\"text-align:left\"><code>&amp;trade; </code></td>\n<td style=\"text-align:left\"><code>&amp;#8482;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">×</td>\n<td style=\"text-align:left\">乘号</td>\n<td style=\"text-align:left\"><code>&amp;times;</code></td>\n<td style=\"text-align:left\"><code>&amp;#215;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">÷</td>\n<td style=\"text-align:left\">除号</td>\n<td style=\"text-align:left\"><code>&amp;divide;</code></td>\n<td style=\"text-align:left\"><code>&amp;#247;</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"注释标签\"><a class=\"卓越科技-\" href=\"#注释标签\">#</a> 注释标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 注释内容 --></span></pre></td></tr></table></figure><p>养成注释的习惯！</p>\n<h4 id=\"路径\"><a class=\"卓越科技-\" href=\"#路径\">#</a> 路径</h4>\n<p><strong>相对路径:</strong></p>\n<ol>\n<li>图像文件和 HTML 文件位于同一文件夹。只需输入图像文件的名称即可，如 <code>&lt;img src=&quot;logo.gif&quot; /&gt;</code></li>\n<li>图像文件位于 HTML 文件的下一级文件夹：输入文件夹名和文件名，之间用 &quot; 隔开，如 <code>&lt;img src=&quot;img/logo.gif&quot; 1&gt;</code></li>\n<li>图像文件位于 HTML 文件的上 - - 级文件夹：在文件名之前加入.”&quot;，如果是上两级，则需要使用&quot;./. .&quot;. 以此类推，如 <code>&lt;img src=&quot;./logo.gif&quot;&gt;</code></li>\n</ol>\n<p><strong>绝对路径:</strong></p>\n<p>&quot;D:\\logo.gif&quot;. 或完整的网络地址，例如：网络地址:&quot; <code>https://zykjofficial.gitee.io/img/avatar.png</code> &quot;</p>\n<p><strong>一般不用绝对路径</strong></p>\n<h4 id=\"无序列表\"><a class=\"卓越科技-\" href=\"#无序列表\">#</a> 无序列表</h4>\n<blockquote>\n<p>各个列表项之间没有顺序级别之分，是并列的 (没有顺序数字前戳)。</p>\n</blockquote>\n<p>基本语法格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>列表项1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>列表项2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>列表项3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n<p>注意事项：</p>\n<ol>\n<li>\n<p><code>&lt;ul&gt;&lt;/ul&gt;</code>  之间只能嵌套 <code>&lt;li&gt;&lt;/li&gt;</code> ，直接在 <code>&lt;ul&gt;&lt;/ul&gt;</code>  标签中输入其他标签或者文字的做法是不被允许的。</p>\n</li>\n<li>\n<p><code>&lt;li&gt;&lt;/li&gt;</code>  之间相当于一个容器，可以容纳所有元素</p>\n</li>\n<li>\n<p>无序列表的样式可让 CSS 来完成设置</p>\n</li>\n</ol>\n<h4 id=\"有序列表\"><a class=\"卓越科技-\" href=\"#有序列表\">#</a> 有序列表</h4>\n<blockquote>\n<p>带顺序数字前缀的列表</p>\n</blockquote>\n<p>基本语法格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>列表项<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ....</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>属性说明：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>1</td>\n<td>百度吧。。。</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>百度吧。。。</td>\n</tr>\n<tr>\n<td>type</td>\n<td>a</td>\n<td>百度吧。。。</td>\n</tr>\n<tr>\n<td></td>\n<td>I</td>\n<td>百度吧。。。</td>\n</tr>\n<tr>\n<td></td>\n<td>i</td>\n<td>百度吧。。。</td>\n</tr>\n<tr>\n<td>start</td>\n<td>数值</td>\n<td>有序列表的起始数字</td>\n</tr>\n</tbody>\n</table>\n<ol >\n    <li>列表项</li>\n</ol>\n<p>注意事项与无序列表相同</p>\n<h4 id=\"自定义列表理解即可\"><a class=\"卓越科技-\" href=\"#自定义列表理解即可\">#</a> 自定义列表 (理解即可）</h4>\n<blockquote>\n<p>常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。一般用于网页结尾。</p>\n</blockquote>\n<p>基本语法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>名词1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>名词1解释1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>名词1解释2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span>名词2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>名词2解释1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span>名词2解释2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><dl>\n    <dt>名词1</dt>\n    <dd>名词1解释1</dd>\n    <dd>名词1解释2</dd>\n    <dt>名词2</dt>\n    <dd>名词2解释1</dd>\n    <dd>名词2解释2</dd>\n</dl>\n<h4 id=\"表格\"><a class=\"卓越科技-\" href=\"#表格\">#</a> 表格</h4>\n<ul>\n<li>\n<p>基本语法格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>标题1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>标题2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>内容1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>内容2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>  <table>\n    <tr>\n      <th>标题1</th>\n      <th>标题2</th>\n    </tr>\n    <tr>\n      <td>内容1</td>\n      <td>内容2</td>\n    </tr>\n  </table>\n<p><code>table</code> ：为整体框架</p>\n<p><code>tr</code> ：行数</p>\n<p><code>th</code> : 表头 (通俗来说就是标题)</p>\n<p><code>td</code> ：每一行内的单元格数 (没有列的说法)</p>\n<p>注意事项： <code>table里只能放tr标签，不能放其他。而td里可以放任何东西。</code></p>\n</li>\n<li>\n<p>表格属性</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性名</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">像素值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>border</code></td>\n<td style=\"text-align:left\">设置表格的边框 (默认 border=&quot;0&quot; 无边框)</td>\n<td style=\"text-align:left\">像素值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>cellspacing</code></td>\n<td style=\"text-align:left\">设置单元格与单元格边框之间的空白间距</td>\n<td style=\"text-align:left\">像素值 (默认为 2 像素)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>cellpadding</code></td>\n<td style=\"text-align:left\">设置单元格内容与单元格边框之间的空白间距</td>\n<td style=\"text-align:left\">像素值 (默认为 1 像素)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>width</code></td>\n<td style=\"text-align:left\">设置表格的宽度</td>\n<td style=\"text-align:left\">像素值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>height</code></td>\n<td style=\"text-align:left\">设置表格的高度</td>\n<td style=\"text-align:left\">像素值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>align</code></td>\n<td style=\"text-align:left\">设置表格在网页中的水平对齐方式</td>\n<td style=\"text-align:left\">left、center、 right</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>表头标签</p>\n<p><code>把表头的&lt;td&gt;换成&lt;th&gt;，会自动加粗居中</code></p>\n</li>\n<li>\n<p>表头结构</p>\n<p>表格布局时可分为头部主体和页脚</p>\n<p><code>&lt;thead&gt;&lt;/thead&gt;</code> : 用于定义表格头部</p>\n<p><code>&lt;tbody&gt;&lt;/tbody&gt;</code> : 用于定位表格主体</p>\n<p>以上两种都不显示，只是用于布局。</p>\n</li>\n<li>\n<p>表格标题</p>\n<p><code>&lt;caption&gt;标题&lt;/caption&gt;</code>  写在 table 标签内</p>\n</li>\n<li>\n<p>合并单元格</p>\n<p>跨行合并： <code>rowspan</code>  跨列合并： <code>colspan</code></p>\n<p>合并单元格的思想：将多个内容合并的时候，会有多余的东西，将其删除。例如把 3 个 td 合并成一个，就多于 2 个，需要删除</p>\n<p>公式 删除的个数 = 合并的个数 - 1</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cellpadding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cellspacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 表格框架标签 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>caption</span><span class=\"token punctuation\">></span></span>表格<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>caption</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 表头结构标签 --></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token comment\">&lt;!-- 行标签 --></span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token comment\">&lt;!-- 表头标签 --></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>性别<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>年龄<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 表头主题标签 --></span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>克拉克肯特<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\">&lt;!-- 单元标签 --></span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>男<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>35<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>布鲁斯韦恩<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>男<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">&lt;!-- 跨列合并 --></span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>戴安娜普林斯<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>女<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">rowspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>28<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>巴里艾伦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>  <table width=\"500\" height=\"200\" border=\"1\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\"><!--表格框架标签--><caption>表格</caption> \n</li>\n</ul>\n<thead> \n          <!--表头结构标签--> \n              <tr> \n                  <!--行标签--> \n                  <th>姓名</th> \n                  <!--表头标签--> \n                  <th>性别</th> \n                  <th>年龄</th> \n              </tr> \n          </thead>\n          <tbody> \n              <!--表头主题标签--> \n              <tr> \n                  <td>克拉克肯特</td> \n                  <!--单元标签--> \n                  <td>男</td> \n                  <td>35</td> \n              </tr> \n              <tr> \n                  <td>布鲁斯韦恩</td> \n                  <td colspan=\"2\">男</td> \n                  <!--跨列合并--> \n              </tr> \n              <tr> \n                  <td>戴安娜普林斯</td> \n                  <td>女</td> \n                  <td rowspan=\"2\">28</td> \n              </tr> \n              <tr> \n                  <td colspan=\"2\">巴里艾伦</td> \n              </tr> \n          </tbody> \n        </table>\n<pre><code>表格不要纠结于外观，是CSS的作用\n</code></pre>\n<h4 id=\"表单\"><a class=\"卓越科技-\" href=\"#表单\">#</a> 表单</h4>\n<blockquote>\n<p>组成：表单控件，提示信息，表单域 3 个部分构成</p>\n</blockquote>\n<ul>\n<li>\n<p>input 控件（重点）及其属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>text</code></td>\n<td>单行文本输入框</td>\n</tr>\n<tr>\n<td></td>\n<td><code>password</code></td>\n<td>密码输入框</td>\n</tr>\n<tr>\n<td></td>\n<td><code>radio</code></td>\n<td>单选按钮</td>\n</tr>\n<tr>\n<td></td>\n<td><code>checkbox</code></td>\n<td>复选框</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td><code>button</code></td>\n<td>普通按钮</td>\n</tr>\n<tr>\n<td></td>\n<td><code>submit</code></td>\n<td>提交按钮</td>\n</tr>\n<tr>\n<td></td>\n<td><code>reset</code></td>\n<td>重置按钮</td>\n</tr>\n<tr>\n<td></td>\n<td><code>image</code></td>\n<td>图像形式的提交按钮</td>\n</tr>\n<tr>\n<td></td>\n<td><code>file</code></td>\n<td>文件域</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>由用户自定义</td>\n<td>控件的名称</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>由用户自定义</td>\n<td>input 控件中的默认文本值</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>正整数</td>\n<td>input 控件在页面中的可见的字符数</td>\n</tr>\n<tr>\n<td><code>checked</code></td>\n<td>checked</td>\n<td>定义选择控件默认被选中的项</td>\n</tr>\n<tr>\n<td><code>maxlength</code></td>\n<td>正整数</td>\n<td>控件允许输入的最多字符数</td>\n</tr>\n</tbody>\n</table>\n<p><code>type</code> ：image 可以设置按钮为其他图像  <code>&lt;input type=&quot;image&quot; src=&quot;img/logo.jpg&quot;&gt;</code></p>\n<p><code>radio</code> : 通过设置相同 <code>name</code>  属性来实现单选 <input type=\"radio\" name=\"sex\" value=\"male\">男 <input type=\"radio\" name=\"sex\" value=female>女</p>\n<p><code>file</code> ：类型可以用来上传文件 添加 multiple 属性可以上传多个文件</p>\n<p><code>name</code> ：如果单选框 radio 是同一组，那么可以通过 name 属性来设置为一组，从而限制选择</p>\n<p><code>value</code> ：属性可以改变按钮中的文本</p>\n<p><code>checked</code> ：属性可以设置默认选中项 即 <code>&lt;input type=&quot;button&quot; checked=&quot;checked&quot; /&gt;</code></p>\n<p><code>maxlength</code> ：可以设置其最大输入字符数</p>\n<p><em>其他常用属性值:</em></p>\n<p><code>placeholder</code> ：可实现用户输入时里面的文字消失，删除所有文字，自动返回</p>\n<p><code>autofocus</code> ：实现打开网页时，光标自动定位到其所在表单</p>\n<p><code>autocomplete</code> ：实现自动记录表单内容，再次输入时可智能提示</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用户名：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autocomplete</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>on<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>注意：必须要有提交按钮。其次表单 <code>必须要有名字</code> 。</p>\n<p><code>required</code> ：要求必须输入</p>\n<p><code>pattern</code> ：正则表达式验证</p>\n<p><code>multiple</code> ： 实现上传填写多个东西</p>\n<p><code>form</code> ：指定某个表单 id，再将当前表单的 form 属性值设置为与其 id 相同。在将来指定 id 号的表单进行数据提交的时候，也会将当前表单元素的数据进行提交</p>\n</li>\n<li>\n<p>H5 input 新增的 type 类型</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>使用示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>email</td>\n<td><code>&lt;input type=&quot;email&quot;&gt;</code></td>\n<td>输入邮箱格式</td>\n</tr>\n<tr>\n<td>tel</td>\n<td><code>&lt;input type=&quot;tel&quot;&gt;</code></td>\n<td>输入手机号格式</td>\n</tr>\n<tr>\n<td>url</td>\n<td><code>&lt;input type=&quot;url&quot;&gt;</code></td>\n<td>输入 url 格式</td>\n</tr>\n<tr>\n<td>number</td>\n<td><code>&lt;input type=&quot;number&quot;&gt;</code></td>\n<td>输入数字格式</td>\n</tr>\n<tr>\n<td>search</td>\n<td><code>&lt;input type=&quot;search&quot;&gt;</code></td>\n<td>搜索框 (体积语义化)</td>\n</tr>\n<tr>\n<td>range</td>\n<td><code>&lt;input type=&quot;range&quot;&gt;</code></td>\n<td>自由拖动滑块</td>\n</tr>\n<tr>\n<td>time</td>\n<td><code>&lt;input type=&quot;time&quot;&gt;</code></td>\n<td>小时分钟</td>\n</tr>\n<tr>\n<td>date</td>\n<td><code>&lt;input type=&quot;date&quot;&gt;</code></td>\n<td>年月日</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td><code>&lt;input type=&quot;datetime&quot;&gt;</code></td>\n<td>时间</td>\n</tr>\n<tr>\n<td>month</td>\n<td><code>&lt;input type=&quot;month&quot;&gt;</code></td>\n<td>月年</td>\n</tr>\n<tr>\n<td>week</td>\n<td><code>&lt;input type=&quot;week&quot;&gt;</code></td>\n<td>星期年</td>\n</tr>\n</tbody>\n</table>\n<p><code>email</code> ：用于填写邮箱，填写时必须有 @符号，同时包含服务器域名。如不能满足验证，则会阻止当前的数据提交</p>\n<p><code>tel</code> ：用于填写号码，不是用来验证，是为了能在移动端打开键盘时打开数字键盘。即限制了用户只能输入数字</p>\n<p><code>url</code> ：填写网址。只能输入合法的网址，必须包含 http://</p>\n<p><code>number</code>  ：只能输入数字 其中 max 最大值 min 最小值 value 默认值</p>\n<p><code>color</code> ：选择颜色</p>\n</li>\n</ul>\n<h4 id=\"label\"><a class=\"卓越科技-\" href=\"#label\">#</a> Label</h4>\n<blockquote>\n<p>若想实现点击文字就可进入文本框，则可用 label 标签包裹整个表单选项</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span>输入账号：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><label>输入账号：<input type=\"text\" /></label></p>\n<p>若有多个输入框，想定位到某个，则对目标框设置 id，然后 <code>&lt;label for=&quot;id&quot;&gt;&lt;/label&gt;</code></p>\n<p><label for=\"username\">输入账号：<input type=\"text\" id=\"username\" /></label></p>\n<p><label for=\"password\">输入密码：<input type=\"password\" id=\"password\" /></label></p>\n<h4 id=\"textarea\"><a class=\"卓越科技-\" href=\"#textarea\">#</a> textarea</h4>\n<blockquote>\n<p>若想实现大量文本输入，则可用 textarea 标签</p>\n</blockquote>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span><span class=\"token punctuation\">></span></span>请输入留言<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><textarea>请输入留言</textarea></p>\n<p><strong>H5 新增的属性</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>autofocus</code></td>\n<td style=\"text-align:left\">autofocus</td>\n<td style=\"text-align:left\">规定在页面加载后文本区域自动获得焦点。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>cols</code></td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">规定文本区内的可见宽度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>disabled</code></td>\n<td style=\"text-align:left\">disabled</td>\n<td style=\"text-align:left\">规定禁用该文本区。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>form</code></td>\n<td style=\"text-align:left\">form_id</td>\n<td style=\"text-align:left\">规定文本区域所属的一个或多个表单。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>maxlength</code></td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">规定文本区域的最大字符数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>name</code></td>\n<td style=\"text-align:left\">name_of_textarea</td>\n<td style=\"text-align:left\">规定文本区的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>placeholder</code></td>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">规定描述文本区域预期值的简短提示。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>readonly</code></td>\n<td style=\"text-align:left\">readonly</td>\n<td style=\"text-align:left\">规定文本区为只读。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>required</code></td>\n<td style=\"text-align:left\">required</td>\n<td style=\"text-align:left\">规定文本区域是必填的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>rows</code></td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">规定文本区内的可见行数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>wrap</code></td>\n<td style=\"text-align:left\">hardsoft</td>\n<td style=\"text-align:left\">规定当在表单中提交时，文本区域中</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"select下拉菜单标签\"><a class=\"卓越科技-\" href=\"#select下拉菜单标签\">#</a> select 下拉菜单标签</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>北京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">selected</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selected<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>上海<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>广州<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>深圳<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><select> \n    <option>北京</option> \n    <option selected=\"selected\" >上海</option>\n    <option >广州</option> \n    <option>深圳</option>\n</select>\n<p>其中 <code>selected=&quot;selected&quot;</code>  代表 <code>默认选项</code></p>\n<p>option 也可以为单标签，效果一样</p>\n<p>实现多选  <code>multiple</code></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">multiple</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multiple<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>北京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>上海<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>广州<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span><span class=\"token punctuation\">></span></span>深圳<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><select multiple=\"multiple\"> \n    <option>北京</option> \n    <option>上海</option>\n    <option >广州</option> \n    <option>深圳</option>\n</select>\n<h4 id=\"表单域\"><a class=\"卓越科技-\" href=\"#表单域\">#</a> 表单域</h4>\n<blockquote>\n<p>即整个表单框架</p>\n</blockquote>\n<ul>\n<li>\n<p>基本语法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url地址<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>提交方式<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>表单名称<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>各种表单控件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>常用属性：</p>\n<p><code>action</code> ：表单收集到信息后，需要将信息传递给服务器进行处理，action 属性用于指定接收并处理表单数据的服务器程序的 url 地址</p>\n<p><code>method</code> : 用于设置表单数据的提交方式，其取值为 get 或 post</p>\n<p><code>enctype</code> ：设置解码方式，如果有 file 表单元素，则一定为 multipart/form-data</p>\n<p><code>name</code> ：用于指定表单的名称，以区分同一个页面中的多个表单。</p>\n<p><strong>注意：每个表单都要有自己的表单域</strong></p>\n</li>\n</ul>\n<h3 id=\"h5-常用新标签\"><a class=\"卓越科技-\" href=\"#h5-常用新标签\">#</a> H5 常用新标签</h3>\n<p><code>header</code> ：定义文档的页眉头部</p>\n<p><code>nav</code> ：定义导航链接的部分</p>\n<p><code>footer</code> ：定义文档或节的页脚 底部</p>\n<p><code>article</code> ：定义文章</p>\n<p><code>section</code> ：定义文档中的节</p>\n<p><code>aside</code> ：定义其所处内容之外的内容 侧边</p>\n<p><code>datalist</code> ：标签定义选项列表，请与 input 元素配合使用该元素</p>\n<p><code>fieldset</code> : 可将表单内的相关元素分组，打包</p>\n<h4 id=\"datalist用法\"><a class=\"卓越科技-\" href=\"#datalist用法\">#</a> Datalist 用法</h4>\n<p>通过设置 id 并在 input 中的 list 属性链接这个 id，从而达到智能显示的效果</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>输入明星<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">list</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>star<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- input 里面用 list --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>datalist</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>star<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- datalist 里面用 id 实现和 input 的链接 --></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>刘德华<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>郭富城<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>黎明<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token punctuation\">></span></span>张学友<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>datalist</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><input type=\"text\" value=\"输入明星\" list=\"star\">\n<!-- input里面用list -->\n<datalist id=\"star\"> \n    <!-- datalist里面用id实现和input的链接 --> \n    <option >刘德华</option> \n    <option >郭富城</option> \n    <option >黎明</option> \n    <option >张学友</option> \n</datalist>\n<p>datalist 与 selection 的区别：前者不仅可以选择，还可以输入。</p>\n<p>datalist 弊端：在不同浏览器的显示不同，少用</p>\n<p>注：如果与之连接的 input type 值为 url，则其 value 值必须添加 http://</p>\n<h4 id=\"fieldset用法\"><a class=\"卓越科技-\" href=\"#fieldset用法\">#</a> Fieldset 用法</h4>\n<p>与 legend 搭配使用，legend 包含在 fieldset 里面负责写标题。例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fieldset</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>legend</span><span class=\"token punctuation\">></span></span>用户登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>legend</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 标题 --></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    用户名：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    密　　码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fieldset</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><fieldset> \n    <legend>用户登录</legend> \n    <!-- 标题 --> \n    用户名：<input type=\"text\"> <br /> \n    密　码：<input type=\"password\">\n</fieldset> \n<h4 id=\"多媒体标签\"><a class=\"卓越科技-\" href=\"#多媒体标签\">#</a> 多媒体标签</h4>\n<p><code>引用网上的视频</code> ：embed</p>\n<p><code>引用本地视频</code> ：video 三种格式：mp4、ogg、wmv</p>\n<p><code>引用本地音频</code> ：audio 三种格式：mp3、ogg、wav</p>\n<p><strong>常用属性 ：</strong></p>\n<p><code>autoplay</code> ：控制自动播放</p>\n<p><code>controls</code> ：添加进度条等控制元素</p>\n<p><code>loop</code> ：x 循环播放 x 次</p>\n<p><code>poster</code> ：设置视频封面</p>\n<p>格式的兼容：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 从上往下一个个尝试 --></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>video</span> <span class=\"token attr-name\">controls</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx.ogg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/ogg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xxx.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>video</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><video controls> \n    <source src=\"https://www.runoob.com/try/demo_source/movie.mp4\" type=\"video/ogg\"> \n    <source src=\"https://www.runoob.com/try/demo_source/movie.ogg\" type=\"video/mp4\"> \n</video>\n<p>解决低版本浏览器新标签不兼容的措施</p>\n<ol>\n<li>\n<p>通过创建新标签并转化标签模式</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名字\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认为行级元素 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>通过引入第三方插件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Web教程",
                "Html"
            ]
        }
    ]
}